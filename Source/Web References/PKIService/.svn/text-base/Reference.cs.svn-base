//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace USDKDemo.PKIService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CertServiceSoap", Namespace="http://idtechproducts.com/")]
    public partial class CertService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private SecuredWebServiceHeader securedWebServiceHeaderValueField;
        
        private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceTokenRequestLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStackCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback SigningOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceClientCertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SigningSingleCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback FWCodeSigningOperationCompleted;
        
        private System.Threading.SendOrPostCallback MFGCommandSigningOperationCompleted;
        
        private System.Threading.SendOrPostCallback MSGSigningOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplicationAuthSigningOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceCACertListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductModelListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CertService() {
            this.Url = global::USDKDemo.Properties.Settings.Default.UniversalSDKDemo_PKIService_CertService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public SecuredWebServiceHeader SecuredWebServiceHeaderValue {
            get {
                return this.securedWebServiceHeaderValueField;
            }
            set {
                this.securedWebServiceHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;
        
        /// <remarks/>
        public event DeviceTokenRequestLogCompletedEventHandler DeviceTokenRequestLogCompleted;
        
        /// <remarks/>
        public event UpdateStackCertCompletedEventHandler UpdateStackCertCompleted;
        
        /// <remarks/>
        public event SigningCompletedEventHandler SigningCompleted;
        
        /// <remarks/>
        public event DeviceClientCertsCompletedEventHandler DeviceClientCertsCompleted;
        
        /// <remarks/>
        public event SigningSingleCertCompletedEventHandler SigningSingleCertCompleted;
        
        /// <remarks/>
        public event DataSignatureCompletedEventHandler DataSignatureCompleted;
        
        /// <remarks/>
        public event FWCodeSigningCompletedEventHandler FWCodeSigningCompleted;
        
        /// <remarks/>
        public event MFGCommandSigningCompletedEventHandler MFGCommandSigningCompleted;
        
        /// <remarks/>
        public event MSGSigningCompletedEventHandler MSGSigningCompleted;
        
        /// <remarks/>
        public event ApplicationAuthSigningCompletedEventHandler ApplicationAuthSigningCompleted;
        
        /// <remarks/>
        public event DeviceCACertListCompletedEventHandler DeviceCACertListCompleted;
        
        /// <remarks/>
        public event ProductModelListCompletedEventHandler ProductModelListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/AuthenticateUser", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthenticateUser() {
            object[] results = this.Invoke("AuthenticateUser", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync() {
            this.AuthenticateUserAsync(null);
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(object userState) {
            if ((this.AuthenticateUserOperationCompleted == null)) {
                this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateUser", new object[0], this.AuthenticateUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateUserOperationCompleted(object arg) {
            if ((this.AuthenticateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/DeviceTokenRequestLog", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviceTokenRequestLog() {
            object[] results = this.Invoke("DeviceTokenRequestLog", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceTokenRequestLogAsync() {
            this.DeviceTokenRequestLogAsync(null);
        }
        
        /// <remarks/>
        public void DeviceTokenRequestLogAsync(object userState) {
            if ((this.DeviceTokenRequestLogOperationCompleted == null)) {
                this.DeviceTokenRequestLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceTokenRequestLogOperationCompleted);
            }
            this.InvokeAsync("DeviceTokenRequestLog", new object[0], this.DeviceTokenRequestLogOperationCompleted, userState);
        }
        
        private void OnDeviceTokenRequestLogOperationCompleted(object arg) {
            if ((this.DeviceTokenRequestLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceTokenRequestLogCompleted(this, new DeviceTokenRequestLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/UpdateStackCert", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateStackCert() {
            object[] results = this.Invoke("UpdateStackCert", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStackCertAsync() {
            this.UpdateStackCertAsync(null);
        }
        
        /// <remarks/>
        public void UpdateStackCertAsync(object userState) {
            if ((this.UpdateStackCertOperationCompleted == null)) {
                this.UpdateStackCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStackCertOperationCompleted);
            }
            this.InvokeAsync("UpdateStackCert", new object[0], this.UpdateStackCertOperationCompleted, userState);
        }
        
        private void OnUpdateStackCertOperationCompleted(object arg) {
            if ((this.UpdateStackCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStackCertCompleted(this, new UpdateStackCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/Signing", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Signing(string _fileContents) {
            object[] results = this.Invoke("Signing", new object[] {
                        _fileContents});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SigningAsync(string _fileContents) {
            this.SigningAsync(_fileContents, null);
        }
        
        /// <remarks/>
        public void SigningAsync(string _fileContents, object userState) {
            if ((this.SigningOperationCompleted == null)) {
                this.SigningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSigningOperationCompleted);
            }
            this.InvokeAsync("Signing", new object[] {
                        _fileContents}, this.SigningOperationCompleted, userState);
        }
        
        private void OnSigningOperationCompleted(object arg) {
            if ((this.SigningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SigningCompleted(this, new SigningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/DeviceClientCerts", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviceClientCerts() {
            object[] results = this.Invoke("DeviceClientCerts", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceClientCertsAsync() {
            this.DeviceClientCertsAsync(null);
        }
        
        /// <remarks/>
        public void DeviceClientCertsAsync(object userState) {
            if ((this.DeviceClientCertsOperationCompleted == null)) {
                this.DeviceClientCertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceClientCertsOperationCompleted);
            }
            this.InvokeAsync("DeviceClientCerts", new object[0], this.DeviceClientCertsOperationCompleted, userState);
        }
        
        private void OnDeviceClientCertsOperationCompleted(object arg) {
            if ((this.DeviceClientCertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceClientCertsCompleted(this, new DeviceClientCertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/SigningSingleCert", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SigningSingleCert(string _fileContents) {
            object[] results = this.Invoke("SigningSingleCert", new object[] {
                        _fileContents});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SigningSingleCertAsync(string _fileContents) {
            this.SigningSingleCertAsync(_fileContents, null);
        }
        
        /// <remarks/>
        public void SigningSingleCertAsync(string _fileContents, object userState) {
            if ((this.SigningSingleCertOperationCompleted == null)) {
                this.SigningSingleCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSigningSingleCertOperationCompleted);
            }
            this.InvokeAsync("SigningSingleCert", new object[] {
                        _fileContents}, this.SigningSingleCertOperationCompleted, userState);
        }
        
        private void OnSigningSingleCertOperationCompleted(object arg) {
            if ((this.SigningSingleCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SigningSingleCertCompleted(this, new SigningSingleCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/DataSignature", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DataSignature() {
            object[] results = this.Invoke("DataSignature", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DataSignatureAsync() {
            this.DataSignatureAsync(null);
        }
        
        /// <remarks/>
        public void DataSignatureAsync(object userState) {
            if ((this.DataSignatureOperationCompleted == null)) {
                this.DataSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataSignatureOperationCompleted);
            }
            this.InvokeAsync("DataSignature", new object[0], this.DataSignatureOperationCompleted, userState);
        }
        
        private void OnDataSignatureOperationCompleted(object arg) {
            if ((this.DataSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataSignatureCompleted(this, new DataSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/FWCodeSigning", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FWCodeSigning() {
            object[] results = this.Invoke("FWCodeSigning", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FWCodeSigningAsync() {
            this.FWCodeSigningAsync(null);
        }
        
        /// <remarks/>
        public void FWCodeSigningAsync(object userState) {
            if ((this.FWCodeSigningOperationCompleted == null)) {
                this.FWCodeSigningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFWCodeSigningOperationCompleted);
            }
            this.InvokeAsync("FWCodeSigning", new object[0], this.FWCodeSigningOperationCompleted, userState);
        }
        
        private void OnFWCodeSigningOperationCompleted(object arg) {
            if ((this.FWCodeSigningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FWCodeSigningCompleted(this, new FWCodeSigningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/MFGCommandSigning", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MFGCommandSigning() {
            object[] results = this.Invoke("MFGCommandSigning", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MFGCommandSigningAsync() {
            this.MFGCommandSigningAsync(null);
        }
        
        /// <remarks/>
        public void MFGCommandSigningAsync(object userState) {
            if ((this.MFGCommandSigningOperationCompleted == null)) {
                this.MFGCommandSigningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMFGCommandSigningOperationCompleted);
            }
            this.InvokeAsync("MFGCommandSigning", new object[0], this.MFGCommandSigningOperationCompleted, userState);
        }
        
        private void OnMFGCommandSigningOperationCompleted(object arg) {
            if ((this.MFGCommandSigningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MFGCommandSigningCompleted(this, new MFGCommandSigningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/MSGSigning", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MSGSigning() {
            object[] results = this.Invoke("MSGSigning", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MSGSigningAsync() {
            this.MSGSigningAsync(null);
        }
        
        /// <remarks/>
        public void MSGSigningAsync(object userState) {
            if ((this.MSGSigningOperationCompleted == null)) {
                this.MSGSigningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMSGSigningOperationCompleted);
            }
            this.InvokeAsync("MSGSigning", new object[0], this.MSGSigningOperationCompleted, userState);
        }
        
        private void OnMSGSigningOperationCompleted(object arg) {
            if ((this.MSGSigningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MSGSigningCompleted(this, new MSGSigningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/ApplicationAuthSigning", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ApplicationAuthSigning() {
            object[] results = this.Invoke("ApplicationAuthSigning", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplicationAuthSigningAsync() {
            this.ApplicationAuthSigningAsync(null);
        }
        
        /// <remarks/>
        public void ApplicationAuthSigningAsync(object userState) {
            if ((this.ApplicationAuthSigningOperationCompleted == null)) {
                this.ApplicationAuthSigningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplicationAuthSigningOperationCompleted);
            }
            this.InvokeAsync("ApplicationAuthSigning", new object[0], this.ApplicationAuthSigningOperationCompleted, userState);
        }
        
        private void OnApplicationAuthSigningOperationCompleted(object arg) {
            if ((this.ApplicationAuthSigningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplicationAuthSigningCompleted(this, new ApplicationAuthSigningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/DeviceCACertList", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeviceCACertList() {
            object[] results = this.Invoke("DeviceCACertList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceCACertListAsync() {
            this.DeviceCACertListAsync(null);
        }
        
        /// <remarks/>
        public void DeviceCACertListAsync(object userState) {
            if ((this.DeviceCACertListOperationCompleted == null)) {
                this.DeviceCACertListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceCACertListOperationCompleted);
            }
            this.InvokeAsync("DeviceCACertList", new object[0], this.DeviceCACertListOperationCompleted, userState);
        }
        
        private void OnDeviceCACertListOperationCompleted(object arg) {
            if ((this.DeviceCACertListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceCACertListCompleted(this, new DeviceCACertListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SecuredWebServiceHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://idtechproducts.com/ProductModelList", RequestNamespace="http://idtechproducts.com/", ResponseNamespace="http://idtechproducts.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductModelList(string _fileContents) {
            object[] results = this.Invoke("ProductModelList", new object[] {
                        _fileContents});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductModelListAsync(string _fileContents) {
            this.ProductModelListAsync(_fileContents, null);
        }
        
        /// <remarks/>
        public void ProductModelListAsync(string _fileContents, object userState) {
            if ((this.ProductModelListOperationCompleted == null)) {
                this.ProductModelListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductModelListOperationCompleted);
            }
            this.InvokeAsync("ProductModelList", new object[] {
                        _fileContents}, this.ProductModelListOperationCompleted, userState);
        }
        
        private void OnProductModelListOperationCompleted(object arg) {
            if ((this.ProductModelListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductModelListCompleted(this, new ProductModelListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://idtechproducts.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://idtechproducts.com/", IsNullable=false)]
    public partial class SecuredWebServiceHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string usernameField;
        
        private string passwordField;
        
        private string deviceSerialNumberField;
        
        private string certSerialNumberField;
        
        private string productNameField;
        
        private string modelNumberField;
        
        private string authenticatedTokenField;
        
        private string dataContentField;
        
        private string echoMsgField;
        
        private string isTobeHashedField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceSerialNumber {
            get {
                return this.deviceSerialNumberField;
            }
            set {
                this.deviceSerialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CertSerialNumber {
            get {
                return this.certSerialNumberField;
            }
            set {
                this.certSerialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string ModelNumber {
            get {
                return this.modelNumberField;
            }
            set {
                this.modelNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AuthenticatedToken {
            get {
                return this.authenticatedTokenField;
            }
            set {
                this.authenticatedTokenField = value;
            }
        }
        
        /// <remarks/>
        public string DataContent {
            get {
                return this.dataContentField;
            }
            set {
                this.dataContentField = value;
            }
        }
        
        /// <remarks/>
        public string EchoMsg {
            get {
                return this.echoMsgField;
            }
            set {
                this.echoMsgField = value;
            }
        }
        
        /// <remarks/>
        public string IsTobeHashed {
            get {
                return this.isTobeHashedField;
            }
            set {
                this.isTobeHashedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviceTokenRequestLogCompletedEventHandler(object sender, DeviceTokenRequestLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceTokenRequestLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceTokenRequestLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateStackCertCompletedEventHandler(object sender, UpdateStackCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStackCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStackCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SigningCompletedEventHandler(object sender, SigningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SigningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SigningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviceClientCertsCompletedEventHandler(object sender, DeviceClientCertsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceClientCertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceClientCertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SigningSingleCertCompletedEventHandler(object sender, SigningSingleCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SigningSingleCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SigningSingleCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DataSignatureCompletedEventHandler(object sender, DataSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FWCodeSigningCompletedEventHandler(object sender, FWCodeSigningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FWCodeSigningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FWCodeSigningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MFGCommandSigningCompletedEventHandler(object sender, MFGCommandSigningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MFGCommandSigningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MFGCommandSigningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MSGSigningCompletedEventHandler(object sender, MSGSigningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MSGSigningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MSGSigningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ApplicationAuthSigningCompletedEventHandler(object sender, ApplicationAuthSigningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationAuthSigningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplicationAuthSigningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeviceCACertListCompletedEventHandler(object sender, DeviceCACertListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceCACertListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceCACertListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductModelListCompletedEventHandler(object sender, ProductModelListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductModelListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductModelListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591