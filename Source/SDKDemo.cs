using IDTechSDK;
using IDTechSDK.Configs;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using USDKDemo.Properties;

namespace USDKDemo
{
    public partial class SDKDemo : Form
    {
        delegate void SetTextCallback(string text, string ident);

        delegate void SetTextCallbackWithTextAlign(string text, string ident, bool withAlign = false);

        delegate void DisplayMSRPrompt(string text, string ident);

        delegate void refreshAllDevices();

        Dictionary<string, Config> config = new Dictionary<string, Config>();
        bool inStartup = false;
        
        public SDKDemo()
        {
            inStartup = true;
            InitializeComponent();
            enableSharedMenu();
            //Set up main callback used by all devices
            IDT_Device.setCallbackIP(MessageCallBack);

            //Set up callbacks as used by certain devices
            IDT_Device.setLongPressCallback(LongPressCallback);
            IDT_Device.setCardNotificationCallback(cardNotificationCallback);

            //Monitor USB port for IDTech devices connect/disconnect
            IDT_Device.startUSBMonitoring();

            string ver = IDT_Device.SDK_Version();
            string ver2 = Application.ProductVersion;
            version.Text = "SDK: " + ver + "  /  App: " + ver2;
            loadSettings();
            inStartup = false;
        }

        private string _lastIP = "";
        private string _lastFW = "";
        private string _lastTransfer = "";
        private string _lastCAPK = "";

        private void saveSettings()
        {
            if (inStartup) return;
            Settings.Default.pae1 = pae1t.Text;
            Settings.Default.pae2 = pae2t.Text;
            Settings.Default.pae3 = pae3t.Text;
            Settings.Default.pae4 = pae4t.Text;
            Settings.Default.pae5 = pae5t.Text;
            Settings.Default.pae6 = pae6t.Text;
            Settings.Default.pae7 = pae7t.Text;
            Settings.Default.pae8 = pae8t.Text;
            Settings.Default.lastip = _lastIP;
            Settings.Default.lastFW = _lastFW;
            Settings.Default.lastTransfer = _lastTransfer;
            Settings.Default.lastCAPK = _lastCAPK;




            Properties.Settings.Default.s_abortFirmware = abortFirmware.Checked;


            Settings.Default.Save();
        }
        bool loadingSettings = false;
        private void loadSettings()
        {
            loadingSettings = true;
            pae1t.Text = Settings.Default.pae1;
            pae2t.Text = Settings.Default.pae2;
            pae3t.Text = Settings.Default.pae3;
            pae4t.Text = Settings.Default.pae4;
            pae5t.Text = Settings.Default.pae5;
            pae6t.Text = Settings.Default.pae6;
            pae7t.Text = Settings.Default.pae7;
            pae8t.Text = Settings.Default.pae8;
            _lastIP = Settings.Default.lastip;
            _lastFW = Settings.Default.lastFW;
            _lastTransfer = Settings.Default.lastTransfer;
            _lastCAPK = Settings.Default.lastCAPK;

            pinCB.SelectedIndex = 0;
            pinMin.SelectedIndex = 0;
            pinMax.SelectedIndex = 0;
            abortFirmware.Checked = Properties.Settings.Default.s_abortFirmware;

            loadingSettings = false;


        }

        bool isVP8800()
        {
            string sel = (string)connectedDevicesList.SelectedItem;
            if (sel == null) sel = "";
            string sel2 = (string)connectedDevicesList.SelectedItem;
            if (sel2 == null) sel2 = "";
            return sel.Equals("VP8800") || sel2.Equals("VP8800") || sel.Equals(NEONAME) || sel2.Equals("NEO2");
        }

        private void closeAllDevices()
        {
            Profile.closeAllCommConnections();
        }

        private void UniPayDemo_FormClosing(object sender, FormClosingEventArgs e)
        {

            closeAllDevices();
            IDT_Device.stopUSBMonitoring();
        }

        public static String GetTimestamp()
        {
            DateTime value = DateTime.Now;
            return (value.ToString("HH:mm:ss.fff") + "  ");
        }

        private void refreshDevices()
        {
            if (connectedDevicesList.InvokeRequired)
            {
                refreshAllDevices d = new refreshAllDevices(_refreshDevices);
                Invoke(d, new object[] { });
            }
            else
            {
                _refreshDevices();
            }
            //buildTreeView();
        }

        private string NEONAME = "NEO2";
        private int usbCount = 0;

        private void _refreshDevices()
        {

            if (suppressConnectNotification) return;

            List<string> ulist = Profile.getAllConnections();


            string sel = "";
            bool usameDevice = false;





            if (connectedDevicesList != null && connectedDevicesList.SelectedItem != null)
            {
                sel = (string)connectedDevicesList.SelectedItem;
            }

            bool reloadList = false;
            if (ulist.Count != usbCount) reloadList = true;
            if (ulist.Count == usbCount && sel != null)
            {
                if (!ulist.Contains(sel)) reloadList = true;
            }
            if ((ulist.Count == usbCount) && ulist.Count > 0)
            {
                foreach (string str in connectedDevicesList.Items)
                {
                    if (!ulist.Contains(str)) reloadList = true;
                }
            }
            if (connectedDevicesList.SelectedItem == null)
            {
                reloadList = true;
            }
            if (connectedDevicesList.SelectedItem != null && connectedDevicesList.SelectedItem.ToString().Length == 0)
            {
                reloadList = true;
            }
            if (reloadList)
            {
                usbCount = ulist.Count;


                connectedDevicesList.Items.Clear();



                if (ulist != null && ulist.Count > 0)
                {
                    foreach (string item in ulist)
                    {
                        connectedDevicesList.Items.Add(item);
                        if (sel.Length > 0 && sel.Equals(item))
                        {
                            usameDevice = true;
                        }
                    }
                }
            }


            if (connectedDevicesList.Items.Count > 0)
            {
                if (usameDevice)
                { connectedDevicesList.SelectedItem = sel; }
                else if (connectedDevicesList.SelectedItem == null)
                {
                    connectedDevicesList.SelectedIndex = 0;
                }
                buildTreeView();
            }

            Config cConfig = currentlySelectedConfig;
            if (cConfig != null && cConfig.filepath != null) configPath.Text = cConfig.filepath;
            else configPath.Text = "";

            List<string> tabPages = new List<string>();
            foreach (TabPage page in Devices.TabPages) tabPages.Add(page.Text);

            if (connectedDevicesList.Items.Count == 0)
            {
                if (tabPages.Count == 1 && tabPages[0].Equals("No Device")) return;
                foreach (string str in tabPages) removeTab(str);
                return;
            }
            foreach (string str in connectedDevicesList.Items)
            {
                if (tabPages.Contains(str))
                {
                    tabPages.Remove(str);
                }
                else
                {
                    if (!RemoteAPI.SharedController.clientStatus)
                    {
                        /*
                        getLogTab(str);
                        IDTechComm comm = Profile.getComm(str);
                        if (comm.firmwareVersion == null || comm.firmwareVersion.Length == 0)
                        {
                            string fw = null;
                            IDT_Device.SharedController.device_getFirmwareVersion(ref fw, str);
                            comm.firmwareVersion = fw;
                        }
                        if (comm.serialNumber == null || comm.serialNumber.Length == 0)
                        {
                            string fw = null;
                            IDT_Device.SharedController.config_getSerialNumber(ref fw, str);
                            comm.serialNumber = fw;
                        }
                        tbOutputAppendText("FW Version: " + comm.firmwareVersion + "\r\n", str);
                        tbOutputAppendText("Serial Num: " + comm.serialNumber + "\r\n", str);
                        */
                    }


                }
            }
            foreach (string str in tabPages) removeTab(str);
            if (connectedDevicesList != null && connectedDevicesList.SelectedItem != null)
            {
                sel = (string)connectedDevicesList.SelectedItem;
            }
            TabPage pg = getLogTab(sel);
            if (pg != null) Devices.SelectedTab = pg;

        }

        private void TenKeyCallback(IDT_DEVICE_Types sender, UInt16 screenID, string screenName, string data, string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { TenKeyCallback(sender, screenID, screenName, data, ident); });
                return;
            }

            SetOutputText("10-Key, Screen ID: " + screenID.ToString() + "\n", ident);
            SetOutputText("10-Key, Screen Name: " + screenName + "\n", ident);
            SetOutputText("10-Key, data: " + data + "\n", ident);
        }

        private int screenCounter = 0;
        private void ButtonCallback(IDT_DEVICE_Types sender, UInt16 screenID, UInt16 itemID, string screenName,
            string buttonName, bool isLongPress, string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate
                {
                    ButtonCallback(sender, screenID, itemID, screenName, buttonName, isLongPress, ident);
                });
                return;
            }

            SetOutputText("Button Pressed, Screen ID: " + screenID.ToString() + "\n", ident);
            SetOutputText("Button Pressed, Button ID: " + itemID.ToString() + "\n", ident);
            SetOutputText("Button Pressed, Screen name: " + screenName + "\n", ident);
            SetOutputText("Button Pressed, Object name: " + buttonName + "\n", ident);
            if (isLongPress) SetOutputText("Button Pressed, is LongPress: TRUE\n", ident);
            else SetOutputText("Button Pressed, is LongPress: FALSE\n", ident);


        }

        private void LongPressCallback(IDT_DEVICE_Types sender, UInt16 screenID, byte area, string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { LongPressCallback(sender, screenID, area, ident); });
                return;
            }

            SetOutputText("Button Pressed, Screen ID: " + screenID.ToString() + "\n", ident);
            if (area == 0) SetOutputText("Top Left Long Press Detected \n", ident);
            else SetOutputText("Top Right Long Press Detected \n", ident);


        }

        private void pinInputCallback(string ident, IDTTransactionData transactionData)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { pinInputCallback(ident, transactionData); });
                return;
            }

            SetOutputText(": PIN Input Callback : " + transactionData.pin_KeyEntry + "\r\n", ident);

        }

        private void pinSwipeCallback(string ident, IDTTransactionData transactionData)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { pinSwipeCallback(ident, transactionData); });
                return;
            }

            SetOutputText(ipAddress + ": PIN Swipe Callback\r\n", ident);
            if (transactionData != null && transactionData.msr_track1 != null)
                SetOutputText(ipAddress + ": Track 1 - " + transactionData.msr_track1 + "\r\n", ident);
            if (transactionData != null && transactionData.msr_track2 != null)
                SetOutputText(ipAddress + ": Track 2 - " + transactionData.msr_track2 + "\r\n", ident);
            if (transactionData != null && transactionData.msr_track3 != null)
                SetOutputText(ipAddress + ": Track 3 - " + transactionData.msr_track3 + "\r\n", ident);

        }

        private void cardNotificationCallback(byte status, string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { cardNotificationCallback(status, ident); });
                return;
            }

            SetOutputText("Card Notification Callback: ", ident);
            if ((status & 0x0C) == 0x0C) SetOutputText("CARD INSERTED ", ident);
            if ((status & 0x0C) == 0x00) SetOutputText("CARD REMOVED ", ident);
            if ((status & 0x03) == 0x00) SetOutputText("CANNOT RECOGNIZE MSR STRIP ", ident);
            if ((status & 0x01) == 0x01) SetOutputText("BAD MSR SWIPE - NO DATA CAPTURED ", ident);
            if ((status & 0x02) == 0x02) SetOutputText("GOOD MSR SWIPE - DATA CAPTURED ", ident);
            if ((status & 0x02) == 0x02) SetOutputText("\r\n", ident);


        }

        private void pinFailureCallback(string ident, RETURN_CODE errorCode)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { pinFailureCallback(ident, errorCode); });
                return;
            }

            SetOutputText("PIN FAILURE", ident);
            screenCounter++;



        }

        private void pinTimeoutCallback(string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { pinTimeoutCallback(ident); });
                return;
            }

            SetOutputText(ipAddress + ": PIN Timeout Callback\r\n", ident);

        }

        private void pinCancelPromptCallback(string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { pinCancelPromptCallback(ident); });
                return;
            }

            SetOutputText(ipAddress + ": PIN Cancel Prompt Callback\r\n", ident);

        }

        private void msrSwipeCallback(string ident, IDTTransactionData transactionData)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { msrSwipeCallback(ident, transactionData); });
                return;
            }

            SetOutputText(ipAddress + ": MSR Swipe Callback\r\n", ident);
            displayCardData(transactionData, ident);
        }

        private void msrFailureCallback(string ident, RETURN_CODE errorCode)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { msrFailureCallback(ident, errorCode); });
                return;
            }

            SetOutputText(ipAddress + ": MSR Failure Callback : " + IDTechSDK.errorCode.getErrorString(errorCode) +
                          "\r\n", ident);

        }

        string lastconnectident = "";

        private void msrTimeoutCallback(string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { msrTimeoutCallback(ident); });
                return;
            }

            SetOutputText(ipAddress + ": MSR Timeout Callback\r\n", ident);

        }

        static bool _loopMSR = false;
        static bool inInit = false;
        static bool formIsClosing = false;
        private string currentFWFile = "";

        private void MessageCallBack(IDTechSDK.IDT_DEVICE_Types type, DeviceState state, byte[] data,
            IDTTransactionData cardData, EMV_Callback emvCallback, RETURN_CODE transactionResultCode, string ident)
        {
            if (InvokeRequired)
            {
                try
                {

                    Invoke((MethodInvoker)delegate
                    {
                        MessageCallBack(type, state, data, cardData, emvCallback, transactionResultCode, ident);
                    });

                    return;
                }
                catch
                {

                }
            }


            if (lastcData == null)
                lastcData = new IDTTransactionData();

            if (cardData != null && cardData.emv_unencryptedTags != null)

            {

                Dictionary<string, string> tagsNew = Common.processTLVUnencrypted(cardData.emv_unencryptedTags);

                if (tagsNew.ContainsKey("DFEE23"))
                {

                    string msrData = tagsNew["DFEE23"];

                    byte[] msr2 = Common.getByteArray(msrData);

                    string QCKBoutput = Common.msrToKB(msr2);

                    SetOutputText("KB Output:\r\n", ident);

                    SetOutputText(QCKBoutput + "\r\n", ident);


                }

            }
            if (cardData != null && cardData.emv_resultCode != EMV_RESULT_CODE.EMV_RESULT_CODE_UNKNOWN)
            {
                lastcData.emv_unencryptedTags = null;
                lastcData.emv_encryptedTags = null;
                lastcData.emv_maskedTags = null;
                lastcData.msr_rawData = null;
                lastcData.fastEMV = null;
                lastcData.emv_resultCode = 0;
                lastcData.iccPresent = 0;
                if (cardData.emv_unencryptedTags != null && cardData.emv_unencryptedTags.Length > 0)
                {
                    lastcData.emv_unencryptedTags = new byte[cardData.emv_unencryptedTags.Length];
                    Array.Copy(cardData.emv_unencryptedTags, lastcData.emv_unencryptedTags, cardData.emv_unencryptedTags.Length);
                }
                if (cardData.emv_encryptedTags != null && cardData.emv_encryptedTags.Length > 0)
                {
                    lastcData.emv_encryptedTags = new byte[cardData.emv_encryptedTags.Length];
                    Array.Copy(cardData.emv_encryptedTags, lastcData.emv_encryptedTags, cardData.emv_encryptedTags.Length);
                }
                if (cardData.emv_maskedTags != null && cardData.emv_maskedTags.Length > 0)
                {
                    lastcData.emv_maskedTags = new byte[cardData.emv_maskedTags.Length];
                    Array.Copy(cardData.emv_maskedTags, lastcData.emv_maskedTags, cardData.emv_maskedTags.Length);
                }
                if (cardData.msr_rawData != null && cardData.msr_rawData.Length > 0)
                {
                    lastcData.msr_rawData = new byte[cardData.msr_rawData.Length];
                    Array.Copy(cardData.msr_rawData, lastcData.msr_rawData, cardData.msr_rawData.Length);
                }
                lastcData.emv_resultCode = cardData.emv_resultCode;
                lastcData.iccPresent = cardData.iccPresent;
            }

            if (formIsClosing)
            {
                clearCallbackData(ref data, ref cardData);
                return;
            }




            if (emvCallback != null)
            {
                System.Diagnostics.Debug.WriteLine("MessageCallBack: " + "LCD Display =" +
                                                   Common.getHexStringFromBytes(emvCallback.lcd_messages));
            }

            IDTechComm comm = Profile.getComm(type, DEVICE_INTERFACE_Types.DEVICE_INTERFACE_USB, ident);
            if (comm == null) comm = Profile.getComm(type, DEVICE_INTERFACE_Types.DEVICE_INTERFACE_SERIAL, ident);
            if (comm == null) comm = Profile.getComm(type, DEVICE_INTERFACE_Types.DEVICE_INTERFACE_BLE, ident);
            if (comm == null) comm = Profile.getComm(type, DEVICE_INTERFACE_Types.DEVICE_INTERFACE_AUDIO_JACK, ident);
            if (comm == null) comm = Profile.getComm(type, DEVICE_INTERFACE_Types.DEVICE_INTERFACE_IP, ident);
            DEVICE_INTERFACE_Types connect = DEVICE_INTERFACE_Types.DEVICE_INTERFACE_UNKNOWN;
            if (comm != null)
            {
                connect = comm.getDeviceConnection();
            }

            if (suppressConnectNotification && (state == DeviceState.Connected || state == DeviceState.Disconnected || state == DeviceState.SocketEstablished || state == DeviceState.SocketFailed ||
                                                state == DeviceState.DefaultDeviceTypeChange)) return;
            switch (state)
            {
                case DeviceState.ButtonEvent:
                UInt16 ID = (UInt16)((data[2] * 0x100) + data[3]);
                UInt16 screenID = (UInt16)((data[0] * 0x100) + data[1]);
                SetOutputText("Button Pressed, Screen ID: " + screenID.ToString() + "\r\n", ident);
                SetOutputText("Button Pressed, Button ID: " + ID.ToString() + "\r\n", ident);
                break;
                case DeviceState.ToConnect:
                SetOutputText("To connect\n");

                break;
                case DeviceState.DefaultDeviceTypeChange:
                // refreshDevices();
                SetOutputText("\nSDK Default Device =  " + IDTechSDK.Profile.IDT_DEVICE_String(type, connect));
                SetTitleText("SDK Demo:  " + IDTechSDK.Profile.IDT_DEVICE_String(type, connect, ident), ident);
                // refreshDevices();
                buildTreeView();

                break;
                case DeviceState.Connected:
                if (!lastconnectident.Equals(ident))
                {
                    lastconnectident = ident;
                    SetOutputText(GetTimestamp() + "\nConnected " +
            IDTechSDK.Profile.IDT_DEVICE_String(type, connect, ident));
                    SetTitleText(IDTechSDK.Profile.IDT_DEVICE_String(type, connect, ident), ident);
                    refreshDevices();
                    buildTreeView();
                    if (sel == null || sel.Length == 0)
                    {
                        if (ident == null) ident = "";
                        sel = ident;
                    }
                }

                break;
                case DeviceState.Disconnected:
                if (sel != null)
                {
                    if (ident == null) ident = "";
                    if (sel.Equals(ident)) sel = "";
                }
                lastconnectident = "";
                SetOutputText(GetTimestamp() + "\nDisconnected " +
                              IDTechSDK.Profile.IDT_DEVICE_String(type, connect, ident));
                //removeTab(ident);
                refreshDevices();
                buildTreeView();
                break;
                case DeviceState.ConnectionFailed:
                SetOutputText("\nConnection Failed\n");
                break;
                case DeviceState.RKI:
                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_STARTING_RKI_UPDATE)
                {
                    SetOutputText(comm.serialNumber + ": " + " Staring RKI Process.  Please Wait....\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_NO_SERIAL_NUMBER)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: Could not retrieve serial number\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_RETRIEVING_CERTIFICATES)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: Could not retrieve certificates\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_RETRIEVING_KEY_DEVICE_GROUP)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: Could not retrieve key device group\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_PEDI_FAILED)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: PEDI Failed\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_INVALID_RSA)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: Invalid RSA\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_PEDK_FAILED)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: PEDK Failed\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_PEDK_SET_KEYS_FAILED)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: PEDK Set Keys Failed\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_PEDV_FAILED)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: PEDV Failed\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_PEDV_VERIFY_KEYS_FAILED)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: PEDV Verify Keys Failed\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_COMPLETED_RKI_UPDATE_SUCCESS)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Update Finished: Success\n", ident);
                }

                if (transactionResultCode ==
                    RETURN_CODE.RETURN_CODE_RKI_COMPLETED_RKI_UPDATE_SUCCESS_MORE_KEYS_AVAILABLE)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Update Finished:  More Keys Availble\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_ENDING_SECURE_TASK)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: Could not end secure task mode\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_UNKNOWN_FAILURE)
                {
                    SetOutputText(comm.serialNumber + ": " + " RKI Error: Unknown Failure\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_FAILED_DEVICE_KEY_REQUEST)
                {
                    SetOutputText(comm.serialNumber + ": " + " Failed on device key request, symmetric RKI.\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_FAILED_SERVER_RECEIVE_KEY)
                {
                    SetOutputText(comm.serialNumber + ": " + "Failed to get keys from the server, symmetric RKI.\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_FAILED_DEVICE_KEY_SET)
                {
                    SetOutputText(comm.serialNumber + ": " + " Failed on device to set key, symmetric RKI.\n", ident);
                }

                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_ERROR_FAILED_SERVER_VALIDATE_KEY)
                {
                    SetOutputText(comm.serialNumber + ": " + "Failed to validate key with server, symmetric RKI.\n", ident);
                }
                if (transactionResultCode == RETURN_CODE.RETURN_CODE_RKI_FAILURE)
                {
                    SetOutputText(comm.serialNumber + ": " + "RKI Failure.\n", ident);
                }

                if (data != null && data.Length > 0)
                    SetOutputText(ident + System.Text.Encoding.UTF8.GetString(data) + "\n", ident);
                break;
                case DeviceState.RemoteMessage:
                if (data != null && data.Length > 0)
                    SetOutputText(ident + System.Text.Encoding.UTF8.GetString(data) + "\n", ident);
                break;
                case DeviceState.RemoteHeartbeat:
                // SetOutputText("Remote Server Heartbeat Received from " + System.Text.Encoding.UTF8.GetString(data) + "\n\r", "app");
                System.Diagnostics.Debug.WriteLine("Remote Server Heartbeat Received from " + System.Text.Encoding.UTF8.GetString(data));
                break;
                case DeviceState.RemoteHostStarted:
                SetOutputText("Server established in this app with identifier " + System.Text.Encoding.UTF8.GetString(data) + "\n\r", "app");
                break;
                case DeviceState.RemoteHostEnded:
                SetOutputText("Server closed  in this app with identifier " + System.Text.Encoding.UTF8.GetString(data) + "\n\r", "app");
                break;

                case DeviceState.RemoteHostClosed:
                SetOutputText("Remote Server closed  with identifier " + System.Text.Encoding.UTF8.GetString(data) + "\n\r", "app");
                break;
                case DeviceState.RemoteConnected:
                SetOutputText("Client channel established with identifier " + System.Text.Encoding.UTF8.GetString(data) + "\n\r", "app");
                break;
                case DeviceState.RemoteDisconnected:
                SetOutputText("Client channel closed with identifier " + System.Text.Encoding.UTF8.GetString(data) + "\n\r", "app");
                break;
                case DeviceState.AudioJackNotification:
                if (data != null && data.Length == 1)
                {
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Device_Inserted)
                    {
                        SetOutputText("AJ_NOTIFICATION_Device_Inserted\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Device_Removed)
                    {
                        SetOutputText("AJ_NOTIFICATION_Device_Removed\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Device_Connected)
                    {
                        SetOutputText("AJ_NOTIFICATION_Device_Connected\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Connect_Successful)
                    {
                        SetOutputText("AJ_NOTIFICATION_Connect_Successful\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Connect_Cancel)
                    {
                        SetOutputText("AJ_NOTIFICATION_Connect_Cancel\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Connect_Timeout)
                    {
                        SetOutputText("AJ_NOTIFICATION_Connect_Timeout\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Device_Disconnected)
                    {
                        SetOutputText("AJ_NOTIFICATION_Device_Disconnected\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Task_Starting)
                    {
                        // SetOutputText("AJ_NOTIFICATION_Task_Starting\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Task_End_Success)
                    {
                        // SetOutputText("AJ_NOTIFICATION_Task_End_Success\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Task_End_Cancel)
                    {
                        // SetOutputText("AJ_NOTIFICATION_Task_End_Cancel\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Task_End_Timeout)
                    {
                        // SetOutputText("AJ_NOTIFICATION_Task_End_Timeout\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Connect_Started)
                    {
                        SetOutputText("AJ_NOTIFICATION_Connect_Started\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Swipe_Started)
                    {
                        SetOutputText("AJ_NOTIFICATION_Swipe_Started\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Send_Command_Started)
                    {
                        // SetOutputText("AJ_NOTIFICATION_Send_Command_Started\r\n", ident);
                    }
                    if ((AJ_NOTIFICATION)data[0] == AJ_NOTIFICATION.AJ_NOTIFICATION_Profile_Config_Started)
                    {
                        SetOutputText("AJ_NOTIFICATION_Profile_Config_Started\r\n", ident);
                    }
                }
                break;
                case DeviceState.Notification:
                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Card_Inserted_Not_Seated)
                {
                    SetOutputText(" Notification: Card inserted but not Seated\n", ident);
                }
                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Card_Removed)
                {
                    SetOutputText(" Notification: Card Removed\n", ident);
                }
                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Card_Not_Seated)
                {
                    SetOutputText(" Notification: Card not Seated\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Card_Seated)
                {
                    SetOutputText(" Notification: Card Seated\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Swipe_Card)
                {
                    SetOutputText(" Notification: Swipe Card\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Insert_Card)
                {
                    SetOutputText(" Notification: Insert Card\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Remove_Card)
                {
                    SetOutputText(" Notification: Remove Card\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Card_Insert_Timeout)
                {
                    SetOutputText(" Notification: Card Insert Timeout\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Transaction_Timeout)
                {
                    SetOutputText(" Notification: Transaction Timeout\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Card_Remove_Timeout)
                {
                    SetOutputText(" Notification: Card Remove Timeout\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Device_Unresponsive)
                {
                    SetOutputText(" Notification: Device is Unresponsive\n", ident);
                }

                if (cardData.Notification == EVENT_NOTIFICATION_Types.EVENT_NOTIFICATION_Message &&
                    cardData.message != null)
                {
                    SetOutputText(" Notification Message:" + cardData.message + "\n", ident);
                }

                break;
                case DeviceState.TransactionData:
                SetOutputText("Transaction Data Found", ident);
                if (type == IDT_DEVICE_Types.IDT_DEVICE_SECUREMAG && data != null && data.Length > 0)
                {
                    SetOutputText(" Track Data Captured:\n " + System.Text.Encoding.UTF8.GetString(data) +
                                  "\n\n", ident);
                    return;

                }

                if (cardData == null)
                {
                    SetOutputText("Card Data Null - Breaking", ident);
                    break;
                }

                SetOutputText("cardData.emv_resultCode = " + cardData.emv_resultCode.ToString(), ident);
                if (cardData.emv_resultCode == EMV_RESULT_CODE.EMV_RESULT_CODE_GO_ONLINE)
                {
                    SetOutputText("Go Online Detected", ident);
                    if (cbAutoComplete.Checked == true)
                    {
                        SetOutputText("Auto Complete Detected", ident);
                        if (cbNoHost.Checked)
                        {
                            SetOutputText(" Online request. Auto Complete EMV Transaction. No Host\n", ident);
                            clearCallbackData(ref data, ref cardData);
                            IDT_Device.SharedController.emv_completeTransaction(true, null, null, null, null);
                            return;
                        }

                        //auto complete.  Normally, a host response is required here
                        SetOutputText(" Online request. Auto Complete EMV Transaction.\n", ident);
                        byte[] responseCode = new byte[] { 0x30, 0x30 };
                        if (responseCode8A.Text.Length == 4)
                            responseCode = Common.getByteArray(responseCode8A.Text);
                        // byte[] iad = new byte[] { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 };
                        clearCallbackData(ref data, ref cardData);
                        RETURN_CODE x = 0;
                        if (tbComplete.Text.Length > 0)
                            x = IDT_Device.SharedController.emv_completeTransaction(false, responseCode, null, null,
                                Common.getByteArray(tbComplete.Text));
                        else
                            x = IDT_Device.SharedController.emv_completeTransaction(false, responseCode, null, null,
                                null);
                        if (x != RETURN_CODE.RETURN_CODE_DO_SUCCESS && x != RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
                        {
                            SetOutputText("Auto-Complete Failed Error Code: " + "0x" +
                                          String.Format("{0:X}", (ushort)x) + ": " +
                                          IDTechSDK.errorCode.getErrorString(x) + "\r\n", ident);

                        }

                        return;
                    }
                }



                if (type == IDT_DEVICE_Types.IDT_DEVICE_AUGUSTA_KB)
                {
                    if (cardData.msr_rawData != null)
                    {

                        SetOutputText("Track Data Captured: " +
                                      System.Text.Encoding.UTF8.GetString(cardData.msr_rawData) + "\n", ident);
                        System.Diagnostics.Debug.WriteLine(
                            "Track Data Captured: " + System.Text.Encoding.UTF8.GetString(cardData.msr_rawData) +
                            "\n", ident);

                    }

                    clearCallbackData(ref data, ref cardData);

                    return;
                }

                if (cardData.Event != EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_PIN_DATA &&
                    cardData.Event != EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_CARD_DATA &&
                    cardData.Event != EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_EMV_DATA)
                {
                    //SoftwareController.MSR_LED_RED_SOLID();
                    //SetOutputText("MSR Error " + cardData.msr_errorCode.ToString() + "\n", ident);
                    //System.Diagnostics.Debug.WriteLine("MSR Error " + cardData.msr_errorCode.ToString());
                }
                else
                {
                    if (cardData.Event != EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_EMV_DATA)
                        SoftwareController.MSR_LED_GREEN_SOLID();
                    //output parsed card data
                    SetOutputText("\r\n", ident);
                    SetOutputText("Return Code: " + transactionResultCode.ToString() + "\r\n", ident);
                    displayCardData(cardData, ident);
                    //if (continueMSR) btnTurnOnMSR_Click(null, null);
                    if ((cardData.Event == EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_CARD_DATA ||
                         cardData.Event == EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_EMV_DATA) &&
                        _loopMSR) btnTurnOnMSR_Click(null, null);
                    if (transactionResultCode == RETURN_CODE.RETURN_CODE_P2_REQUEST_ONLINE_AUTHORIZATION_CTLS &&
                        ((panelCTLS.Visible && cbAutoCompleteCtls.Checked) ||
                         (panelTrans.Visible && cbAutoComplete.Checked)))
                    {
                        btnOnlineOK(null, null);
                    }
                }

                break;
                case DeviceState.DataReceived:

                SetOutputTextLog(GetTimestamp() + " IN: " + Common.getHexStringFromBytes(data), ident);
                break;
                case DeviceState.DataSent:

                SetOutputTextLog(GetTimestamp() + " OUT: " + Common.getHexStringFromBytes(data), ident);
                break;
                case DeviceState.CommandTimeout:
                SetOutputText(" Command Timeout\n", ident);
                break;
                case DeviceState.CardAction:
                if (data != null & data.Length > 0)
                {
                    CARD_ACTION action = (CARD_ACTION)data[0];
                    StringBuilder sb = new StringBuilder(" Card Action Request: ");
                    if ((action & CARD_ACTION.CARD_ACTION_INSERT) == CARD_ACTION.CARD_ACTION_INSERT)
                        sb.Append("INSERT ");
                    if ((action & CARD_ACTION.CARD_ACTION_REINSERT) == CARD_ACTION.CARD_ACTION_REINSERT)
                        sb.Append("REINSERT ");
                    if ((action & CARD_ACTION.CARD_ACTION_REMOVE) == CARD_ACTION.CARD_ACTION_REMOVE)
                        sb.Append("REMOVE ");
                    if ((action & CARD_ACTION.CARD_ACTION_SWIPE) == CARD_ACTION.CARD_ACTION_SWIPE)
                        sb.Append("SWIPE ");
                    if ((action & CARD_ACTION.CARD_ACTION_SWIPE_AGAIN) == CARD_ACTION.CARD_ACTION_SWIPE_AGAIN)
                        sb.Append("SWIPE_AGAIN ");
                    if ((action & CARD_ACTION.CARD_ACTION_TAP) == CARD_ACTION.CARD_ACTION_TAP) sb.Append("TAP ");
                    if ((action & CARD_ACTION.CARD_ACTION_TAP_AGAIN) == CARD_ACTION.CARD_ACTION_TAP_AGAIN)
                        sb.Append("TAP_AGAIN ");
                    SetOutputText(sb.ToString() + "\n", ident);
                }

                break;
                case DeviceState.MSRDecodeError:
                SoftwareController.MSR_LED_RED_SOLID();
                SetOutputText(" MSR Decode Error\n", ident);
                break;
                case DeviceState.ViVOconfig:
                string outputtext = Encoding.UTF8.GetString(data, 0, data.Length);
                SetOutputText(outputtext, ident);

                if (outputtext.EndsWith("Create Device Profile Successfully")) captureComplete(ident);
                break;
                case DeviceState.SwipeTimeout:
                SetOutputText("Waiting For Data Timeout\n", ident);
                if (_loopMSR) btnTurnOnMSR_Click(null, null);
                break;
                case DeviceState.TransactionCancelled:
                System.Diagnostics.Debug.WriteLine("TransactionCancelled.", ident);
                SetOutputText(" TransactionCancelled\n", ident);
                SetOutputTextLCD("", ident);
                SetOutputTextLCD(getLCDDisplayMessage(new byte[] { 0x45, 0x4E }, (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_WELCOME), ident);
                break;
                case DeviceState.PINCancelled:
                System.Diagnostics.Debug.WriteLine("PIN Entry Cancelled.", ident);
                SetOutputText(" PIN Entry Cancelled.\n", ident);
                SetOutputTextLCD("", ident);
                SetOutputTextLCD(getLCDDisplayMessage(new byte[] { 0x45, 0x4E }, (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_WELCOME), ident);
                break;
                case DeviceState.DeviceTimeout:
                SetOutputText(" Device Timeout\n", ident);
                SetOutputTextLCD(getLCDDisplayMessage(new byte[] { 0x45, 0x4E }, (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_WELCOME), ident);
                break;
                case DeviceState.TransactionFailed:
                if ((int)transactionResultCode == 0x8300)
                {
                    SoftwareController.MSR_LED_RED_SOLID();
                }

                SetOutputText(" Transaction Failed: " +
                              IDTechSDK.errorCode.getErrorString(transactionResultCode) + "\r\n", ident);
                break;
                case DeviceState.EMVCallback:


                System.Diagnostics.Debug.WriteLine(" EMV Callback Executing.");
                if (emvCallback == null) break;
                processEMVCallback(emvCallback, ident);


                break;
                case DeviceState.PINpadKeypress:
                if (data == null)
                {
                    SetOutputText(" PINPad Key was pressed\n", ident);
                }
                else if (data.Length == 1)
                {
                    string str = ASCIIEncoding.ASCII.GetString(data);
                    SetOutputText(" PINPad Key <" + str + "> was pressed\n", ident);
                    //if (str.Equals("E")) SetOutputText(IP2 + " PINPad Event Concluded\n", ident);
                }

                break;
                case DeviceState.PINTimeout:
                SetOutputText(" PINPad Timeout\n", ident);
                break;
                case DeviceState.MenuTimeout:
                SetOutputText(" Menu Entry Timeout\n", ident);
                break;
                case DeviceState.TransactionIdle:
                SetOutputText(" Ready For Transaction\n", ident);
                SetOutputTextLCD(getLCDDisplayMessage(new byte[] { 0x45, 0x4E }, (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_WELCOME), ident);
                break;
                case DeviceState.Signature:
                SetOutputText(" Signature\n", ident);
                MemoryStream mStream = new MemoryStream();
                mStream.Write(data, 0, Convert.ToInt32(data.Length));
                try
                {
                    Bitmap bm = new Bitmap(mStream, false);
                    mStream.Dispose();
                    USDKDemo.Signature sig = new USDKDemo.Signature(bm);
                    sig.ShowDialog();
                }
                catch
                {
                    SetOutputText(" Signature could not be converted to bitmap\n", ident);
                }

                break;
                case DeviceState.FirmwareUpdate:
                switch (transactionResultCode)
                {

                    case RETURN_CODE.RETURN_CODE_FW_STARTING_UPDATE:
                    SetOutputText(" Starting Firmware Update\n", ident);
                    break;
                    case RETURN_CODE.RETURN_CODE_DO_SUCCESS:
                    SetOutputText(" Firmware Update Successful\n", ident);
                    if (type == IDT_DEVICE_Types.IDT_DEVICE_VP8800) SetOutputText("The device will now reboot and validate the firmware file.  This process may take up to 5 minutes. You may proceed once device is recognized\n", ident);

                    break;
                    case RETURN_CODE.RETURN_CODE_APPLYING_FIRMWARE_UPDATE:
                    SetOutputText(" Applying Firmware Update....\n", ident);
                    break;
                    case RETURN_CODE.RETURN_CODE_ENTERING_BOOTLOADER_MODE:
                    SetOutputText(" Entering Bootloader Mode....\n", ident);
                    break;
                    case RETURN_CODE.RETURN_CODE_BLOCK_TRANSFER_SUCCESS:
                    int start = data[0];
                    int end = data[1];
                    if (data.Length > 3)
                    {
                        start = data[0] * 0x100 + data[1];
                        end = data[2] * 0x100 + data[3];
                    }
                    string label = "";
                    if (data.Length > 4) label = Common.FirmwareType((FIRMWARE_TYPE)data[4]);

                    tbOutputAppendText(null, ident);
                    tbOutputAppendText(label + "\r\n Sent block " + start.ToString() + " of " + end.ToString() + "\n", ident);

                    break;
                    case RETURN_CODE.RETURN_CODE_ERASING_SPI:
                    int start1 = data[0];
                    int end1 = data[1];
                    if (data.Length == 4)
                    {
                        start1 = data[0] * 0x100 + data[1];
                        end1 = data[2] * 0x100 + data[3];
                    }

                    tbOutputAppendText(" Erasing SPI Flash: " + start1.ToString() + "% complete", ident);
                    break;
                    default:
                    SetOutputText(" Firmware Update Error Code: " + "0x" +
                                  String.Format("{0:X}", (ushort)transactionResultCode) + ": " +
                                  IDTechSDK.errorCode.getErrorString(transactionResultCode) + "\r\n", ident);
                    break;
                }

                break;
                case DeviceState.FileTransfer:
                switch (transactionResultCode)
                {
                    case RETURN_CODE.RETURN_CODE_FILE_TRANSFER_SUCCESSFUL:
                    if (ftSuccessful) break;
                    ftSuccessful = true;
                    SetOutputText(" File Transfer Successful\n", ident);
                    if (waitForBackground)
                    {
                        waitForBackground = false;
                        finishBackground();
                    }

                    if (waitForImage)
                    {
                        waitForImage = false;
                        setDefaultSlideShow(null, null);
                    }

                    if (fileDownloads != null && fileDownloads.Length > fileCounter)
                    {
                        byte[] file = File.ReadAllBytes(fileDownloads[fileCounter]);
                        SetOutputTextLog(null, ident);
                        RETURN_CODE rt = IDT_Device.SharedController.device_transferFile(directory + Path.GetFileName(fileDownloads[fileCounter]), file, false, ident);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {

                            tbOutputAppendText("Sending " + Path.GetFileName(fileDownloads[fileCounter]) + "\r\n", ident);
                        }
                        else
                        {
                            tbOutputAppendText("File Transfer Failed " + Path.GetFileName(fileDownloads[fileCounter]) + " Error Code: " + "0x" +
                                                String.Format("{0:X}", (ushort)rt) + ": " +
                                                IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                            checkLastExtendedErrorCode(ident);
                            System.Diagnostics.Debug.WriteLine("File Transfer Failed Error Code: " + "0x" +
                                                               String.Format("{0:X}", (ushort)rt));
                        }
                        currentFWFile = Path.GetFileName(fileDownloads[fileCounter]);
                        fileCounter++;
                    }
                    break;
                    case RETURN_CODE.RETURN_CODE_APPLYING_FILE_TRANSFER:
                    SetOutputText(" Starting File Transfer....\n", ident);
                    ftSuccessful = false;
                    break;
                    case RETURN_CODE.RETURN_CODE_BLOCK_TRANSFER_SUCCESS:
                    int start = (data[0] * 0x10000) + (data[1] * 0x100) + data[2];
                    int end = (data[3] * 0x10000) + (data[4] * 0x100) + data[5];
                    tbOutputAppendText(null, ident);
                    tbOutputAppendText(" Sent block " + start.ToString() + " of " + end.ToString() + "\n", ident);
                    break;
                    default:

                    SetOutputText(": " + currentFWFile + " File Transfer Error Code: " + "0x" +
                                  String.Format("{0:X}", (ushort)transactionResultCode) + ": " +
                                  IDTechSDK.errorCode.getErrorString(transactionResultCode) + "\r\n", ident);
                    break;
                }

                break;
                case DeviceState.ConfigurationGroup:
                tbOutputAppendText("  Config Group \r\n===================\r\n\r\n", ident);

                tbOutputAppendText(Common.getHexStringFromBytes(data) + " \r\n", ident);
                tbOutputAppendText(" --------------\r\n", ident);
                tbOutputAppendText(tlvToValues(data), ident);
                tbOutputAppendText(" ===================\r\n\r\n", ident);

                break;
                case DeviceState.MenuItem:
                if (data != null && data.Length > 0)
                {
                    MENU_SELECTION_Types selection = (MENU_SELECTION_Types)data[0];
                    if (selection == MENU_SELECTION_Types.MENU_SELECTION_CREDIT)
                    {
                        tbOutputAppendText(" CREDIT SELECTED\r\n", ident);

                    }

                    if (selection == MENU_SELECTION_Types.MENU_SELECTION_DEBIT)
                    {
                        tbOutputAppendText(" DEBIT SELECTED\r\n", ident);

                    }
                }

                break;
                case DeviceState.InvalidInterface:
                SetOutputText(" Transaction Cancelled. Card inserted when CTLS/Swipe requested \r\n", ident);
                break;
                case DeviceState.FunctionKey:
                SetOutputText(" Function Key Pressed: " + Common.getHexStringFromBytes(data) + "\r\n", ident);
                break;
                case DeviceState.PINFail:

                SetOutputText(" Pin Capture Failed:\r\n", ident);
                if (data != null)
                {
                    switch (data[0])
                    {
                        case 01:
                        SetOutputText(" Key Pad Cancel\r\n", ident);
                        break;
                        case 02:
                        SetOutputText(" External Command Cancel\r\n", ident);
                        break;
                        case 03:
                        SetOutputText(" Invalid Input Parameters\r\n", ident);
                        break;
                        case 04:
                        SetOutputText(" PAN Error\r\n", ident);
                        break;
                        case 05:
                        SetOutputText(" PIN DUKPT Key is absent\r\n", ident);
                        break;
                        case 06:
                        SetOutputText(" PIN DUKPT Key is exhausted\r\n", ident);
                        break;
                        case 07:
                        SetOutputText(" Display Error Message\r\n", ident);
                        break;
                        case 0x0C:
                        SetOutputText(" Not Allowed\r\n", ident);
                        break;

                    }
                }

                break;
                case DeviceState.SocketEstablished:
                SetOutputText(" Socket connection established to: " + ident + " \r\n");
                break;
                case DeviceState.SocketFailed:
                SetOutputText(" Socket connection failed to: " + ident + " \r\n");
                if (data != null)
                {
                    string str = ASCIIEncoding.ASCII.GetString(data);
                    SetOutputText(str + " \r\n", ident);
                }

                break;
                case DeviceState.LongPressEvent:
                byte area = (byte)(data[2]);
                UInt16 screenID2 = (UInt16)((data[0] * 0x100) + data[1]);
                SetOutputText("Long Press, Screen ID: " + screenID2.ToString() + "\r\n", ident);
                if (area == 0) SetOutputText("Top Left Area\r\n", ident);
                if (area == 1) SetOutputText("Top Right Area\r\n", ident);
                break;
                case DeviceState.TenKeyEvent:
                if (data != null)
                {
                    string keyInput = Encoding.ASCII.GetString(data);
                    SetOutputText("Ten Key Event: " + keyInput + "\r\n", ident);
                }

                break;
                case DeviceState.CancelKeyPressed:

                SetOutputText("Cancel Key Was Pressed\r\n", ident);

                break;
                LogEvent:
                if (data != null)
                {
                    string keyInput = Encoding.ASCII.GetString(data);
                    //  SetOutputText("Log Event: " + keyInput + "\r\n", ident);
                }

                break;
                case DeviceState.CameraEventTimeout:
                SetOutputText(" Camera Event Timeout \r\n", ident);
                break;
                case DeviceState.CameraEventData:
                if (data != null)
                {
                    SetOutputText(" Camera Event Data:", ident);
                    SetOutputText("Hex Data: " + Common.getHexStringFromBytes(data), ident);
                    SetOutputText("ASCII Data: " + System.Text.Encoding.ASCII.GetString(data) + " \r\n", ident);
                }

                break;
                case DeviceState.CTLSEvent:
                if (data != null && data.Length == 3)
                {
                    SetOutputText(" Event Scheme: " + String.Format("{0:X}", (byte)data[0]), ident);
                    switch (data[1])
                    {
                        case 01:
                        SetOutputText(" LED Event: " + String.Format("{0:X}", (byte)data[2]), ident);
                        switch (data[2])
                        {
                            case 0x00:
                            SetOutputText("LED0 OFF", ident);
                            break;
                            case 0x10:
                            SetOutputText("LED1 OFF", ident);
                            break;
                            case 0x20:
                            SetOutputText("LED2 OFF", ident);
                            break;
                            case 0x30:
                            SetOutputText("LED3 OFF", ident);
                            break;
                            case 0xF0:
                            SetOutputText("ALL OFF", ident);
                            break;
                            case 0x01:
                            SetOutputText("LED0 ON", ident);
                            break;
                            case 0x11:
                            SetOutputText("LED1 ON", ident);
                            break;
                            case 0x21:
                            SetOutputText("LED2 ON", ident);
                            break;
                            case 0x31:
                            SetOutputText("LED3 ON", ident);
                            break;
                            case 0xF1:
                            SetOutputText("ALL ON", ident);
                            break;
                        }
                        break;
                        case 02:
                        SetOutputText(" Buzzer Event: " + String.Format("{0:X}", (byte)data[2]), ident);
                        switch (data[2])
                        {
                            case 0x10:
                            SetOutputText("Short Beep No Change ", ident);
                            break;
                            case 0x11:
                            SetOutputText("Short Beep No Change", ident);
                            break;
                            case 0x12:
                            SetOutputText("Double Short Beep", ident);
                            break;
                            case 0x13:
                            SetOutputText("Triple Short Beep", ident);
                            break;
                            case 0x20:
                            SetOutputText("200ms Beep", ident);
                            break;
                            case 0x21:
                            SetOutputText("400ms Beep", ident);
                            break;
                            case 0x22:
                            SetOutputText("600ms Beep", ident);
                            break;
                        }
                        break;
                        case 03:
                        SetOutputText(" LCD Event: " + String.Format("{0:X}", (byte)data[2]), ident);
                        string line1 = "";
                        string line2 = "";
                        DisplayMessages.retrieveCTLSMessage(data[0], DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.ENGLISH, data[2], ref line1, ref line2);

                        string output = (line1 + "\r\n" + line2);
                        SetOutputTextLCD(output, ident, false);
                        break;
                    }
                }

                break;
                case DeviceState.InputEvent:
                if (data != null)
                {

                    byte[] theID = new byte[] { data[1], data[2], data[3], data[4] };

                    if (data[0] == 0x03)
                    {
                        //This is keypad event
                        string keyPress = "<>";
                        if (data[7] == 0x30) keyPress = "<0>";
                        if (data[7] == 0x31) keyPress = "<1>";
                        if (data[7] == 0x32) keyPress = "<2>";
                        if (data[7] == 0x33) keyPress = "<3>";
                        if (data[7] == 0x34) keyPress = "<4>";
                        if (data[7] == 0x35) keyPress = "<5>";
                        if (data[7] == 0x36) keyPress = "<6>";
                        if (data[7] == 0x37) keyPress = "<7>";
                        if (data[7] == 0x38) keyPress = "<8>";
                        if (data[7] == 0x39) keyPress = "<9>";
                        if (data[7] == 0x0D) keyPress = "<ENTER>";
                        if (data[7] == 0x08) keyPress = "<CLEAR>";
                        if (data[7] == 0x1B) keyPress = "<CANCEL>";
                        SetOutputText("Keypad Button Pressed: " + Common.getHexStringFromBytes(theID) + "  key- " + keyPress + "\r\n", ident);
                    }
                    if (data[0] == 0x00)
                    {
                        //This is keypad event
                        byte[] strData = new byte[data.Length - 6];
                        Array.Copy(data, 6, strData, 0, strData.Length);
                        string str = Encoding.UTF8.GetString(strData);
                        SetOutputText("Button Pressed: " + Common.getHexStringFromBytes(theID) + "  text- " + str.Remove(str.IndexOf("\0")) + "\r\n", ident);
                    }


                }

                break;


                default:
                break;

            }

            //clearCallbackData(ref data, ref cardData);
        }

        private void clearCallbackData(ref byte[] data, ref IDTTransactionData cardData)
        {
            if (data != null)
                Array.Clear(data, 0, data.Length);

            if (cardData != null)
            {
                if (cardData.msr_track1 != null) cardData.msr_track1 = "";
                if (cardData.msr_track2 != null) cardData.msr_track2 = "";
                if (cardData.msr_track3 != null) cardData.msr_track3 = "";
                if (cardData.device_RSN != null) cardData.device_RSN = "";
                if (cardData.pin_pinblock != null) cardData.pin_pinblock = "";
                if (cardData.pin_KSN != null) cardData.pin_KSN = "";
                if (cardData.pin_KeyEntry != null) cardData.pin_KeyEntry = "";
                if (cardData.captured_firstPANDigits != null) cardData.captured_firstPANDigits = "";
                if (cardData.captured_lastPANDigits != null) cardData.captured_lastPANDigits = "";
                if (cardData.captured_MACValue != null)
                    Array.Clear(cardData.captured_MACValue, 0, cardData.captured_MACValue.Length);
                if (cardData.captured_MACKSN != null)
                    Array.Clear(cardData.captured_MACKSN, 0, cardData.captured_MACKSN.Length);
                if (cardData.captured_InitialVector != null)
                    Array.Clear(cardData.captured_InitialVector, 0, cardData.captured_InitialVector.Length);
                if (cardData.msr_rawData != null) Array.Clear(cardData.msr_rawData, 0, cardData.msr_rawData.Length);
                if (cardData.msr_encTrack1 != null)
                    Array.Clear(cardData.msr_encTrack1, 0, cardData.msr_encTrack1.Length);
                if (cardData.msr_encTrack2 != null)
                    Array.Clear(cardData.msr_encTrack2, 0, cardData.msr_encTrack2.Length);
                if (cardData.msr_encTrack3 != null)
                    Array.Clear(cardData.msr_encTrack3, 0, cardData.msr_encTrack3.Length);
                if (cardData.msr_KSN != null) Array.Clear(cardData.msr_KSN, 0, cardData.msr_KSN.Length);
                if (cardData.msr_sessionID != null)
                    Array.Clear(cardData.msr_sessionID, 0, cardData.msr_sessionID.Length);
                if (cardData.msr_hashTrack1 != null)
                    Array.Clear(cardData.msr_hashTrack1, 0, cardData.msr_hashTrack1.Length);
                if (cardData.msr_hashTrack2 != null)
                    Array.Clear(cardData.msr_hashTrack2, 0, cardData.msr_hashTrack2.Length);
                if (cardData.msr_hashTrack3 != null)
                    Array.Clear(cardData.msr_hashTrack3, 0, cardData.msr_hashTrack3.Length);
                if (cardData.msr_extendedField != null)
                    Array.Clear(cardData.msr_extendedField, 0, cardData.msr_extendedField.Length);
                if (cardData.emv_clearingRecord != null)
                    Array.Clear(cardData.emv_clearingRecord, 0, cardData.emv_clearingRecord.Length);
                if (cardData.emv_encryptedTags != null)
                    Array.Clear(cardData.emv_encryptedTags, 0, cardData.emv_encryptedTags.Length);
                if (cardData.emv_unencryptedTags != null)
                    Array.Clear(cardData.emv_unencryptedTags, 0, cardData.emv_unencryptedTags.Length);
                if (cardData.emv_maskedTags != null)
                    Array.Clear(cardData.emv_maskedTags, 0, cardData.emv_maskedTags.Length);
                if (cardData.emv_encipheredOnlinePIN != null)
                    Array.Clear(cardData.emv_encipheredOnlinePIN, 0, cardData.emv_encipheredOnlinePIN.Length);
                if (cardData.mac != null) Array.Clear(cardData.mac, 0, cardData.mac.Length);
                if (cardData.macKSN != null) Array.Clear(cardData.macKSN, 0, cardData.macKSN.Length);
                if (cardData.captured_PAN != null) Array.Clear(cardData.captured_PAN, 0, cardData.captured_PAN.Length);
                if (cardData.captured_KSN != null) Array.Clear(cardData.captured_KSN, 0, cardData.captured_KSN.Length);
                if (cardData.captured_Expiry != null)
                    Array.Clear(cardData.captured_Expiry, 0, cardData.captured_Expiry.Length);
                if (cardData.captured_CSC != null) Array.Clear(cardData.captured_CSC, 0, cardData.captured_CSC.Length);
            }
        }

        bool ftSuccessful = false;

        private void InputNumAndEnter()
        {
            Common.pause(500);
            InputNum("1");
            InputNum("2");
            InputNum("3");
            InputNum("4");
            threadResponseEnter();





        }

        byte itemSelected = 0;

        private void InputNum(object sNum)
        {
            string ident = getIdentValue();

            int num = Int32.Parse(sNum.ToString());
            string number = sNum.ToString();
            ; // String.Format("{0:D}", num);
            if (IDTechSoftwareDevice.emvCallbackInfo == null) return;
            switch (IDTechSoftwareDevice.emvCallbackInfo.callbackType)
            {

                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_LCD:
                switch (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode)
                {
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU:
                    itemSelected = (byte)num;
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU, itemSelected);
                    itemSelected = 0;
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT:
                    //LCD control should be changed to select the menu
                    itemSelected = (byte)num;
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT, itemSelected);
                    string ssTss = String.Format("{0:X}", Thread.CurrentThread.ManagedThreadId);

                    System.Diagnostics.Debug.WriteLine(
                        "InputNum thread:" + ssTss + ", emv_callbackResponseLCD： ,==1===");

                    itemSelected = 0;
                    break;
                }

                break;

                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD:
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD_ETC:
                switch (IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode)
                {
                    case EMV_PIN_MODE.EMV_PIN_MODE_CANCEL:
                    break;
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_DUKPT:
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_MKSK:
                    case EMV_PIN_MODE.EMV_PIN_MODE_OFFLINE:

                    if (IDTechSoftwareDevice.m_posOnlinePIN.Length < 12)
                    {
                        IDTechSoftwareDevice.m_posOnlinePIN += number;

                        //Show the PIN * in the LCD
                        string messagePINPad =
                            getLCDDisplayMessage(convertLang(), (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_ENTER_PIN);


                        messagePINPad += "\r\n";
                        messagePINPad += getPIN_MASK(IDTechSoftwareDevice.m_posOnlinePIN);
                        SetOutputTextLCD(messagePINPad, ident);
                    }
                    else
                    {
                        IDTechSoftwareDevice.WarringBeep();
                    }

                    break;
                }

                break;
            }

        }

        private void threadResponseEnter()
        {
            if (IDTechSoftwareDevice.emvCallbackInfo == null) return;
            string ident = getIdentValue();

            switch (IDTechSoftwareDevice.emvCallbackInfo.callbackType)
            {

                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_LCD:
                switch (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode)
                {
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CANCEL:
                    //skip
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU:
                    //LCD control should be changed to select the menu
                    //showMenuPad(false);
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU, itemSelected);
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_PROMPT:
                    //showMenuPad(false);
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_PROMPT, 0x45); //'E'
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE2:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE3:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE4:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MESSAGE:
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT:
                    //LCD control should be changed to select the menu
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT, itemSelected);
                    string ssTss = String.Format("{0:X}", Thread.CurrentThread.ManagedThreadId);

                    System.Diagnostics.Debug.WriteLine(
                        "thread:" + ssTss + ", emv_callbackResponseLCD： ,==1===");
                    //showMenuPad(false);
                    System.Diagnostics.Debug.WriteLine(
                        "thread:" + ssTss + ", emv_callbackResponseLCD： ,==2===");
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CLEAR_SCREEN:
                    break;
                }

                break;

                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD:
                switch (IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode)
                {
                    case EMV_PIN_MODE.EMV_PIN_MODE_CANCEL:
                    break;
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_DUKPT:
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_MKSK:
                    //Send response:
                    byte[] ksn = IDTechSoftwareDevice.getKSNData();
                    byte[] pin = IDTechSoftwareDevice.getPINData(false);
                    IDT_Device.SharedController.emv_callbackResponsePIN(
                        IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode,
                        ksn, pin
                    );
                    //showPINPad(false);

                    break;

                    case EMV_PIN_MODE.EMV_PIN_MODE_OFFLINE:

                    //Send response:
                    byte[] pinData = IDTechSoftwareDevice.getPINData(true);
                    IDT_Device.SharedController.emv_callbackResponsePIN(
                        IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode,
                        null,
                        pinData);
                    //showPINPad(false);


                    break;

                    case EMV_PIN_MODE.EMV_PIN_MODE_POG:
                    string input =
                        Microsoft.VisualBasic.Interaction.InputBox("Please enter PIN Blob as Hex Data", "Data",
                            "", -1, -1);

                    if (input.Length == 0)
                    {
                        tbOutputAppendText("No data specified.  \r\n", ident);
                        IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_POG,
                            null,
                            null);
                        return;
                    }

                    IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_POG,
                        null,
                        Common.getByteArray(input));
                    //showPINPad(false);


                    break;
                    case EMV_PIN_MODE.EMV_PIN_MODE_MCPOG:

                    //Send response:
                    string input2 =
                        Microsoft.VisualBasic.Interaction.InputBox("Please enter PIN Blob as Hex Data", "Data",
                            "", -1, -1);

                    if (input2.Length == 0)
                    {
                        tbOutputAppendText("No data specified.  \r\n", ident);
                        IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_MCPOG,
                            null,
                            null);
                        return;
                    }

                    IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_MCPOG,
                        null,
                        Common.getByteArray(input2));
                    //showPINPad(false);


                    break;
                }
                break;
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD_ETC:
                switch (IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode)
                {
                    case EMV_PIN_MODE.EMV_PIN_MODE_CANCEL:
                    case EMV_PIN_MODE.EMV_PIN_MODE_BYPASS:
                    IDT_Device.SharedController.emv_callbackResponsePIN_ETC(
                        IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode,
                        null, null);

                    break;
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_DUKPT:
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_MKSK:
                    //Send response:
                    byte[] ksn = IDTechSoftwareDevice.getKSNData();
                    byte[] pin = IDTechSoftwareDevice.getPINData(false);
                    IDT_Device.SharedController.emv_callbackResponsePIN_ETC(
                        IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode,
                        ksn, pin
                    );
                    //showPINPad(false);

                    break;

                    case EMV_PIN_MODE.EMV_PIN_MODE_OFFLINE:

                    //Send response:
                    byte[] pinData = IDTechSoftwareDevice.getPINData(true);
                    IDT_Device.SharedController.emv_callbackResponsePIN_ETC(
                        IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode,
                        null,
                        pinData);
                    //showPINPad(false);


                    break;


                }

                break;
            }
        }

        string getPIN_MASK(string strPIN)
        {
            string mask = "";
            for (int i = 0; i < strPIN.Length; i++)
            {
                mask += "*";
            }

            return mask;
        }

        private void enablePanels(bool enable)
        {
            if (InvokeRequired)
            {
                try
                {
                    Invoke((MethodInvoker)delegate
                    {
                        enablePanels(enable);
                    });
                    return;
                }
                catch
                {

                }

            }

            panel3.Enabled = enable;
        }

        static object tabLock = new object();

        Dictionary<string, TextBox> messageDict = new Dictionary<string, TextBox>();
        Dictionary<string, TextBox> resultsDict = new Dictionary<string, TextBox>();
        Dictionary<string, TextBox> logDict = new Dictionary<string, TextBox>();
        Dictionary<string, Button> buttonDict = new Dictionary<string, Button>();

        private object getTabObject(string ident, int type)
        {
            //type 0 = message, type 1 = result, type 2 = log

            if (type == 0)
            {
                if (messageDict.ContainsKey(ident)) return messageDict[ident];
            }
            if (type == 1)
            {
                if (resultsDict.ContainsKey(ident)) return resultsDict[ident];
            }
            if (type == 2)
            {
                if (logDict.ContainsKey(ident)) return logDict[ident];
            }
            if (type == 3)
            {
                if (buttonDict.ContainsKey(ident)) return buttonDict[ident];
            }


            TabPage page = getLogTab(ident);
            if (page == null) return null;
            foreach (Control tb in page.Controls)
            {
                string tag = (string)tb.Tag;
                if (tag != null && tag.Length > 0)
                {
                    if (type == 0 && tag.Equals("message"))
                    {
                        if (messageDict.ContainsKey(ident)) messageDict.Remove(ident);
                        messageDict.Add(ident, (TextBox)tb);
                        return (TextBox)tb;
                    }
                    if (type == 1 && tag.Equals("result"))
                    {
                        if (resultsDict.ContainsKey(ident)) resultsDict.Remove(ident);
                        resultsDict.Add(ident, (TextBox)tb);
                        return (TextBox)tb;
                    }
                    if (type == 2 && tag.Equals("log"))
                    {
                        if (logDict.ContainsKey(ident)) logDict.Remove(ident);
                        logDict.Add(ident, (TextBox)tb);
                        return (TextBox)tb;
                    }
                    if (type == 3 && tag.Equals(ident))
                    {
                        if (buttonDict.ContainsKey(ident)) buttonDict.Remove(ident);
                        buttonDict.Add(ident, (Button)tb);
                        return (Button)tb;
                    }
                }

            }

            return null;


        }

        private object getTabObject(TabPage page, int type)
        {
            if (page == null) return null;
            //type 0 = message, type 1 = result, type 2 = log
            string ident = page.Text;
            if (type == 0)
            {
                if (messageDict.ContainsKey(ident)) return messageDict[ident];
            }
            if (type == 1)
            {
                if (resultsDict.ContainsKey(ident)) return resultsDict[ident];
            }
            if (type == 2)
            {
                if (logDict.ContainsKey(ident)) return logDict[ident];
            }
            if (type == 3)
            {
                if (buttonDict.ContainsKey(ident)) return buttonDict[ident];
            }


            foreach (Control tb in page.Controls)
            {
                string tag = (string)tb.Tag;
                if (tag != null && tag.Length > 0)
                {
                    if (type == 0 && tag.Equals("message"))
                    {
                        if (messageDict.ContainsKey(ident)) messageDict.Remove(ident);
                        messageDict.Add(ident, (TextBox)tb);
                        return (TextBox)tb;
                    }
                    if (type == 1 && tag.Equals("result"))
                    {
                        if (resultsDict.ContainsKey(ident)) resultsDict.Remove(ident);
                        resultsDict.Add(ident, (TextBox)tb);
                        return (TextBox)tb;
                    }
                    if (type == 2 && tag.Equals("log"))
                    {
                        if (logDict.ContainsKey(ident)) logDict.Remove(ident);
                        logDict.Add(ident, (TextBox)tb);
                        return (TextBox)tb;
                    }
                    if (type == 3 && tag.Equals(ident))
                    {
                        if (buttonDict.ContainsKey(ident)) buttonDict.Remove(ident);
                        buttonDict.Add(ident, (Button)tb);
                        return (Button)tb;
                    }
                }

            }

            return null;


        }

        private void removeTab(string ident)
        {
            lock (tabLock)
            {
                try
                {
                    if (Devices != null && Devices.TabCount == 1 && Devices.TabPages[0].Text.Equals(ident))
                    {
                        TextBox tb = (TextBox)getTabObject(Devices.TabPages[0], 0);
                        tb.Text = "WELCOME";
                        tb = (TextBox)getTabObject(Devices.TabPages[0], 1);
                        tb.Text = "";
                        tb = (TextBox)getTabObject(Devices.TabPages[0], 2);
                        tb.Text = "";
                        Button b = (Button)getTabObject(Devices.TabPages[0], 3);
                        Devices.TabPages[0].Text = "No Device";
                        b.Tag = "No Device";
                        return;
                    }

                    TabPage foundPage = null;
                    foreach (TabPage tabpage in Devices.TabPages)
                    {
                        if (tabpage.Text.Equals(ident))
                        {
                            foundPage = tabpage;
                            break; ;
                        }
                    }
                    if (foundPage != null) Devices.TabPages.Remove(foundPage);
                }
                catch
                {

                }

            }

        }

        string[] properties = new string[] { "BackColor", "Dock", "Font", "Location", "Margin", "Multiline", "Size", "Tag", "Text", "TextAlign", "ReadOnly", "ScrollBars", "AutoSize", "Padding", "UseVisualStyleBackColor" };

        private bool copySource(string name)
        {
            if (name == null || name.Length == 0) return false;
            foreach (string prop in properties)
            {
                if (name.Equals(prop)) return true;
            }
            return false;
        }

        private TabPage getLogTab(string ident)
        {
            lock (tabLock)
            {
                if (ident == null) return null;
                if (ident.Equals("app")) return null;
                if (ident.Length == 0) return null;
                if (Devices.TabCount == 1 && Devices.TabPages[0].Text.Equals("No Device"))
                {
                    TextBox tb = (TextBox)getTabObject(Devices.TabPages[0], 0);
                    tb.Text = "WELCOME";
                    tb = (TextBox)getTabObject(Devices.TabPages[0], 1);
                    tb.Text = "";
                    tb = (TextBox)getTabObject(Devices.TabPages[0], 2);
                    tb.Text = "";
                    Button b = (Button)getTabObject(Devices.TabPages[0], 3);
                    Devices.TabPages[0].Text = ident;
                    b.Tag = ident;
                    if (!config.ContainsKey(ident))
                    {
                        config.Add(ident, new Config());
                    }
                    return Devices.TabPages[0];
                }


                foreach (TabPage tabpage in Devices.TabPages)
                {
                    if (tabpage.Text.Equals(ident)) return tabpage;
                }
                //doesn't exist, so let's create a new output window
                TabPage page = new TabPage();


                foreach (PropertyInfo sourceProperty in Devices.TabPages[0].GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(Devices.TabPages[0], null);
                        sourceProperty.SetValue(page, newValue, null);

                    }
                }


                page.Text = ident;


                Button clear = new Button();
                page.Controls.Add(clear);
                TextBox tbLCD2 = new TextBox();
                page.Controls.Add(tbLCD2);
                Label label582 = new Label();
                page.Controls.Add(label582);
                TextBox tbOutput2 = new TextBox();
                page.Controls.Add(tbOutput2);
                Label label592 = new Label();
                page.Controls.Add(label592);
                TextBox logOutput2 = new TextBox();
                page.Controls.Add(logOutput2);

                if (messageDict.ContainsKey(ident)) messageDict.Remove(ident);
                messageDict.Add(ident, (TextBox)tbLCD2);

                if (resultsDict.ContainsKey(ident)) resultsDict.Remove(ident);
                resultsDict.Add(ident, (TextBox)tbOutput2);
                if (logDict.ContainsKey(ident)) logDict.Remove(ident);
                logDict.Add(ident, (TextBox)logOutput2);
                if (buttonDict.ContainsKey(ident)) buttonDict.Remove(ident);
                buttonDict.Add(ident, (Button)clear);

                foreach (PropertyInfo sourceProperty in ClearLogsButton.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(ClearLogsButton, null);
                        sourceProperty.SetValue(clear, newValue, null);
                    }

                }

                clear.Tag = ident;
                clear.Click += new System.EventHandler(this.btnClearLogs_Click_1);

                foreach (PropertyInfo sourceProperty in logOutput.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(logOutput, null);
                        sourceProperty.SetValue(logOutput2, newValue, null);
                    }
                }

                foreach (PropertyInfo sourceProperty in label59.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(label59, null);
                        sourceProperty.SetValue(label592, newValue, null);
                    }
                }

                foreach (PropertyInfo sourceProperty in label58.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(label58, null);
                        sourceProperty.SetValue(label582, newValue, null);
                    }
                }

                foreach (PropertyInfo sourceProperty in tbOutput.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(tbOutput, null);
                        sourceProperty.SetValue(tbOutput2, newValue, null);
                    }
                }

                foreach (PropertyInfo sourceProperty in tbLCD.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))
                {
                    if (copySource(sourceProperty.Name))
                    {
                        object newValue = sourceProperty.GetValue(tbLCD, null);
                        sourceProperty.SetValue(tbLCD2, newValue, null);
                    }
                }
                if (!config.ContainsKey(ident))
                {
                    config.Add(ident, new Config());
                }
                tbOutput2.Text = "";
                logOutput2.Text = "";
                Devices.Controls.Add(page);

                clear.BringToFront();
                tbLCD2.BringToFront();
                label582.BringToFront();
                tbOutput2.BringToFront();
                label592.BringToFront();
                logOutput2.BringToFront();

                return page;
            }

        }

        private void btnClearLogs_Click_1(object sender, EventArgs e)
        {


            Button b = (Button)sender;
            SetOutputText(null);
            SetOutputText(null, (string)b.Tag);
            SetOutputTextLog(null, (string)b.Tag);

        }
        private void SetOutputTextLCD(string text, string ident, bool alignText = false)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (tbLCD.InvokeRequired)
            {
                SetTextCallbackWithTextAlign d = new SetTextCallbackWithTextAlign(SetOutputTextLCD);
                Invoke(d, new object[] { text, ident, alignText });
            }
            else
            {
                if (ident == null || ident.Length == 0) ident = IDT_Device._path;
                TextBox tb = (TextBox)getTabObject(ident, 0);
                if (tb == null) tb = sdkOutput;
                try
                {
                    if (text == null)
                        tb.Text = "";
                    else if (text.Length == 0)
                        tb.Text = "";
                    else
                    {
                        tb.Text = "";
                        if (alignText)
                            tb.TextAlign = HorizontalAlignment.Left;
                        else
                            tb.TextAlign = HorizontalAlignment.Center;
                        tb.AppendText(text);
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("Exception:" + ex);
                }
            }
        }

        private string tlvToValues(byte[] tlv)
        {
            string text = "";
            Dictionary<string, string> dict = Common.processTLVUnencrypted(tlv);
            foreach (KeyValuePair<string, string> kvp in dict) text += kvp.Key + ": " + kvp.Value + "\r\n";
            dict.Clear();
            dict = null;
            return text;
        }

        bool lastEncryptAES = false;

        private void displayCardData(IDTTransactionData cardData, string ident)
        {
            string text = "";
            if (cardData != null && cardData.Base64 != null && cardData.Base64.Length > 0)
                text += "Raw Data (Base 64):\r\n" + cardData.Base64 + "\r\n\r\n";
            if (cardData != null && cardData.fastEMV != null && cardData.fastEMV.Length > 0)
                text += "Fast EMV Data: " + cardData.fastEMV + "\r\n\r\n";
            if (cardData.Event == EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_PIN_DATA)
            {
                SetOutputText("PIN Data received:\r\n", ident);
                if (cardData.pin_KSN != null && cardData.pin_KSN.Length > 0)
                {
                    SetOutputText("KSN: " + cardData.pin_KSN + "\r\n", ident);

                }

                if (cardData.pin_pinblock != null && cardData.pin_pinblock.Length > 0)
                {
                    SetOutputText("PINBLOCK: " + cardData.pin_pinblock + "\r\n", ident);

                }

                if (cardData.pin_KeyEntry != null && cardData.pin_KeyEntry.Length > 0)
                {
                    SetOutputText("Key Entry: " + cardData.pin_KeyEntry + "\r\n", ident);

                }

                return;

            }

            if (cardData.Event == EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_CARD_DATA)
            {
                if (cardData.msr_rawData != null)
                {

                    SetOutputText("Raw Data (HEX): \r\n" + Common.getHexStringFromBytes(cardData.msr_rawData) + "\r\n", ident);

                }

            }

            if (cardData.captured_KSN != null)
            {
                //encrypted captured data
                if (cardData.captured_InitialVector != null)
                    text += "Man. Captured Initial Vector: " +
                            Common.getHexStringFromBytes(cardData.captured_InitialVector) + "\r\n";
                if (cardData.captured_KSN != null)
                    text += "Man. Captured KSN: " + Common.getHexStringFromBytes(cardData.captured_KSN) + "\r\n";
                if (cardData.captured_PAN != null)
                    text += "Man. Captured Encrypted PAN: " + Common.getHexStringFromBytes(cardData.captured_PAN) +
                            "\r\n";
                if (cardData.captured_Expiry != null)
                    text += "Man. Captured Encrypted Expiry: " +
                            Common.getHexStringFromBytes(cardData.captured_Expiry) + "\r\n";
                if (cardData.captured_CSC != null)
                    text += "Man. Captured Encrypted CSC: " + Common.getHexStringFromBytes(cardData.captured_CSC) +
                            "\r\n";
                if (cardData.captured_firstPANDigits != null && cardData.captured_firstPANDigits.Length > 0)
                    text += "PAN First Digits: " + cardData.captured_firstPANDigits + "\r\n";
                if (cardData.captured_lastPANDigits != null && cardData.captured_firstPANDigits.Length > 0)
                    text += "PAN Last Digits: " + cardData.captured_lastPANDigits + "\r\n";
                if (cardData.captured_MACValue != null)
                    text += "Man. Captured MAC: " + Common.getHexStringFromBytes(cardData.captured_MACValue) + "\r\n";
                if (cardData.captured_MACKSN != null)
                    text += "Man. Captured MAC KSN: " + Common.getHexStringFromBytes(cardData.captured_MACKSN) + "\r\n";




            }
            else if (cardData.captured_PAN != null)
            {
                //unecnrypted captured data
                if (cardData.captured_PAN != null)
                    text += "Man. Captured  PAN: " + System.Text.Encoding.UTF8.GetString(cardData.captured_PAN) +
                            "\r\n";
                if (cardData.captured_Expiry != null)
                    text += "Man. Captured  Expiry: " + System.Text.Encoding.UTF8.GetString(cardData.captured_Expiry) +
                            "\r\n";
                if (cardData.captured_CSC != null)
                    text += "Man. Captured  CSC: " + System.Text.Encoding.UTF8.GetString(cardData.captured_CSC) +
                            "\r\n";
            }



            if (cardData.device_RSN != null && cardData.device_RSN.Length > 0)
                text += "Serial Number: " + cardData.device_RSN + "\r\n";

            if (cardData.msr_track1Length > 0)
                text += "Track 1: " + cardData.msr_track1 + "\r\n";

            if (cardData.msr_encTrack1 != null)
                text += "Track 1 Encrypted: " + Common.getHexStringFromBytes(cardData.msr_encTrack1) + "\r\n";



            if (cardData.msr_hashTrack1 != null)
                text += "Track 1 Hash: " + Common.getHexStringFromBytes(cardData.msr_hashTrack1) + "\r\n";




            if (cardData.msr_track2Length > 0)
                text += "Track 2: " + cardData.msr_track2 + "\r\n";


            if (cardData.msr_encTrack2 != null)
                text += "Track 2 Encrypted: " + Common.getHexStringFromBytes(cardData.msr_encTrack2) + "\r\n";


            if (cardData.msr_hashTrack2 != null)
                text += "Track 2 Hash: " + Common.getHexStringFromBytes(cardData.msr_hashTrack2) + "\r\n";




            if (cardData.msr_track3Length > 0)
                text += "Track 3: " + cardData.msr_track3 + "\r\n";


            if (cardData.msr_encTrack3 != null)
                text += "Track 3 Encrypted: " + Common.getHexStringFromBytes(cardData.msr_encTrack3) + "\r\n";


            if (cardData.msr_hashTrack3 != null)
                text += "Track 3 Hash: " + Common.getHexStringFromBytes(cardData.msr_hashTrack3) + "\r\n";

            if (cardData.msr_KSN != null)
                text += "KSN: " + Common.getHexStringFromBytes(cardData.msr_KSN) + "\r\n";


            if (cardData.emv_clearingRecord != null)
            {
                if (cardData.emv_clearingRecord.Length > 0)
                {
                    text += "\r\nCTLS Clearing Record: \r\n";
                    text += Common.getHexStringFromBytes(cardData.emv_clearingRecord) + "\r\n";
                    Dictionary<string, string> dict = Common.processTLVUnencrypted(cardData.emv_clearingRecord);
                    foreach (KeyValuePair<string, string> kvp in dict) text += kvp.Key + ": " + kvp.Value + "\r\n";
                    text += "\r\n\r\n";

                }

            }

            if (cardData.emv_unencryptedTags != null)
            {
                if (cardData.emv_unencryptedTags.Length > 0)
                {
                    text += "\r\n======================== \r\n";

                    text += "\r\nUnencrypted Tags: \r\n";
                    text += Common.getHexStringFromBytes(cardData.emv_unencryptedTags) + "\r\n\r\n";
                    text += tlvToValues(cardData.emv_unencryptedTags);
                    text += "\r\n======================== \r\n";
                }

            }

            if (cardData.emv_encryptedTags != null)
            {
                if (cardData.emv_encryptedTags.Length > 0)
                {
                    text += "\r\n======================== \r\n";
                    text += "\r\nEncrypted Tags: \r\n";
                    text += Common.getHexStringFromBytes(cardData.emv_encryptedTags) + "\r\n\r\n";
                    text += tlvToValues(cardData.emv_encryptedTags);
                    text += "\r\n======================== \r\n";

                }

            }

            if (cardData.emv_maskedTags != null)
            {
                if (cardData.emv_maskedTags.Length > 0)
                {
                    text += "\r\n======================== \r\n";
                    text += "\r\nMasked Tags: \r\n";
                    text += Common.getHexStringFromBytes(cardData.emv_maskedTags) + "\r\n\r\n";
                    text += tlvToValues(cardData.emv_maskedTags);
                    text += "\r\n======================== \r\n";

                }

            }

            if (cardData.emv_hasAdvise) text += "CARD RESPONSE HAS ADVISE" + "\r\n";
            if (cardData.emv_hasReversal) text += "CARD RESPONSE HAS REVERSAL" + "\r\n";
            if (cardData.iccPresent == 1) text += "ICC Present: TRUE" + "\r\n";
            if (cardData.iccPresent == 2) text += "ICC Present: FALSE" + "\r\n";
            if (cardData.isCTLS == 1) text += "CTLS Capture: TRUE" + "\r\n";
            if (cardData.isCTLS == 2) text += "CTLS Capture: FALSE" + "\r\n";


            if (cardData.msr_extendedField != null && cardData.msr_extendedField.Length > 0)
                text += "Extended Field Bytes: " + Common.getHexStringFromBytes(cardData.msr_extendedField) + "\r\n";
            lastEncryptAES = false;
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_TYPE_TDES)
                text += "Encryption Type: TDES\r\n";
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_TYPE_AES)
            {
                lastEncryptAES = true;
                text += "Encryption Type: AES\r\n";
            }

            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_TRANS_ARMOR_PKI)
                text += "Encryption Type: TRANS_ARMOR_PKI\r\n";
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_TRANS_ARMOR_TDES)
                text += "Encryption Type: TRANS_ARMOR_TDES\r\n";
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_VOLTAGE)
                text += "Encryption Type: VOLTAGE\r\n";
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_VISA_FPE)
                text += "Encryption Type: VISA_FPE\r\n";
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_VERIFONE_FPE)
                text += "Encryption Type: VERIFONE_FPE\r\n";
            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_DESJARDIN)
                text += "Encryption Type: DESJARDIN\r\n";

            if (cardData.captureEncryptType == CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_TYPE_NONE)
                text += "Encryption Type: NONE\r\n";

            if (cardData.captureEncryptType != CAPTURE_ENCRYPT_TYPE.CAPTURE_ENCRYPT_TYPE_NONE)
            {
                if (cardData.msr_keyVariantType == KEY_VARIANT_TYPE.KEY_VARIANT_TYPE_DATA)
                    text += "Key Type: Data Variant\r\n";
                else if (cardData.msr_keyVariantType == KEY_VARIANT_TYPE.KEY_VARIANT_TYPE_PIN)
                    text += "Key Type: PIN Variant\r\n";
            }



            if (cardData.mac != null)
                text += "MAC: " + Common.getHexStringFromBytes(cardData.mac) + "\r\n";

            if (cardData.macKSN != null)
                text += "MAC KSN: " + Common.getHexStringFromBytes(cardData.macKSN) + "\r\n";

            if (cardData.msr_sessionID != null)
                text += "Session ID: " + Common.getHexStringFromBytes(cardData.msr_sessionID) + "\r\n";

            if (cardData.Event == EVENT_TRANSACTION_DATA_Types.EVENT_TRANSACTION_DATA_EMV_DATA)
            {
                switch (cardData.emv_resultCode)
                {
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_APPROVED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_APPROVED" + "\r\n");
                    SetOutputTextLCD("APPROVED", ident);
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_APPROVED_OFFLINE:
                    SetOutputTextLCD("APPROVED", ident);
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_APPROVED_OFFLINE" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_DECLINED_OFFLINE:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_DECLINED_OFFLINE" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_DECLINED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_DECLINED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_GO_ONLINE:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_GO_ONLINE" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_CALL_YOUR_BANK:
                    SetOutputTextLCD("CALL YOUR BANK", ident);
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_CALL_YOUR_BANK" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_NOT_ACCEPTED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_NOT_ACCEPTED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_FALLBACK_TO_MSR:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_FALLBACK_TO_MSR" + "\r\n");
                    SetOutputTextLCD("", ident);
                    SetOutputTextLCD(getLCDDisplayMessage(new byte[] { 0x45, 0x4E }, (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_WELCOME), ident);
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_TIMEOUT:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_TIMEOUT" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_AUTHENTICATE_TRANSACTION:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_AUTHENTICATE_TRANSACTION" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_SWIPE_NON_ICC:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_SWIPE_NON_ICC" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_CTLS_TWO_CARDS:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_CTLS_TWO_CARDS" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_CTLS_TERMINATE:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_CTLS_TERMINATE" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_CTLS_TERMINATE_TRY_ANOTHER:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_CTLS_TERMINATE_TRY_ANOTHER" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_GO_ONLINE_CTLS:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_GO_ONLINE_CTLS" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_FAILED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_FAILED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_MSR_SWIPE_CAPTURED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_MSR_SWIPE_CAPTURED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_REQUEST_ONLINE_PIN:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_REQUEST_ONLINE_PIN" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_REQUEST_SIGNATURE:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_REQUEST_SIGNATURE" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_ADVISE_REQUIRED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_ADVISE_REQUIRED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_REVERSAL_REQUIRED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_REVERSAL_REQUIRED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_ADVISE_REVERSAL_REQUIRED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_ADVISE_REVERSAL_REQUIRED" + "\r\n");
                    break;
                    case EMV_RESULT_CODE.EMV_RESULT_CODE_NO_ADVISE_REVERSAL_REQUIRED:
                    text += ("EMV RESULT: " + "EMV_RESULT_CODE_NO_ADVISE_REVERSAL_REQUIRED" + "\r\n");
                    break;
                    default:
                    text += ("EMV RESULT: " + errorCode.getErrorString((RETURN_CODE)cardData.emv_resultCode) +
                             "\r\n");
                    break;
                }
            }

            if (cardData.emv_transaction_Error_Code > 0)
                text += ("Transaction Error: " + errorCode.getTransError(cardData.emv_transaction_Error_Code) + "\r\n");
            if (cardData.emv_RF_State > 0)
                text += ("RF State: " + errorCode.getRFState(cardData.emv_RF_State) + "\r\n");
            if (cardData.emv_ESC > 0)
                text += ("Extended Status Code: " + errorCode.getExtendedStatusCode(cardData.emv_ESC) + "\r\n");
            if (cardData.emv_appErrorFn > 0)
                text += ("App Error Function: " + errorCode.getEMVAppErrorFn(cardData.emv_appErrorFn) + "\r\n");
            if (cardData.emv_appErrorState > 0)
                text += ("App Error State: " + errorCode.getEMVAppErrorState(cardData.emv_appErrorState) + "\r\n");



            if (cardData.ctlsApplication > 0)
            {
                text += "Contactless Application: ";
                switch (cardData.ctlsApplication)
                {
                    case CTLS_APPLICATION.CTLS_APPLICATION_AMEX:
                    text += ("CTLS_APPLICATION_AMEX" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_DISCOVER:
                    text += ("CTLS_APPLICATION_DISCOVER" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_MASTERCARD:
                    text += ("CTLS_APPLICATION_MASTERCARD" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_VISA:
                    text += ("CTLS_APPLICATION_VISA" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_SPEEDPASS:
                    text += ("CTLS_APPLICATION_SPEEDPASS" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_GIFT_CARD:
                    text += ("CTLS_APPLICATION_GIFT_CARD" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_DINERS_CLUB:
                    text += ("CTLS_APPLICATION_DINERS_CLUB" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_EN_ROUTE:
                    text += ("CTLS_APPLICATION_EN_ROUTE" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_JCB:
                    text += ("CTLS_APPLICATION_JCB" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_VIVO_DIAGNOSTIC:
                    text += ("CTLS_APPLICATION_VIVO_DIAGNOSTIC" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_HID:
                    text += ("CTLS_APPLICATION_HID" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_MSR_SWIPE:
                    text += ("CTLS_APPLICATION_MSR_SWIPE" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_RESERVED:
                    text += ("CTLS_APPLICATION_RESERVED" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_DES_FIRE_TRACK_DATA:
                    text += ("CTLS_APPLICATION_DES_FIRE_TRACK_DATA" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_DES_FIRE_RAW_DATA:
                    text += ("CTLS_APPLICATION_DES_FIRE_RAW_DATA" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_RBS:
                    text += ("CTLS_APPLICATION_RBS" + "\r\n");
                    break;
                    case CTLS_APPLICATION.CTLS_APPLICATION_VIVO_COMM:
                    text += ("CTLS_APPLICATION_VIVO_COMM" + "\r\n");
                    break;

                }
            }



            SetOutputText(text, ident);

            text = "";
            byte[] temp = new byte[0];
            clearCallbackData(ref temp, ref cardData);

            if (cardData.emv_resultCode == EMV_RESULT_CODE.EMV_RESULT_CODE_GO_ONLINE &&
                (cbAutoComplete.Checked || (cbVP8800AutoComplete.Checked && panel_VP8800.Visible)))
            {
                tbOutputAppendText("Auto Complete Executing\r\n ", ident);
                btnEMVComplete_Click(null, null);

            }


            if (cardData.emv_resultCode == EMV_RESULT_CODE.EMV_RESULT_CODE_GO_ONLINE_CTLS && cbAutoCompleteCtls.Checked)
            {
                tbOutputAppendText("Auto Complete Executing\r\n ", ident);
                Common.pause(2000);
                approveOnline();

            }

        }

        private void checkLastExtendedErrorCode(string ident)
        {

            if (IDTechComm.lastExtendedErrorCode != 0)
            {
                tbOutputAppendText("Extended Status Code: " + "0x" +
                                    String.Format("{0:X8}", (Int32)IDTechComm.lastExtendedErrorCode) + ": " +
                                    IDTechSDK.errorCode.getExtendedStatusCode(
                                        (EXTENDED_STATUS_CODES)IDTechComm.lastExtendedErrorCode) + "\r\n", ident);

            }

            string str = IDT_Device.getlastErrorString();
            if (str != null && str.Length > 0)
            {
                tbOutputAppendText("Additional Logging Code: " + str + "\r\n", ident);
            }
        }

        private void btnTID_Click(object sender, EventArgs e)
        {

        }

        private void getVersion()
        {
            string ident = getIdentValue();
            SpectrumInfoExt info = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getVersions(ref info);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && info != null)
            {
                if (info.UID != null)
                    tbOutputAppendText("\r\nUID: " + Common.getHexStringFromBytes(info.UID) + "\r\n", ident);
                if (info.firmwareVersion != null) tbOutputAppendText(info.firmwareVersion + "\r\n", ident);
                if (info.applicationVersion != null) tbOutputAppendText(info.applicationVersion + "\r\n", ident);
                if (info.hardwareVersion != null) tbOutputAppendText(info.hardwareVersion + "\r\n", ident);
                if (info.msrHead != null) tbOutputAppendText(info.msrHead + "\r\n", ident);
                if (info.appBootloader != null) tbOutputAppendText(info.appBootloader + "\r\n", ident);
                if (info.fwBootloader != null) tbOutputAppendText(info.fwBootloader + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Version Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Version Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnFirmware_Click(object sender, EventArgs e)
        {
            MethodBase basem = System.Reflection.MethodBase.GetCurrentMethod();

            string ident = getIdentValue();

            string firmwareVersion = "";


            RETURN_CODE rt = IDT_Device.SharedController.device_getFirmwareVersion(ref firmwareVersion, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Firmware Ver: " + firmwareVersion + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Firmware Ver: " + firmwareVersion);
            }
            else
            {
                tbOutputAppendText("Get Firmware Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Firmware Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void bootloader_Click(object sender, EventArgs e)
        {



            string ident = getIdentValue();
            string firmwareVersion = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_getBootloaderVersion(ref firmwareVersion, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Bootloader Ver: " + firmwareVersion + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Bootloader Ver: " + firmwareVersion);
            }
            else
            {
                tbOutputAppendText("Get Bootloader Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Bootloader Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }



        }

        private void btnRT1050Firmware_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string firmwareVersion = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_getRT1050FirmwareVersion(ref firmwareVersion, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("RT1050 Firmware Ver: " + firmwareVersion + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("RT1050 Firmware Ver: " + firmwareVersion);
            }
            else
            {
                tbOutputAppendText("Get RT1050 Firmware Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get RT1050 Firmware Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnStartRKI_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            tbOutputAppendText("\r\nStaring RKI Process.  Please Wait...\r\n", ident);
            System.Diagnostics.Debug.WriteLine("Staring RKI Process.  Please Wait... \r\n", ident);

            RETURN_CODE rt = IDT_Device.SharedController.device_startRKI();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRKI Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("RKI Successful \r\n", ident);

            }
            else
            {
                tbOutputAppendText("RKI Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("RKI Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void SymmetricRKI(int type)
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.device_StartRKI(type, ident, true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRKI Successful Staring RKI Process.  Please Wait...", ident);
                System.Diagnostics.Debug.WriteLine("RKI Successful Staring RKI Process.  Please Wait... ");
            }
            else
            {
                tbOutputAppendText("RKI Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("RKI Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void SymmetricRKI(bool isProduction)
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.device_Symmetric_RKI(isProduction, ident, true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRKI Successful Staring RKI Process.  Please Wait...", ident);
                System.Diagnostics.Debug.WriteLine("RKI Successful Staring RKI Process.  Please Wait... ");
            }
            else
            {
                tbOutputAppendText("RKI Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("RKI Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void PKIRKI(bool isProduction)
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.device_PKI_RKI(isProduction);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRKI Successful Staring PKI RKI Process.  Please Wait...", ident);
                System.Diagnostics.Debug.WriteLine("RKI Successful Staring RKI Process.  Please Wait... ");
            }
            else
            {
                tbOutputAppendText("PKI RKI Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("PKI RKI Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnModelNumber_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string modelNumber = "";

            RETURN_CODE rt = IDT_Device.SharedController.config_getModelNumber(ref modelNumber);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Model Number: " + modelNumber + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Model Number: " + modelNumber);
            }
            else
            {
                tbOutputAppendText("Get Model Number Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Model Number Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void sockets(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            List<string> sockets = IDT_Device.ip_getSocketList();
            if (sockets != null && sockets.Count > 0)
            {
                tbOutputAppendText("Found Sockets: \r\n", ident);
                foreach (string str in sockets) tbOutputAppendText(str + "\r\n", ident);

            }
            else
            {
                tbOutputAppendText("No IP Socket Connection Fount\r\n", ident);
            }
        }

        private void btnBatteryVoltage_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string voltage = "";

            RETURN_CODE rt = IDT_Device.SharedController.device_getBatteryVoltage(ref voltage);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && voltage != null && voltage.Length > 0)
            {
                int div = 100;
                if (IDT_Device.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_NEO2) div = 1000;
                double val = Convert.ToDouble(voltage) / div;
                string volts = val.ToString() + "v";
                tbOutputAppendText("Battery Voltage: " + volts + "\r\n", ident);

                System.Diagnostics.Debug.WriteLine("Battery Voltage: " + voltage);
            }
            else
            {
                tbOutputAppendText("Get Battery Voltage Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Battery Voltage Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetSerialNumber_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string sNumber = "";

            RETURN_CODE rt = IDT_Device.SharedController.config_getSerialNumber(ref sNumber);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Serial Number: " + sNumber + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Serial Number: " + sNumber);
            }
            else
            {
                tbOutputAppendText("Get Serial Number Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Serial Number Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnPowerOnICC_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] ATR = null;
            RETURN_CODE rt = IDT_Device.SharedController.icc_powerOnICC(ref ATR, 0x20);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("ATR:" + string.Concat(ATR.ToArray().Select(b => b.ToString("X2")).ToArray()) +
                                    "\r\n", ident);
                tbOutputAppendText("ICC Powered On successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ICC powered On successfully");
            }
            else
            {
                tbOutputAppendText("ICC Powered On failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("ICC powered On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnenterSleepMode_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_enterStopMode();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enter Stop Mode  successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enter Stop Mode  successful");
            }
            else
            {
                tbOutputAppendText("Enter Stop Mode failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enter Stop Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnCancelPIN_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_cancelPINEntry(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Cancel PIN Entry  successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Cancel PIN Entry  successful");
            }
            else
            {
                tbOutputAppendText("Cancel PIN Entry failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Cancel PIN Entry failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnsetSleepMode_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            int val = 0;
            try
            {
                Convert.ToInt32(tbSleepMode.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid value entered\r\n", ident);
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_setSleepModeTime(val);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Sleep Mode  successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Sleep Mode  successful");
            }
            else
            {
                tbOutputAppendText("Set Sleep Mode failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Sleep Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnbeep_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();
            if (tbFrequency.Text.Length == 0 || tbDuration.Text.Length == 0)
            {
                tbOutputAppendText("Missing Required Parameters\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.pin_sendBeep(Convert.ToInt32(tbFrequency.Text),
                Convert.ToInt32(tbDuration.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Beep  successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Beep  successful");
            }
            else
            {
                tbOutputAppendText("Beep failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Beep failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void manualEntryCallback(string ident, IDTTransactionData transactionData)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { manualEntryCallback(ident, transactionData); });
                return;
            }

            SetOutputText(ipAddress + ": Manual Entry Callback Callback\r\n", ident);
            displayCardData(transactionData, ident);

        }

        private void manualTimeoutCallback(string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { manualTimeoutCallback(ident); });
                return;
            }

            SetOutputText(": Manual Entry Timeout Callback\r\n", ident);

        }

        private void manualCancelPromptCallback(string ident)
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { manualCancelPromptCallback(ident); });
                return;
            }

            SetOutputText(": Manual Entry Cancel Prompt Callback\r\n", ident);

        }

        private void btnGetPan_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_getPanEntry_ext(false, false, false, false, false, 15, true,
                ident, manualEntryCallback, manualTimeoutCallback, manualCancelPromptCallback);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Pan successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Pan successful");
            }
            else
            {
                tbOutputAppendText("Get Pan failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Pan failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetPan2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.pin_getManualPanEntry(false, false, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Pan successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Pan successful");
            }
            else
            {
                tbOutputAppendText("Get Pan failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Pan failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btngetFunctionKey_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_getFunctionKey(30, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Function Key  successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Function Key  successful");
            }
            else
            {
                tbOutputAppendText("Get Function Key failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Function Key failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btngetTransResults(object sender, EventArgs e)
        {
            string ident = IDT_Device.currentIdent();
            IDTTransactionData data = new IDTTransactionData();
            RETURN_CODE rt = IDT_Device.SharedController.device_getTransactionResults(ref data);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Transaction Results  successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Transaction Results  successful");


                displayCardData(data, ident);


            }
            else
            {
                tbOutputAppendText("Get Transaction Results failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Transaction Results failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnPowerOffICC_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.icc_powerOffICC();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("ICC Powered Off successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ICC powered Off successfully");
            }
            else
            {
                tbOutputAppendText("ICC Powered Off failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("ICC powered Off failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetICCReaderStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte status = 0;
            RETURN_CODE rt = IDT_Device.SharedController.icc_getICCReaderStatus(ref status);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                byte bit0 = (byte)(status & 0x01);
                byte bit1 = (byte)((status & 0x02) >> 1);
                tbOutputAppendText("ICC Reader Status : " + (bit0 == 1 ? "[ICC Powered] " : "[ICC Power Not Ready] ") +
                                    (bit1 == 1 ? "[Card Seated]" : "[Card Not Seated]") + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ICC Reader Status : " +
                                                   (bit0 == 1 ? "[ICC Powered] " : "[ICC Power Not Ready] ") +
                                                   (bit1 == 1 ? "[Card Seated]" : "[Card Not Seated]"));
            }
            else
            {
                tbOutputAppendText("Get ICC Reader Status Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get ICC Reader Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetICCStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] status = null;
            byte[] atr = null;
            RETURN_CODE rt = IDT_Device.SharedController.icc_getICCStatus(ref status, ref atr);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("ICC  Status : " + Common.getHexStringFromBytes(status) + "\r\n", ident);
                tbOutputAppendText("ATR : " + Common.getHexStringFromBytes(atr) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ICC  Status : " + Common.getHexStringFromBytes(status));
                System.Diagnostics.Debug.WriteLine("ATR : " + Common.getHexStringFromBytes(atr));
            }
            else
            {
                tbOutputAppendText("Get ICC  Status Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get ICC  Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getDataKeySlot()
        {
            string ident = getIdentValue();

            int slot = 0;
            RETURN_CODE rt = IDT_Device.SharedController.config_getDataKeySlot(ref slot);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Data Key Slot " + slot.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Data Key Slot Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get ICC  Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void seturl()
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter Symmetric RKI server URL", "URL",
                IDT_Device.RKI_URL, -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No URL specified.  \r\n", ident);
                return;
            }

            IDT_Device.RKI_URL = input;
            tbOutputAppendText("URL Set Successful. New Value: " + IDT_Device.RKI_URL + "  \r\n", ident);

        }

        private void setDataKeySlot()
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("What slot should be set for Data Key?",
                "Data Key Slot", "", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No slot specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setDataKeySlot(Convert.ToInt32(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Data Key Slot Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Data Key Slot Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void getPINKeySlot()
        {
            string ident = getIdentValue();

            int slot = 0;
            RETURN_CODE rt = IDT_Device.SharedController.config_getDataKeySlot(ref slot);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("PIN Key Slot " + slot.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get PIN Key Slot Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void setPINKeySlot()
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("What slot should be set for PIN Key?",
                "PIN Key Slot", "", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No slot specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setPINKeySlot(Convert.ToInt32(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Pin Key Slot Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Pin Key Slot Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void getStatusAllKeySlots()
        {
            string ident = getIdentValue();

            byte[] slots = null;
            RETURN_CODE rt = IDT_Device.SharedController.config_getStatusKeySlots(ref slots);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Slot Info " + Common.getHexStringFromBytes(slots) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Key Slot Status Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void getInfoSingleKeySlot()
        {
            string ident = getIdentValue();

            string slot = Microsoft.VisualBasic.Interaction.InputBox("What slot?", "Key Slot", "", -1, -1);

            if (slot.Length == 0)
            {
                tbOutputAppendText("No slot specified.  \r\n", ident);
                return;
            }

            string index = Microsoft.VisualBasic.Interaction.InputBox("What index?", "Key Index", "", -1, -1);

            if (index.Length == 0)
            {
                tbOutputAppendText("No index specified.  \r\n", ident);
                return;
            }

            byte[] keyslot = null;
            RETURN_CODE rt =
                IDT_Device.SharedController.config_getKeySlotInfo(Convert.ToInt32(index), Convert.ToInt32(slot),
                    ref keyslot);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Key Info " + Common.getHexStringFromBytes(keyslot) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Key Info Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void getCertificateInfo()
        {

        }

        private void startSlideShow(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox(
                "What folder contains the images to display (empty value to cancel)?", "Folder Images", "ss", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No folder specified.  \r\n", ident);
                return;
            }

            string input1 =
                Microsoft.VisualBasic.Interaction.InputBox("How many seconds between images (empty value to cancel)?",
                    "Image Delay", "3", -1, -1);

            if (input1.Length == 0)
            {
                tbOutputAppendText("No delay time specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);


            rt = IDT_Device.SharedController.lcd_startSlideShow(input + "/", 0, 0, 2, true, false, true,
                Convert.ToInt32(input1), 0, true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start Slideshow Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start Slideshow Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start Slideshow Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void ctlsDelay(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input1 =
                Microsoft.VisualBasic.Interaction.InputBox("Please input Delta Value (empty value to cancel).",
                    "Delta Value", "2", -1, -1);

            if (input1.Length == 0 || input1.Length > 1)
            {
                tbOutputAppendText("No delta value specified.  \r\n", ident);
                return;
            }

            byte data = (byte)Convert.ToByte(input1);
            RETURN_CODE rt = IDT_Device.SharedController.device_calibrateParameters(data);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Calibrate Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Calibrate Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Calibrate Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setMacAddress()
        {
            string ident = getIdentValue();

            string input1 = Microsoft.VisualBasic.Interaction.InputBox("Please enter valid 6-byted Mac Address.",
                "Mac Address", "000000000000", -1, -1);

            if (input1.Length != 12)
            {
                tbOutputAppendText("Invalid Address Specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setEthernetMACAddress(Common.getByteArray(input1));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Mac Address Success.  Will be valid on next reboot  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Mac Address Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Mac Address Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getMacAddress(byte parameter)
        {
            string ident = getIdentValue();
            byte[] data = null;
            RETURN_CODE rt = RETURN_CODE.RETURN_CODE_DO_SUCCESS;
            if (parameter == 0) rt = IDT_Device.SharedController.config_getEthernetMACAddress(ref data, ident);
            if (parameter == 1) rt = IDT_Device.SharedController.config_getWiFiMACAddress(ref data, ident);
            if (parameter == 2) rt = IDT_Device.SharedController.config_getBLEMACAddress(ref data, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Mac Address = " + Common.getHexStringFromBytes(data) + " \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Mac Address Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Mac Address Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setNetwork()
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.config_setNetworkConfiguration(btnStatic.Checked,
                tbNetworkAddress.Text, tbNetworkSubnet.Text, tbNetworkGateway.Text, tbNetworkDNS.Text);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Network Success.  Will be valid on next reboot  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Network Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Network Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getNetwork()
        {
            string ident = getIdentValue();

            bool isStatic = false;
            string address = null;
            string subnet = null;
            string gateway = null;
            string dns = null;
            RETURN_CODE rt =
                IDT_Device.SharedController.config_getNetworkConfiguration(ref isStatic, ref address, ref subnet,
                    ref gateway, ref dns);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (isStatic) tbOutputAppendText("Static Address \r\n", ident);
                else tbOutputAppendText("DHCP \r\n", ident);

                tbOutputAppendText("IP Address = " + address + "\r\n", ident);
                tbOutputAppendText("Subnet = " + subnet + "\r\n", ident);
                tbOutputAppendText("Gateway = " + gateway + "\r\n", ident);
                tbOutputAppendText("DNS = " + dns + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Network Address Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Network Address Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void displayImage(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input1 = Microsoft.VisualBasic.Interaction.InputBox(
                "What image would you like to display (empty value to cancel)?", "Image To Display", "", -1, -1);

            if (input1.Length == 0)
            {
                tbOutputAppendText("No image specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);


            rt = IDT_Device.SharedController.lcd_setDisplayImage(input1, 0, 0, 2, false, true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Display Image Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Display Image Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Display Image Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        bool waitForBackground = false;
        int imageCounter = 1;
        bool waitForImage = false;

        private void finishBackground()
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);
            string file = "DefaultBackground/default.png";
            rt = IDT_Device.SharedController.lcd_setBackgroundImage(file, true);
            IDT_Device.SharedController.lcd_customDisplayMode(false);
            IDT_Device.SharedController.lcd_resetInitialState();

            if (inInit)
            {
                tbOutputAppendText("Execute Calibration: PLEASE SEE VP8800 SCREEN  \r\n", ident);
                byte data = 0x02;
                IDT_Device.SharedController.device_calibrateParameters(data);
                inInit = false;
                return;
            }

            inInit = false;

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Background Image Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Background Image Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Background Image Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        string ssDirectory = null;

        private void setDefaultSlideShow(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = 0;
            if (ssDirectory == null)
            {
                rt = IDT_VP8800.SharedController.device_listDirectory(null, true, false, ref ssDirectory);
                if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                    rt = IDT_VP8800.SharedController.device_listDirectory(null, true, false, ref ssDirectory);
            }

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("List directory failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List directory Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
                return;
            }

            if (imageCounter < 9)
            {
                string file = "DefaultSlideShow/img" + imageCounter.ToString() + ".png";

                if (!ssDirectory.Contains(file))
                {
                    IDT_VP8800.SharedController.device_createDirectory("DefaultSlideShow");

                    System.Drawing.Bitmap img = Properties.Resources.defaultBackground;
                    if (imageCounter == 1) img = Properties.Resources._001;
                    else if (imageCounter == 2) img = Properties.Resources._002;
                    else if (imageCounter == 3) img = Properties.Resources._003;
                    else if (imageCounter == 4) img = Properties.Resources._004;
                    else if (imageCounter == 5) img = Properties.Resources._005;
                    else if (imageCounter == 6) img = Properties.Resources._006;
                    else if (imageCounter == 7) img = Properties.Resources._007;
                    else if (imageCounter == 8) img = Properties.Resources._008;




                    ImageConverter converter = new ImageConverter();
                    byte[] thefile = (byte[])converter.ConvertTo(img, typeof(byte[]));
                    rt = IDT_VP8800.SharedController.device_transferFile(file, thefile);
                    if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                    {
                        tbOutputAppendText("File Transfer Failed Error Code: " + "0x" +
                                            String.Format("{0:X}", (ushort)rt) + ": " +
                                            IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                        checkLastExtendedErrorCode(ident);
                        System.Diagnostics.Debug.WriteLine("File Transfer Failed Error Code: " + "0x" +
                                                           String.Format("{0:X}", (ushort)rt));
                        return;
                    }

                    imageCounter++;
                    waitForImage = true;
                    return;
                }
                else
                {
                    imageCounter++;
                    setDefaultSlideShow(null, null);
                    return;
                }
            }

            if (imageCounter == 9)
            {
                IDT_VP8800.SharedController.device_listDirectory(null, true, false, ref ssDirectory);
                imageCounter++;
            }

            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (inInit)
            {
                Common.pause(1000);
                IDT_Device.SharedController.lcd_customDisplayMode(false);
                tbOutputAppendText("Sending Background graphics: \r\n", ident);
                setDefaultBackground(null, null);
                return;
            }


            rt = IDT_Device.SharedController.lcd_startSlideShow("DefaultSlideShow/", 0, 0, 2, true, false, true, 3, 0,
                true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start Slideshow Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start Slideshow Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start Slideshow Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setDefaultBackground(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string directory = "";
            RETURN_CODE rt = IDT_VP8800.SharedController.device_listDirectory(null, true, false, ref directory);
            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("List directory failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List directory Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
                return;
            }

            string file = "DefaultBackground/default.png";

            if (!directory.Contains(file))
            {
                IDT_VP8800.SharedController.device_createDirectory("DefaultBackground");
                System.Drawing.Bitmap img = Properties.Resources.defaultBackground;
                ImageConverter converter = new ImageConverter();
                byte[] thefile = (byte[])converter.ConvertTo(img, typeof(byte[]));
                rt = IDT_VP8800.SharedController.device_transferFile(file, thefile);
                if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {
                    tbOutputAppendText("File Transfer Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("File Transfer Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                    return;
                }

                waitForBackground = true;
                return;
            }



            finishBackground();

        }

        private void setBackground(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input1 = Microsoft.VisualBasic.Interaction.InputBox(
                "What image would you like to display as background (empty value to cancel)?", "Background To Display",
                "", -1, -1);

            if (input1.Length == 0)
            {
                tbOutputAppendText("No image specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);


            rt = IDT_Device.SharedController.lcd_setBackgroundImage(input1, true);
            IDT_Device.SharedController.lcd_customDisplayMode(false);
            IDT_Device.SharedController.lcd_resetInitialState();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Background Image Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Background Image Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Background Image Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void removeBackground(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);


            rt = IDT_Device.SharedController.lcd_setBackgroundImage(null, false);
            IDT_Device.SharedController.lcd_customDisplayMode(false);
            IDT_Device.SharedController.lcd_resetInitialState();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Background Image Remove Success  \r\n", ident);
                IDT_Device.SharedController.lcd_clearDisplay(1);
            }
            else
            {
                tbOutputAppendText("Background Image Remove Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Background Image Remove Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setColor(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input1 = Microsoft.VisualBasic.Interaction.InputBox(
                "Foreground RGB. 000000 = black, FF0000 = red, 00FF00 = green, 0000FF = blue, FFFFFF = white",
                "Foreground Color", "FFFFFF", -1, -1);

            if (input1 == null || input1.Length != 6) return;

            string input2 = Microsoft.VisualBasic.Interaction.InputBox(
                "Background RGB. 000000 = black, FF0000 = red, 00FF00 = green, 0000FF = blue, FFFFFF = white",
                "Background Color", "000000", -1, -1);

            if (input2 == null || input2.Length != 6) return;

            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_setForeBackColor(Common.getByteArray(input1),
                    Common.getByteArray(input2));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Color Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Color Success Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Color Success Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setKeyTypeforEncryptKey()
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("Set Key Type for ICC DUKPT Key",
                "Please enter ICC DUKPT key type", "0", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No key type specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.icc_setKeyTypeForICCDUKPT(Convert.ToByte(input));

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Key Type for ICC DUKPT Key Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Key Type for ICC DUKPT Key Successful");
            }
            else
            {
                tbOutputAppendText("Set Key Type for ICC DUKPT Key failed" + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Key Type for ICC DUKPT Key failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setPanLength()
        {
            string ident = getIdentValue();

            string input1 = Microsoft.VisualBasic.Interaction.InputBox("Set Pre PAN Data Len",
                "Please enter Pre PAN length", "0", -1, -1);
            if (input1.Length == 0)
            {
                tbOutputAppendText("No Pre PAN length specified.  \r\n", ident);
                return;
            }

            string input2 = Microsoft.VisualBasic.Interaction.InputBox("Set Post PAN Data Len",
                "Please enter Post PAN length", "0", -1, -1);
            if (input2.Length == 0)
            {
                tbOutputAppendText("No Post PAN length specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt =
                IDT_Device.SharedController.icc_setClearPANID(Convert.ToByte(input1), Convert.ToByte(input2));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Pre/Pro Pan Digits Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Pre/Pro Pan Digits Successful");
            }
            else
            {
                tbOutputAppendText("Set Pre/Pro Pan Digits Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Pre/Pro Pan Digits Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getPanLength()
        {
            string ident = getIdentValue();

            byte prePan = 0x00;
            byte postPan = 0x00;
            RETURN_CODE rt = IDT_Device.SharedController.icc_getClearPANID(ref prePan, ref postPan);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Get Pre PAN Digits Response: " + (int)(prePan) + "\r\n", ident);
                tbOutputAppendText("Get Post PAN Digits Response: " + (int)(postPan) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Pre/Post PAN Digits Response: " + (int)(prePan) +
                                                   (int)(postPan));
            }
            else
            {
                tbOutputAppendText("Get Pre/Post PAN Digits Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Pre/Post PAN Digits Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void LinkMessageID(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte MessageID = 0;

            string input = Microsoft.VisualBasic.Interaction.InputBox("Message ID",
                "Please Enter Message ID", "", -1, -1);
            if (input == null) return;

            try
            {
                MessageID = byte.Parse(input);
            }
            catch
            {
                tbOutputAppendText("Invalid input for Message ID.  Valid values are 0 - 255", ident);
                return;
            }


            string input2 = Microsoft.VisualBasic.Interaction.InputBox("Screen Name",
                 "Please Enter Screen Name", "1", -1, -1);
            RETURN_CODE rt = IDT_Device.SharedController.lcd_linkUIWithTransactionMessageId(MessageID, input2, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Message ID Success\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Message ID Failed \r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Message ID Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }




        }

        private int fileCounter = 0;
        private string[] fileDownloads = null;
        private string directory = null;
        private void TransferFile(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            fileCounter = 0;
            fileDownloads = null;
            directory = null;






            loadSettings();
            TransferFileDialog.InitialDirectory = _lastTransfer;
            if (TransferFileDialog.ShowDialog() == DialogResult.OK)
            {
                _lastTransfer = TransferFileDialog.InitialDirectory;
                saveSettings();

                fileDownloads = TransferFileDialog.FileNames;
                string input = Microsoft.VisualBasic.Interaction.InputBox("Directory (leave blank if root)",
                    "Please Enter Directory Name", "", -1, -1);
                if (input == null) input = "";
                if (input.Length > 0 && !input.EndsWith("/")) input = input + "/";
                directory = input;
                if (fileDownloads == null || fileDownloads.Length == 0)
                {
                    tbOutputAppendText("No Files Selected...\r\n", ident);
                    return;
                }
                byte[] file = File.ReadAllBytes(fileDownloads[0]);
                fileCounter++;
                string input2 = Microsoft.VisualBasic.Interaction.InputBox("Memory Location",
                     "Please Enter 1 for Flash Memory, or 2 for SDCard", "1", -1, -1);
                RETURN_CODE rt = IDT_Device.SharedController.device_transferFile(input + Path.GetFileName(fileDownloads[0]), file, input2.Equals("2"), ident);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Sending " + Path.GetFileName(fileDownloads[0]) + "\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("File Transfer Failed " + Path.GetFileName(fileDownloads[0]) + " Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("File Transfer Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }

                currentFWFile = Path.GetFileName(fileDownloads[0]);
            }

        }

        private void disBlueLED()
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_disBlueLED();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Disable Blue LED Sequence Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Disable Blue LED Sequence Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Disable Blue LED Sequence Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void enaBlueLED()
        {

            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please input Blue LED sequence", "000000000150", "", -1,
                    -1);

            if (input.Length < 6 || input.Length > 42)
            {
                tbOutputAppendText("Input Is Not valid(Input length should be between 4 to 25 bytes length).  \r\n", ident);
                return;
            }

            byte[] dataCmd = Common.getByteArray(input);

            //byte[] dataCmd = new byte[(input.Length - 2) / 4 + input.Length / 2];

            /*
            int pos = 0;
            int posInput = 0;
            dataCmd[pos++] = Convert.ToByte(input.Substring(posInput, 2));
            posInput += 2;
            while (pos < dataCmd.Length && posInput < input.Length)
            {
                dataCmd[pos++] = Convert.ToByte(input.Substring(posInput, 2));
                posInput += 2;

                UInt16 time = Convert.ToUInt16(input.Substring(posInput, 2));
                posInput += 2;
                dataCmd[pos++] = (byte)(time & 0xff);
                dataCmd[pos++] = (byte)((time >> 8) & 0xff);
            }
            */
            RETURN_CODE rt = IDT_Device.SharedController.device_enaBlueLED(dataCmd);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enable Blue LED Sequence Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Enable Blue LED Sequence Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enable Blue LED Sequence Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void onYellowLED()
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_onYellowLED();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Turn On Yellow LED Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Turn On Yellow LED Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Turn On Yellow LED Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void offYellowLED()
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_offYellowLED();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Turn Off Yellow LED Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Turn Off Yellow LED Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Turn Off Yellow LED Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void buzzerOnOff()
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_buzzerOnOff();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Buzzer On/Off Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Buzzer On/Off Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Buzzer On/Off Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getLightSensorVal()
        {
            string ident = getIdentValue();

            UInt16 lightVal = 0;
            RETURN_CODE rt = IDT_Device.SharedController.device_getLightSensorVal(ref lightVal);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Get Light Sensor Value: " + lightVal.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Light Sensor Value Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Buzzer On/Off Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setSelfCheckTime()
        {

            string ident = getIdentValue();
            string hours =
                Microsoft.VisualBasic.Interaction.InputBox("Please set a specific hours for 24hrs self-check", "hours",
                    "23", -1, -1);
            if (hours.Length == 0) return;
            string minutes =
                Microsoft.VisualBasic.Interaction.InputBox("Please set a specific minutes for 24hrs self-check",
                    "minutes", "59", -1, -1);
            if (minutes.Length == 0) return;
            byte hr = 0;
            byte min = 0;
            try
            {
                hr = Convert.ToByte(hours);
            }
            catch
            {
                return;
            }

            try
            {
                min = Convert.ToByte(minutes);
            }
            catch
            {
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_setSelfCheckTime(hr, min, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Self-Check Time Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Self-Check Time Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Self-Check Time Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getSelfCheckTime()
        {

            string ident = getIdentValue();
            byte hour = 0;
            byte minute = 0;
            RETURN_CODE rt = IDT_Device.SharedController.device_getSelfCheckTime(ref hour, ref minute, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Hour = " + hour.ToString() + "\r\n", ident);
                tbOutputAppendText("Minute = " + minute.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Self Check Time Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Self Check Time Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getDeviceTime()
        {
            string ident = getIdentValue();
            DateTime time = DateTime.Now;
            RETURN_CODE rt = IDT_Device.SharedController.device_getDeviceTime(ref time, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Time = " + time.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Time Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Time Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnUpdateFirmware_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            openFW.Filter = "Signed Binary Files|*.bin.sig";
            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();
                string filename = openFW.SafeFileName.Replace(".bin.sig", "");
                if (!filename.StartsWith("SP K21 APP V") && !filename.StartsWith("SP MAX APP V") &&
                    filename.Length != 20)
                {
                    tbOutputAppendText("Invalid filename\r\n", ident);
                    return;
                }

                byte[] file = File.ReadAllBytes(openFW.FileName);
                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmware(file, filename, 0, null);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Firmware Update Started...\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Firmware Update Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Firmware Update Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }
            }

        }

        private void btnUpdateFirmwareIDG_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            openFW.Filter = "NEO FW Text Files|*.txt";
            OpenFileDialog diag = new OpenFileDialog();
            if (IDT_Device._protocolType == DEVICE_PROTOCOL_Types.DEVICE_PROTOCOL_NGA ||
                IDT_Device._deviceType == IDT_DEVICE_Types.IDT_DEVICE_NEO2 || IDT_Device._deviceType == IDT_DEVICE_Types.IDT_DEVICE_SREDKEY2)
            {
                openFW.Filter = "FW Files|*.fm";
            }
            if (
                IDT_Device._deviceType == IDT_DEVICE_Types.IDT_DEVICE_VP8800)
            {
                openFW.Filter = "FW Files|*.bin";
            }

            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();

                byte[] file = File.ReadAllBytes(openFW.FileName);
                RETURN_CODE rt = IDT_Device.SharedController.device_updateDeviceFirmware(file);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Firmware Update Started...\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Firmware Update Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Firmware Update Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }
            }

        }

        private void btnUpdateFirmwareIDG1050_Click2(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            if (kernelFolderBrowser.ShowDialog() == DialogResult.OK)
            {


                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareKernels(kernelFolderBrowser.SelectedPath, fwUpdateCallback, ident);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Kernel Update Process Complete\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Kernel Update Process Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Kernel Update Process Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }
            }

        }

        private void btnUpdateFirmwareIDG1050_Click(object sender, EventArgs e)
        {

            string input = Microsoft.VisualBasic.Interaction.InputBox("Firmware type?\r\n0 = External EMV CTL2 Kernel\r\n1 = PPSE Kernel\r\n2 = VCPS Kernel(Visa)\r\n3 = MChip Kernel\r\n4 = DPass Kernel\r\n5 = Amex Kernel\r\n6 = Interac Kernel\r\n7 = CUP Kernel\r\n8 = JCB Kernel\r\n9 = APVAS\r\n10 = SmartTap\r\n11 = SCRP\r\n12 = ADF SDK\r\n13 = ADF App\r\n16 = 1050 FW\r\n253 = K81 Bootloader A\r\n254 = K81 Bootloader B\r\n255 = K81 FW\r\n\r\n",
                    "Firmware Type", "255", -1, -1);

            string ident = getIdentValue();
            FIRMWARE_TYPE type = FIRMWARE_TYPE.FIRMWARE_TYPE_K81;
            try
            {
                type = (FIRMWARE_TYPE)Convert.ToInt32(input);
            }
            catch
            {
                tbOutputAppendText("Invalid type selected\r\n", ident);
                return;
            }
            if ((int)type != 255 && (int)type != 254 && (int)type != 253 && (int)type != 16)
            {
                if ((int)type < 0 || (int)type > 13)
                {
                    tbOutputAppendText("Invalid type selected\r\n", ident);
                    return;
                }
            }
            openFW.Filter = "NEO FW Text Files|*.txt";
            OpenFileDialog diag = new OpenFileDialog();
            if (IDT_Device._protocolType == DEVICE_PROTOCOL_Types.DEVICE_PROTOCOL_NGA ||
                IDT_Device._deviceType == IDT_DEVICE_Types.IDT_DEVICE_NEO2)
            {
                openFW.Filter = "FW Files|*.fm|Binary Files|*.bin";
            }

            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();


                IDT_NEO2.hasUI(false);
                IDT_Device.hasUI(false);

                byte[] file = File.ReadAllBytes(openFW.FileName);
                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareType_ext(openFW.FileName, type, fwUpdateCallback, ident);

                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Firmware Update Started...\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Firmware Update Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Firmware Update Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }
            }

        }

        private void fwUpdateCallback(byte[] data, RETURN_CODE transactionResultCode, string ident)
        {
            if (InvokeRequired)
            {
                try
                {
                    Invoke((MethodInvoker)delegate
                    {
                        fwUpdateCallback(data, transactionResultCode, ident);
                    });
                    return;
                }
                catch
                {

                }

            }
            switch (transactionResultCode)
            {

                case RETURN_CODE.RETURN_CODE_FW_STARTING_UPDATE:
                SetOutputText(" Starting Firmware Update\n", ident);
                break;
                case RETURN_CODE.RETURN_CODE_DO_SUCCESS:
                if (fwLoops > 0) resendFW();
                else SetOutputText(" Firmware Update Successful\n", ident);
                break;
                case RETURN_CODE.RETURN_CODE_APPLYING_FIRMWARE_UPDATE:
                SetOutputText(" Applying Firmware Update....\n", ident);
                break;
                case RETURN_CODE.RETURN_CODE_ENTERING_BOOTLOADER_MODE:
                SetOutputText(" Entering Bootloader Mode....\n", ident);
                break;
                case RETURN_CODE.RETURN_CODE_BLOCK_TRANSFER_SUCCESS:
                int start = data[0];
                int end = data[1];
                if (data.Length > 3)
                {
                    start = data[0] * 0x100 + data[1];
                    end = data[2] * 0x100 + data[3];
                }
                string label = "";
                if (data.Length > 4) label = Common.FirmwareType((FIRMWARE_TYPE)data[4]);
                tbOutputAppendText(null, ident);
                tbOutputAppendText(label + "\r\n Sent block " + start.ToString() + " of " + end.ToString() + "\n", ident);
                break;
                default:
                SetOutputText(" Firmware Update Error Code: " + "0x" +
                              String.Format("{0:X}", (ushort)transactionResultCode) + ": " +
                              IDTechSDK.errorCode.getErrorString(transactionResultCode) + "\r\n", ident);

                if (data != null && data.Length > 0)
                {

                    SetOutputText(Encoding.ASCII.GetString(data), ident);
                }



                break;
            }
        }

        private int fwLoops = 0;
        private void MultiFW()
        {

            string ident = getIdentValue();
            openFW.Filter = "FW Files|*.fm";

            openFW.Title = "Select 1050 v.75 FW File";
            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();
                fwfileK81 = openFW.FileName;
            }

            openFW.Title = "Select 1050 v.88 FW File";
            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();
                fwfile88 = openFW.FileName;
            }


            openFW.Title = "Select 1050 v.98 FW File";

            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();



                string input2 = Microsoft.VisualBasic.Interaction.InputBox("How many loops to update FW (1 loop per 3 updates)?",
                    "Firmware Update Loops", "100", -1, -1);
                try
                {
                    fwLoops = Convert.ToInt32(input2) * 3;
                }
                catch
                {

                }


                fwfile98 = openFW.FileName;
                fwip = ident;

                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareIP(fwfileK81,
                    1, fwUpdateCallback, ident);


                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Firmware Update Started...\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Firmware Update Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Firmware Update Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }
            }

        }

        private RETURN_CODE resendFW()
        {
            string ident = getIdentValue();

            fwLoops--;
            if (fwLoops == 0)
            {
                SetOutputText(" FW test completed successfully", ident);
                return RETURN_CODE.RETURN_CODE_DO_SUCCESS;
            }
            int val = fwLoops % 3;
            if (val == 0)
            {
                int loop = fwLoops / 3;
                SetOutputText(" Starting next FW update loop. " + loop.ToString() + " loops remaining\n", ident); RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareIP(fwfileK81,
                    1, fwUpdateCallback, fwip);
                return rt;
            }
            if (val == 1)
            {
                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareIP(fwfile98,
                    1, fwUpdateCallback, fwip);
                return rt;
            }
            if (val == 2)
            {
                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareIP(fwfile88,
                    1, fwUpdateCallback, fwip);
                return rt;
            }
            SetOutputTextLog(null, ident);
            return RETURN_CODE.RETURN_CODE_FAILED;
        }

        private string fwfileK81 = "";
        private string fwfile88 = "";
        private string fwfile98 = "";
        private string fwip = "";

        private void btnUpdateFirmwareIP()
        {

            fwLoops = 0;
            string ident = getIdentValue();
            openFW.Filter = "FW Files|*.fm";

            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();
                string input = Microsoft.VisualBasic.Interaction.InputBox("Firmware type?\r\n0 = K81\r\n1 = 1050RT",
                    "Firmware Type", "0", -1, -1);
                if (!input.Equals("0") && !input.Equals("1"))
                {
                    tbOutputAppendText("Invalid type selected\r\n", ident);
                    return;
                }

                if (input.Equals("1") &&
                    IDT_Device.getConnectionType() == DEVICE_INTERFACE_Types.DEVICE_INTERFACE_SERIAL)
                {
                    ident = Microsoft.VisualBasic.Interaction.InputBox("Please enter device IP address", "IP Address",
                        _lastIP, -1, -1);
                }


                RETURN_CODE rt = IDT_Device.SharedController.device_updateFirmwareIP(openFW.FileName,
                   Convert.ToInt32(input), fwUpdateCallback, ident);


                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {

                    tbOutputAppendText("Firmware Update Started...\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Firmware Update Failed Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Firmware Update Failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }
            }

        }

        private void btnAutoCaptureMSROn(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_captureMode(false, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText(
                    "Auto Capture MSR successful; Ready to swipe.  Results will appear anywhere there is a text entry prompt\r\n", ident);
                tbOutput.ReadOnly = false;
                tbOutput.Focus();
            }
            else
            {
                tbOutputAppendText("Unable to activate Auto Capture MSR: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);

            }
        }

        private void captureSig(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            //Common.pause(200);
            string input = Microsoft.VisualBasic.Interaction.InputBox("Image Format: 1 = bitemap, 2 = png, 3 = raw",
                "Image Type", "1", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No image format specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_captureSignature(60, Convert.ToByte(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Capture Signature started successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Capture Signature Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void resetInitialState(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.lcd_resetInitialState();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Reset Initial State successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Reset Initial State Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void btnAutoCaptureMSROff(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_captureMode(true, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Auto Capture MSR disabled\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Unable to deactivate Auto Capture MSR: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        // static bool continueMSR = false;
        private void btnTurnOnMSR_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            IDT_Device.removalTimeout = 10;
            IDT_Device.insertTimeout = 10;
            IDT_Device.transactionTimeout = 60;

            RETURN_CODE rt = IDT_Device.SharedController.msr_startMSRSwipe_ext(90, ident, msrSwipeCallback, msrTimeoutCallback, msrFailureCallback);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                // continueMSR = true;
                //EY: MSR BLUE LED BLINKmsr
                tbOutputAppendText("MSR Turned On successfully; Ready to swipe\r\n", ident);
                tbOutput.ReadOnly = false;
                tbOutput.Focus();
                System.Diagnostics.Debug.WriteLine("MSR Turned On successfully; Ready to swipe");

            }
            else
            {
                tbOutputAppendText("Start Swipe Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start Swipe Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }


        private void tbOutputAppendText(string text, string ident)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (tbOutput.InvokeRequired)
            {
                try
                {
                    SetTextCallback d = new SetTextCallback(tbOutputAppendText);
                    Invoke(d, new object[] { text, ident });
                }
                catch
                {

                }

            }
            else
            {
                if (ident == null || ident.Length == 0) ident = IDT_Device._path;
                TextBox tb = (TextBox)getTabObject(ident, 1);
                if (tb == null) tb = sdkOutput;
                if (text == null || text.Length == 0)
                {
                    tb.Text = "";
                    return;
                }
                try
                {
                    tb.AppendText(text);
                }
                catch (Exception)
                {
                }

            }

            text = "";
        }


        private void SetOutputText(string text, string ident = "app")
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (tbOutput.InvokeRequired)
            {
                try
                {
                    SetTextCallback d = new SetTextCallback(SetOutputText);
                    Invoke(d, new object[] { text, ident });
                }
                catch
                {

                }

            }
            else
            {
                if (ident == null || ident.Length == 0) ident = IDT_Device._path;
                TextBox tb = null;
                if (ident.Equals("app")) tb = sdkOutput;
                else tb = (TextBox)getTabObject(ident, 1);
                if (tb == null) tb = sdkOutput;
                if (text == null || text.Length == 0)
                {
                    tb.Text = "";
                    return;
                }
                try
                {
                    text = text.TrimEnd('\r', '\n');
                    tb.AppendText(text + "\r\n");
                }
                catch (Exception)
                {
                }

            }

            text = "";
        }

        textbox vivotext = new textbox();
        private void SetOutputTextVivo(string text, string ident)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (tbOutput.InvokeRequired)
            {
                try
                {
                    SetTextCallback d = new SetTextCallback(SetOutputText);
                    Invoke(d, new object[] { text, ident });
                }
                catch
                {

                }

            }
            else
            {

                try
                {
                    vivotext.Show();
                    text = text.TrimEnd('\r', '\n');
                    vivotext.appendText(text + "\r\n");
                }
                catch (Exception)
                {
                }

            }

            text = "";
        }

        private void DisplayMSRPrompMethod(string text, string ident)
        {

            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (tbOutput.InvokeRequired)
            {
                DisplayMSRPrompt d = new DisplayMSRPrompt(DisplayMSRPrompMethod);
                Invoke(d, new object[] { text, ident });
            }
            else
            {
                IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_MINISMARTII,
                    DEVICE_INTERFACE_Types.DEVICE_INTERFACE_USB);
                if (comm == null)
                    comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_MINISMARTII,
                        DEVICE_INTERFACE_Types.DEVICE_INTERFACE_SERIAL);
                if (comm != null && comm.useSecureMag)
                {
                    tbOutputAppendText("Please use SecureHead to Capture MSR Data", ident);
                }
                else
                {
                    try
                    {

                        string input = Microsoft.VisualBasic.Interaction.InputBox(
                            "Please provide MSR data, or clear to cancel transaction", "Please provide MSR data", text,
                            -1, -1);
                        if (input.Length == 0) btnCancelTransaction_Click(null, null);
                        else
                        {
                            IDT_Device.SharedController.emv_callbackResponseMSR(Common.getByteArray(input));
                        }

                    }
                    catch (Exception)
                    {
                    }
                }
            }

            text = "";
        }

        private void SetTitleText(string text, string ident)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (this.InvokeRequired)
            {
                SetTextCallback d = new SetTextCallback(SetTitleText);
                Invoke(d, new object[] { text, ident });
            }
            else
            {
                this.Text = text;
            }
        }


        private void SetOutputTextLog(string text, string ident)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (logOutput.InvokeRequired)
            {
                SetTextCallback d = new SetTextCallback(SetOutputTextLog);
                Invoke(d, new object[] { text, ident });
            }
            else
            {
                if (ident == null || ident.Length == 0) ident = IDT_Device._path;
                TextBox tb = (TextBox)getTabObject(ident, 2);
                if (tb == null) tb = sdkOutput;
                if (text == null || text.Length == 0)
                {
                    tb.Text = "";
                    return;
                }
                System.Diagnostics.Debug.WriteLine(text);
                try
                {
                    text = text.TrimEnd('\r', '\n');
                    tb.AppendText(text + "\r\n");
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("Exception: " + ex);
                }


            }
        }




        private void btnpinKeyEntry_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();



            RETURN_CODE rt = IDT_Device.SharedController.pin_promptForKeyInput("Enter Ticket",
                Common.getByteArray("80774ED82C8037776108A5E9E6B8F00070E7ADE1A3E6143B59B94EBCB15712DB99ECA2A2193903F8FAEC83A516B2436F0C83EA143BB133620E6F94C7D47272C37657A46D9B49783F5D3DDA46CAECAE168A28D9540D526F8A1D8EC50F1D051FFFC6A22622C99E46A4A6178DA030D25F613119F1C8800A08933696E411742528415B5889E9ABD24BDF2E807A0518C78E87B085218A3A18E291862CDDDFA4B066EB1D4C0747D4800FD35D0DA47C250F7DB44146699B853354081619C8B5FB3B66C293186588DA69CFD654202734408106FAD639EAF2932D8D8611EBA2262728B4047AF1617370D29CDE9DD81B2B7934699F765E50017029A3739813686B194D12E2"), false, 1,
                16);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Prompt for Key Entry Command Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Prompt for Key Entry Command Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void btnpinAmountEntry_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_promptForAmountInput("Enter Amount",
                Common.getByteArray("77E62ECC4A1287E6928DAC341120B2EEE6E23CBDA5998F12EB21513181959D7FE1A630B6EF8EDFAEC24D86CD7D54B3C0DBA1BDC51796ACD07C2E9C233B7C9868F46AE10E274C6E785CE0A74DB813350133AE77943BA9FF978D0898FD812EC8FE665B4460729CFB2280C87171299223BBAA27F0AB231B5D5D9E8817068A5609AA85EAF370703735EB0602D5308ECE6E7D8E0DB3E6819A4428B98ABD74BB0843023D41B10FDD3B8B292B360F2A6C17982ADFD0C018287E2ECFE425EACCB0122B13C409A909600CB5F2D5BE584FBA7D00959B43B18C49B82DD920EA27B862F49A2108ACBBD606F5CC65BD1514EA666EDA3A8DC1050E3355F871295B9220EFF3A52D"), false, 1,
                15);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Prompt for Amount Entry Command Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Prompt for Key Amount Command Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }


        private void btnpinKeyEntry2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter timeout value in seconds (5 - 180)",
                "Timeout", "30", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No timeout specified.  \r\n", ident);
                return;
            }

            short timeout = 30;
            try
            {
                timeout = Convert.ToInt16(input);
            }
            catch
            {
                tbOutputAppendText("Invalid value specified.  \r\n", ident);
                return;
            }
            // RETURN_CODE rt = IDT_Device.SharedController.pin_promptForNumericKey(timeout,false, 01, 16, "PHONE NUMBER", Common.getByteArray("98EEF2606F86BA265D4E25E4FC706C7FF323C4C9613B611FE8AB0636A84AEA82FD72106ECE4958CEDFF8F933482981BFDE9E28A3F4EFEE70F1D707D2178ACDD7C82FCB25D061203134718AFF31DAD883C1A7C613C12D3BBD984C263CE67B6D5BD7522CB248EDA4C9EA09E7C4617A6FFD6F738BC3DD336BFC98FCED21516E244D6B8D9FF65E9687E9C0EA28BF7C13D192DFF08BFB3CEE5FCECC501B989E29EEA9069CA58F58E2C3B2E1E00DA023F436C51E26271568B1C64C13A8AD22A2337F7A022590EBB623146EFB8452255BC599D9A5F082EC4C4D3442BD959DAF78A3535D19B20BBB07D9AB4BC665890FCDCE7D3E0E2E88CA935307CC9FD14795B943DB4C"), ident);
            //  RETURN_CODE rt = IDT_Device.SharedController.pin_promptForNumericKeyWithSwipe(60, 0x00, 0x01, 0x10, "PLEASE ENTER", "PHONE NUMBER", Common.getByteArray("68CEEB8C2E523B7E4BFA0B797244C7A1DF48FA22C7BC5EA952B6F546C68A131A86FFE59533F3235BEF177D0E4BE08BD4A1A16F0B528831FF6C42C027726A67F6AB62170A4B21E0FB7233B62074BC076B3E61964FB6DC86C2E98C78B67898B3F59A2C13B5157AE6C4E556A13F816D398A73E0C5C4059E9EA44EEAADBBB7740F88968A7A1E482CC719C84C78ACAF593A75934BF3200DF4A8D0BA0C8AA9B1DF8335BAFE24A0FAE655FD392D983009C47AFAACB0925415E829A3286EA0C1B41C539F158D09E5CD1E68A0C26A8980D3BA43FF8B605C5A8D828CDB3CC3150E4B7A66D696CAA698BAEBE78C06AC689C943322BE9A1034EF28460AAFFB6643873CC85157"), "", pinInputCallback,pinSwipeCallback,pinFailureCallback,pinTimeoutCallback,pinCancelPromptCallback);

            //RETURN_CODE rt = IDT_Device.SharedController.pin_promptForInput_ext(0x01, timeout, ident, pinInputCallback, pinSwipeCallback, pinFailureCallback, pinTimeoutCallback, pinCancelPromptCallback);
            RETURN_CODE rt = IDT_Device.SharedController.pin_promptForNumericKeyWithSwipe(timeout, 0x00, 0x05, 0x05, "Enter Zip Code:", "", Common.getByteArray("9B22858AC86A11D6523DCD3B926B111EF837250C4356B488D7517299ECCE3EE86B611DBB126CC399FE70EC9AFE159779AB2851284D16EBA10106A3EF86DBE576249EABC531FF79EF3441610FA720ED2C4422BAABCB40CFCAD0A45E62F802959A7E681DCA394988B129F564E23384FDE9A2E6C271FDCE197DE6968886195794DA9F0BF5FB55C41BB193A8C9A8B31727361377D883DFF0500D68EE50CABBB8AED07EBD551A6AD68564EF1D6EFC25AF93653658E3FBA0A205C537C94498E93CE2BD4FC21740F39B536FC3F1FFB55EED449661BBA1AD6F481840F3A1AA493B2F3D09ECEA18FF78E31136DBAE603422C01343A2D3EE78D3D25618B12297DCAE40BF9A"));

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Prompt for Key Entry Command Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Prompt for Key Entry Command Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void btnpinAmountEntry2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_promptForAmount(30, 01, 0x0c, "DEMO: Enter Amt.",
                Common.getByteArray(
                    "7D23BC58D7D9555D33EBF4CD8E7A19F867DE213A82BC44DC94AC77B58B10E97A240F37480035BF7B08986C46F023E584F674DC60A2FE5FF6B0EE630CB4891C81D10A33EDC5DC5CF3C7A409726FA96AEDDFE63C4BE87464A28BBF48A90FC5497CE7B0629D2717CCBB44C9C8A46B736E483D015679B060D7B1DEA38E5966B50AB07100E736A12CB392ACF32427B9607CC3D46EBC35464A6D27B7D7864A4D80FB93350C5B3B793E912AACA9F5DBBEC8A8D571EA10654F94D6D19D0F4A54DD1DA6AE71195785D495C67AABD3BC05A45C83DA547FD74C46BBC4011B1C8AF8B44C4BB185108465A08A31AB8AC69D47B09CA147DD1427651497F6B19CFA9BDB41E99EC0"),
                ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Prompt for Amount Entry Command Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Prompt for Amount Entry Command Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }




        private void btnTurnOffMSR_Click(object sender, EventArgs e)
        {
            //continueMSR = false;
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_cancelMSRSwipe(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("MSR Turned Off successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Turned Off successfully");
                SoftwareController.MSR_LED_RED_SOLID();
            }
            else
            {
                tbOutputAppendText("MSR Turned Off failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Turned Off failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnSendAPDU_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            byte[] resData = { 0x00 };
            RETURN_CODE rt = IDT_Device.SharedController.icc_exchangeAPDU(tbAPDU.Text, ref resData);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Exchange APDU data (length [" + resData.Length + "]):\r\n" +
                                    string.Concat(resData.ToArray().Select(b => b.ToString("X2")).ToArray()) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Exchange APDU data (length [" + resData.Length + "]): " +
                                                   string.Concat(resData.ToArray().Select(b => b.ToString("X2"))
                                                       .ToArray()));
            }
            else
            {
                tbOutputAppendText("Exchange APDU failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Exchange APDU failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSendAPDUEncrypted_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            byte[] resData = { 0x00 };
            RETURN_CODE rt = IDT_Device.SharedController.icc_exchangeEncryptedAPDU(tbAPDU.Text, ref resData);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Exchange Encrypted APDU data (length [" + resData.Length + "]):\r\n" +
                                    string.Concat(resData.ToArray().Select(b => b.ToString("X2")).ToArray()) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Exchange Encrypted APDU data (length [" + resData.Length + "]): " +
                                                   string.Concat(resData.ToArray().Select(b => b.ToString("X2"))
                                                       .ToArray()));
            }
            else
            {
                tbOutputAppendText("Exchange Encrypted APDU failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Exchange Encrypted APDU failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSendEncryptedAPDU_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            byte[] resData = { 0x00 };
            RETURN_CODE rt = IDT_Device.SharedController.icc_exchangeEncryptedAPDU(tbAPDU.Text, ref resData);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Exchange Encrypted APDU data (length [" + resData.Length + "]):\r\n" +
                                    string.Concat(resData.ToArray().Select(b => b.ToString("X2")).ToArray()) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Exchange APDU data (length [" + resData.Length + "]): " +
                                                   string.Concat(resData.ToArray().Select(b => b.ToString("X2"))
                                                       .ToArray()));
            }
            else
            {
                tbOutputAppendText("Exchange Encrypted APDU failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Exchange APDU failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void btnReboot_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_rebootDevice(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Device Reboot successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Device Reboot successfully");
            }
            else
            {
                tbOutputAppendText("Device Reboot failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Device Reboot failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void dateTimeString(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string datetimeString = "";

            RETURN_CODE rt = IDT_Device.SharedController.device_getDateTimeString(ref datetimeString);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Date/Time String: " + datetimeString + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Date/Time String: " + datetimeString);
            }
            else
            {
                tbOutputAppendText("Get Date/Time String Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Date/Time String Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetKeyStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] status = null;
            Boolean isNew = false;
            if (IDT_Device.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_K100)
            {
                RETURN_CODE rt = IDT_Device.SharedController.device_getKeyStatus(ref status);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && status != null)
                {
                    tbOutputAppendText("Key Status = " + Common.getHexStringFromBytes(status) + "\r\n", ident);

                    //update key status
                    //get the Number of KeyStatusBlock 



                    System.Diagnostics.Debug.WriteLine("device_getKeyStatus_new successfully");
                }
                else
                {
                    tbOutputAppendText("Get Key Status Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                        ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Get Key Status Error failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }

            }
            else if (IDT_Device.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_AUGUSTA)
            {
                RETURN_CODE rt = IDT_Augusta.SharedController.device_getKeyStatus(ref isNew, ref status);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && status != null)
                {
                    if (!isNew)
                    {
                        if (status != null && status.Length == 6)
                        {
                            if (status[0] == 0x01)
                            {
                                tbOutputAppendText("PIN Variant Key\r\n", ident);
                                if (status[1] == 0x01) tbOutputAppendText("Master Key Exist\r\n", ident);
                                if (status[2] == 0x01) tbOutputAppendText("Session Key Exist\r\n", ident);
                            }
                            else if (status[3] == 0x01)
                            {
                                tbOutputAppendText("Data Variant Key\r\n", ident);
                                if (status[4] == 0x01) tbOutputAppendText("Master Key Exist\r\n", ident);
                                if (status[5] == 0x01) tbOutputAppendText("Session Key Exist\r\n", ident);
                            }
                            else
                            {
                                tbOutputAppendText("No Variant Key\r\n", ident);
                            }

                        }

                        System.Diagnostics.Debug.WriteLine("device_getKeyStatus_new successfully");
                        return;
                    }

                    //update key status
                    //get the Number of KeyStatusBlock 
                    UInt16 numberBlock = status[1];
                    numberBlock = (UInt16)(((numberBlock << 8) & 0xff00) | status[0]);
                    for (int i = 0; i < numberBlock; i++)
                    {
                        switch (status[2 + i * 4])
                        {
                            case 0x14:
                            if (status[2 + i * 4 + 3] == 0x01)
                                tbOutputAppendText("LCL - KEK Key Loaded\r\n", ident);
                            else
                                tbOutputAppendText("LCL - KEK Key NOT Loaded\r\n", ident);

                            break;
                            case 0x02:
                            if (status[2 + i * 4 + 3] == 0x01)
                                tbOutputAppendText("Data encryption Key Loaded\r\n", ident);
                            else
                                tbOutputAppendText("Data encryption Key NOT Loaded\r\n", ident);
                            break;
                            case 0x05:
                            UInt16 keySlot = status[2 + i * 4 + 2];
                            keySlot = (UInt16)(((keySlot << 8) & 0xff00) | status[2 + i * 4 + 1]);
                            if (keySlot == 16)
                            {
                                if (status[2 + i * 4 + 3] == 0x01)
                                    tbOutputAppendText("MTK DUKPT Key Loaded\r\n", ident);
                                else
                                    tbOutputAppendText("MTK DUKPT Key NOT Loaded\r\n", ident);
                            }
                            else
                            {
                                if (status[2 + i * 4 + 3] == 0x01)
                                    tbOutputAppendText("MAC DUKPT Key Loaded\r\n", ident);
                                else
                                    tbOutputAppendText("MAC DUKPT Key NOT Loaded\r\n", ident);
                            }

                            break;
                            case 0x0C:
                            if (status[2 + i * 4 + 3] == 0x01)
                                tbOutputAppendText("RKI - KEK Remote Key Injection Key Loaded\r\n", ident);
                            else
                                tbOutputAppendText("RKI - KEK Remote Key Injection Key NOT Loaded\r\n", ident);
                            break;
                            default: break;
                        }
                    }


                    System.Diagnostics.Debug.WriteLine("device_getKeyStatus_new successfully");
                }
                else
                {
                    tbOutputAppendText("Get Key Status Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                        ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Get Key Status Error failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }

            }
            else
            {
                RETURN_CODE rt = IDT_Device.SharedController.device_getKeyStatus(ref status);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && status != null)
                {
                    tbOutputAppendText("Get Key Status successful\r\n", ident);
                    if (status[0] == 0x01)
                        tbOutputAppendText("PIN DUKPT Key Loaded\r\n", ident);
                    else if (status[0] == 0xFF)
                        tbOutputAppendText("PIN DUKPT Key STOP\r\n", ident);
                    else
                        tbOutputAppendText("PIN DUKPT Key NOT Loaded\r\n", ident);
                    if (status[1] == 0x01)
                        tbOutputAppendText("PIN Master Key Loaded\r\n", ident);
                    else
                        tbOutputAppendText("PIN Master Key NOT Loaded\r\n", ident);
                    if (status[2] == 0x01)
                        tbOutputAppendText("PIN Session Key Loaded\r\n", ident);
                    else
                        tbOutputAppendText("PIN Session Key NOT Loaded\r\n", ident);
                    if (status[3] == 0x01)
                        tbOutputAppendText("MSR DUKPT Key Loaded\r\n", ident);
                    else if (status[3] == 0xFF)
                        tbOutputAppendText("MSR DUKPT Key STOP\r\n", ident);
                    else
                        tbOutputAppendText("MSR DUKPT Key NOT Loaded\r\n", ident);
                    if (status[4] == 0x01)
                        tbOutputAppendText("ICC DUKPT Key Loaded\r\n", ident);
                    else if (status[4] == 0xFF)
                        tbOutputAppendText("ICC DUKPT Key STOP\r\n", ident);
                    else
                        tbOutputAppendText("ICC DUKPT Key NOT Loaded\r\n", ident);
                    if (status[5] == 0x01)
                        tbOutputAppendText("Admin Key Loaded\r\n", ident);
                    else if (status[5] == 0xFF)
                        tbOutputAppendText("Admin Key STOP\r\n", ident);
                    else
                        tbOutputAppendText("Admin Key NOT Loaded\r\n", ident);

                    System.Diagnostics.Debug.WriteLine("device_getKeyStatus successfully");
                }
                else
                {
                    tbOutputAppendText("Get Key Status Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                        ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                    checkLastExtendedErrorCode(ident);
                    System.Diagnostics.Debug.WriteLine("Get Key Status Error failed Error Code: " + "0x" +
                                                       String.Format("{0:X}", (ushort)rt));
                }


            }
        }



        private void btnGetKSN_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] ksn = { 0x00 };

            RETURN_CODE rt = IDT_Device.SharedController.icc_getAPDU_KSN(ref ksn);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("KSN (length [" + ksn.Length + "]):\r\n" +
                                    string.Concat(ksn.ToArray().Select(b => b.ToString("X2")).ToArray()) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("KSN (length [" + ksn.Length + "]): " +
                                                   string.Concat(ksn.ToArray().Select(b => b.ToString("X2"))
                                                       .ToArray()));
            }
            else
            {
                tbOutputAppendText("Get KSN Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get KSN Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetKeyTypeForICCDUKPTKey_Click2(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte type = 0;

            RETURN_CODE rt = IDT_Device.SharedController.device_getKeyTypeForICCDUKPT(ref type);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (type == 0x00)
                {
                    tbOutputAppendText("Key Type For ICCDUKPT Key: Data\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: Data");
                }
                else if (type == 0x01)
                {
                    tbOutputAppendText("Key Type For ICCDUKPT Key: PIN\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: PIN");
                }
                else
                {
                    tbOutputAppendText("Key Type For ICCDUKPT Key: Error\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: Error");
                }
            }
            else
            {
                tbOutputAppendText("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetKeyFormatForICCDUKPTKey_Click2(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte format = 0;

            RETURN_CODE rt = IDT_Device.SharedController.device_getKeyFormatForICCDUKPT(ref format);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (format == 0x00)
                {
                    tbOutputAppendText("Key Format For ICCDUKPT Key: TDES" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: TDES");
                }
                else if (format == 0x01)
                {
                    tbOutputAppendText("Key Format For ICCDUKPT Key: AES" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: AES");
                }
                else
                {
                    tbOutputAppendText("Key Format For ICCDUKPT Key: None" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: None");
                }
            }
            else
            {
                tbOutputAppendText("Get Key Format For ICC DUKPT Key Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }


        }

        private void EnableAdminKey(bool enable)
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.device_enableAdminKey(enable);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (enable) tbOutputAppendText("Admin Key Enabled\r\n", ident);
                else tbOutputAppendText("Admin Key Disabled\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Admin Key enable/disable Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }







        private void btnGetKeyTypeForICCDUKPTKey_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte type = 0;

            RETURN_CODE rt = IDT_Device.SharedController.icc_getKeyTypeForICCDUKPT(ref type);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (type == 0x00)
                {
                    tbOutputAppendText("Key Type For ICC DUKPT Key: Data\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICC DUKPT Key: Data");
                }
                else if (type == 0x01)
                {
                    tbOutputAppendText("Key Type For ICCDUKPT Key: PIN\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: PIN");
                }
                else
                {
                    tbOutputAppendText("Key Type For ICCDUKPT Key: Error\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: Error");
                }
            }
            else
            {
                tbOutputAppendText("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetKeyFormatForICCDUKPTKey_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte format = 0;

            RETURN_CODE rt = IDT_Device.SharedController.icc_getKeyFormatForICCDUKPT(ref format);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (format == 0x00)
                {
                    tbOutputAppendText("Key Format For ICCDUKPT Key: TDES" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: TDES");
                }
                else if (format == 0x01)
                {
                    tbOutputAppendText("Key Format For ICCDUKPT Key: AES" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: AES");
                }
                else
                {
                    tbOutputAppendText("Key Format For ICCDUKPT Key: None" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Key Type For ICCDUKPT Key: None");
                }
            }
            else
            {
                tbOutputAppendText("Get Key Format For ICC DUKPT Key Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Get Key Type For ICC DUKPT Key Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }


        }

        private void btnUniPayScript(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] response = new byte[0];
            IDT_UniPay.SharedController.device_sendDataCommand("7831", true, ref response);
            tbOutputAppendText("Get FW Version: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("784630", true, ref response);
            tbOutputAppendText("Key Status: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("78520102", true, ref response);
            tbOutputAppendText("Key Type: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("78520103", true, ref response);
            tbOutputAppendText("Encryption Mode: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("72520104", true, ref response);
            tbOutputAppendText("Card Type: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("72520105", true, ref response);
            tbOutputAppendText("L1 Transaction Timeout: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("72520120", true, ref response);
            tbOutputAppendText("Prefix, postfix PAN: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("72520121", true, ref response);
            tbOutputAppendText("ASCII Mask CharID: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("72520122", true, ref response);
            tbOutputAppendText("BCD Mask CharID: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("725200", true, ref response);
            tbOutputAppendText("ICC Settings: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("735200", true, ref response);
            tbOutputAppendText("MSR Settings: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("7D5200", true, ref response);
            tbOutputAppendText("AudioJack Setting: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("72520103", true, ref response);
            tbOutputAppendText("ICC Voltage: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("73520149", true, ref response);
            tbOutputAppendText("PrePAN: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("73520150", true, ref response);
            tbOutputAppendText("DispExpDate: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("7352017E", true, ref response);
            tbOutputAppendText("SecurityLevel: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("73520184", true, ref response);
            tbOutputAppendText("EnOption: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            IDT_UniPay.SharedController.device_sendDataCommand("73520186", true, ref response);
            tbOutputAppendText("MaskOption: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
            //btnBootloader_Click(null, null);
        }

        private bool inTest = false;




        private void btnSendDataCommand_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            if (tbCommand.Text.Length == 0) return;
            String command = tbCommand.Text;
            command = command.Replace(" ", "");


            IDTechComm comm = Profile.getComm("");

            byte[] response = new byte[0];
            if (comm != null)
            {
                comm.calcNextITP = rbITP.Checked;
                comm.calcNextNGA = rbNGA.Checked;
            }


            RETURN_CODE rt = IDT_Device.SharedController.device_sendDataCommand_ext(tbCommand.Text, rbNGA.Checked || rbITP.Checked,
                ref response, Convert.ToInt32(tbTimout.Text), cbNoResponse.Checked);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Send Command Response HEX: " + Common.getHexStringFromBytes(response) + "\r\n", ident);

                for (int x = 0; x < response.Length; x++)
                {
                    if (response[x] < 0x20 || response[x] > 0x7d) response[x] = 0x3f;

                }

                tbOutputAppendText("Send Command Response ASCII: " + System.Text.Encoding.UTF8.GetString(response) +
                                    "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Send Command Response: " + Common.getHexStringFromBytes(response));
            }
            else
            {
                tbOutputAppendText("Send Command Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Send Command Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void ArmToRead()
        {
            string ident = getIdentValue();


            String command = "500130";
            byte[] response = new byte[0];
            IDTechComm comm = Profile.getComm("");

            if (comm != null)
            {
                comm.calcNextITP = true;
            }
            RETURN_CODE rt =
                IDT_Device.SharedController.device_sendDataCommand_ext(command, false, ref response, 3000, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Arm to Read Success:\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Arm to Read Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void AllSettings()
        {
            string ident = getIdentValue();


            String command = "521F";
            byte[] response = new byte[0];
            IDTechComm comm = Profile.getComm("");

            if (comm != null)
            {
                comm.calcNextITP = true;
            }
            RETURN_CODE rt =
                IDT_Device.SharedController.device_sendDataCommand_ext(command, false, ref response, 3000, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("All Settings: " + Common.getHexStringFromBytes(response) + "\r\n", ident);

            }
            else
            {
                tbOutputAppendText("All Settings Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        bool keepInLoop = true;

        private void StartPollingData()
        {
            tvCommands.Nodes.Clear();
            buildSecureMagTree2();
            Thread demoThread = new Thread(new ThreadStart(StartPollingDataThread));
            demoThread.IsBackground = true;
            demoThread.Start(); //启动线程 


        }



        private void StartPollingDataThread()
        {
            string ident = getIdentValue();



            keepInLoop = true;

            String command = "510130";
            byte[] response = new byte[0];
            IDTechComm comm = Profile.getComm("");

            if (comm != null)
            {
                comm.calcNextITP = true;
            }
            RETURN_CODE rt = RETURN_CODE.RETURN_CODE_DO_SUCCESS;

            while (keepInLoop)
            {
                rt = IDT_Device.SharedController.device_sendDataCommand_ext(command, true, ref response, 3000, false);
                if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                {
                    SetOutputText("Captured Polling Data: " + Common.getHexStringFromBytes(response) + "\r\n", ident);
                    if (response != null && response.Length == 1 && response[0] == 0x06)
                    {
                        keepInLoop = false;
                        StopPollingData();
                    }

                }

                Common.pause(500);
            }

        }

        private void StopPollingData()
        {

            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { StopPollingData(); });
                return;
            }

            keepInLoop = false;
            // this code will run on main (UI) thread 
            buildTreeView();



        }

        private void btnSendMacDataCommand_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            if (tbTaskID.Text.Length == 0) return;
            if (tbFID.Text.Length == 0) return;
            byte[] taskID = Common.getByteArray(tbTaskID.Text);
            byte[] functionID = Common.getByteArray(tbFID.Text);
            byte[] data = Common.getByteArray(tbMacData.Text);
            byte[] response = new byte[0];
            RETURN_CODE rt = IDT_Device.SharedController.device_sendMacDataCommand(taskID[0], functionID, data,
                cbMacData.Checked, ref response);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Send Mac Command Response HEX: " + Common.getHexStringFromBytes(response) +
                                    "\r\n", ident);

                for (int x = 0; x < response.Length; x++)
                {
                    if (response[x] < 0x20 || response[x] > 0x7d) response[x] = 0x3f;

                }

                tbOutputAppendText("Send Mac Command Response ASCII: " +
                                    System.Text.Encoding.UTF8.GetString(response) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Send Command Response: " + Common.getHexStringFromBytes(response));
            }
            else
            {
                tbOutputAppendText("Send Mac Command Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Send Command Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void btnsetDateTime_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setDateTime();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Date Time Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Date Time Successful");
            }
            else
            {
                tbOutputAppendText("Set Date Time Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Date Time Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnpollCardReader_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] status = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_pollCardReader(ref status);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && status != null && status.Length == 6)
            {

                tbOutputAppendText("Poll Card Reader Successful: " + Common.getHexStringFromBytes(status) + "\r\n", ident);
                if ((status[0] & 0x01) == 0x01) tbOutputAppendText("Device Manufacturing CA data valid" + "\r\n", ident);
                if ((status[0] & 0x02) == 0x02) tbOutputAppendText("Device Manufacturing Secure data valid" + "\r\n", ident);
                if ((status[0] & 0x04) == 0x04) tbOutputAppendText("HOST_CR_MASTER_DUKPT Key valid" + "\r\n", ident);
                if ((status[0] & 0x08) == 0x08) tbOutputAppendText("HOST_CR_MAC Keys valid(Authenticated)" + "\r\n", ident);
                //if ((status[0] & 0x10) == 0x10) tbOutputAppendText("RFU");
                //if ((status[0] & 0x20) == 0x20) tbOutputAppendText("RFU");
                if ((status[0] & 0x40) == 0x40) tbOutputAppendText("DATA_DUKPT Key Valid" + "\r\n", ident);
                if ((status[0] & 0x80) == 0x80)
                    tbOutputAppendText("Key is initialized (MFK and RSA Key pairs)" + "\r\n", ident);


                if ((status[1] & 0x01) == 0x01) tbOutputAppendText("Firmware Key Valid" + "\r\n", ident);
                //if ((status[1] & 0x02) == 0x02) tbOutputAppendText("RFU");
                if ((status[1] & 0x04) == 0x04) tbOutputAppendText("CR_PINPAD_MASTER_DUKPT Key valid" + "\r\n", ident);
                if ((status[1] & 0x08) == 0x08) tbOutputAppendText("CR_PINPAD_MAC Keys valid(Authenticated)" + "\r\n", ident);
                if ((status[1] & 0x10) == 0x10) tbOutputAppendText("DATA Pairing DUKPT Key valid" + "\r\n", ident);
                if ((status[1] & 0x20) == 0x20) tbOutputAppendText("PIN Pairing DUKPT Key Valid" + "\r\n", ident);
                //if ((status[1] & 0x40) == 0x40) tbOutputAppendText("RFU");
                // if ((status[1] & 0x80) == 0x80) tbOutputAppendText("RFU");

                //if ((status[2] & 0x01) == 0x01) tbOutputAppendText("RFU");
                if ((status[2] & 0x02) == 0x02) tbOutputAppendText("Tamper Switch #1 Error" + "\r\n", ident);
                if ((status[2] & 0x04) == 0x04) tbOutputAppendText("Battery Backup Error" + "\r\n", ident);
                if ((status[2] & 0x08) == 0x08) tbOutputAppendText("Temperature Error" + "\r\n", ident);
                if ((status[2] & 0x10) == 0x10) tbOutputAppendText("Voltage Sensor Error" + "\r\n", ident);
                if ((status[2] & 0x20) == 0x20) tbOutputAppendText("Firmware Authentication Error" + "\r\n", ident);
                if ((status[2] & 0x40) == 0x40) tbOutputAppendText("Tamper Switch #2 Error" + "\r\n", ident);
                if ((status[2] & 0x80) == 0x80) tbOutputAppendText("Removal Tamper Error" + "\r\n", ident);


                int v1 = (status[3] >> 4);
                int v2 = (status[3] & 0x0f);
                tbOutputAppendText("Battery Voltage " + v1.ToString() + "." + v2.ToString() + "V" + "\r\n", ident);

                if ((status[4] & 0x01) == 0x01) tbOutputAppendText("Log is Full" + "\r\n", ident);
                if ((status[4] & 0x02) == 0x02) tbOutputAppendText("Mag Data Present" + "\r\n", ident);
                if ((status[4] & 0x04) == 0x04) tbOutputAppendText("Card Insert" + "\r\n", ident);
                if ((status[4] & 0x08) == 0x08) tbOutputAppendText("Removal Sensor Disconnected" + "\r\n", ident);
                if ((status[4] & 0x10) == 0x10) tbOutputAppendText("Card Seated" + "\r\n", ident);
                if ((status[4] & 0x20) == 0x20) tbOutputAppendText("Latch Mechanism Active" + "\r\n", ident);
                if ((status[4] & 0x40) == 0x40) tbOutputAppendText("Removal Sensor Active" + "\r\n", ident);
                if ((status[4] & 0x80) == 0x80) tbOutputAppendText("Tamper Detector Active" + "\r\n", ident);

                if ((status[5] & 0x01) == 0x01) tbOutputAppendText("SAM Available" + "\r\n", ident);
                if ((status[5] & 0x02) == 0x02) tbOutputAppendText("Chip Card Reader Available" + "\r\n", ident);
                if ((status[5] & 0x04) == 0x04) tbOutputAppendText("Host Connected" + "\r\n", ident);
                if ((status[5] & 0x08) == 0x08) tbOutputAppendText("Production Certificates" + "\r\n", ident);
                else tbOutputAppendText("Test Certificates" + "\r\n", ident);
                if ((status[5] & 0x10) == 0x10) tbOutputAppendText("PINPAD connected" + "\r\n", ident);
                if ((status[5] & 0x20) == 0x20) tbOutputAppendText("MSR Header connected" + "\r\n", ident);
                if ((status[5] & 0x08) == 0x40) tbOutputAppendText("K21 Production Firmware" + "\r\n", ident);
                else tbOutputAppendText("K21 Manufacture Firmware" + "\r\n", ident);
                if ((status[5] & 0x08) == 0x80) tbOutputAppendText("MAXQ Production Firmware" + "\r\n", ident);
                else tbOutputAppendText("MAXQ Manufacture Firmware" + "\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Poll Card Reader Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Poll Card Reader Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btngetDateTime_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] dt = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getDateTime(ref dt);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && dt != null)
            {
                string datestr = Common.getHexStringFromBytes(dt);
                tbOutputAppendText("Get Date Time Successful " + datestr.Substring(2, 2) + "/" +
                                    datestr.Substring(4, 2) + "/20" + datestr.Substring(0, 2) + "  " +
                                    datestr.Substring(6, 2) + ":" + datestr.Substring(8, 2) + ":" +
                                    datestr.Substring(10, 2) + "\r\n", ident);

                System.Diagnostics.Debug.WriteLine("Get Date Time Successful");
            }
            else
            {
                tbOutputAppendText("Get Date Time Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Date Time Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnTDES_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setKeyFormatForICCDUKPT(0x00);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Format TDES Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Format TDES Successful");
            }
            else
            {
                tbOutputAppendText("Set Format TDES Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);

            }
        }

        private void btnAES_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setKeyFormatForICCDUKPT(0x01);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Format AES Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Format AES Successful");
            }
            else
            {
                tbOutputAppendText("Set Format AES Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);

            }

        }

        private void btnGetPAN(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.pin_getPAN(true, 120);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Get PAN Executed Successfully" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get PAN Executed Successfully");
            }
            else
            {
                tbOutputAppendText("Get PAN Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);

            }

        }


        private void btnSetPAN_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setClearPANID((byte)numPAN.Value);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Clear Pan Digits Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Clear Pan Digits Successful");
            }
            else
            {
                tbOutputAppendText("Set Clear Pan Digits Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Clear Pan Digits Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetClearPAN_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte response = 0x00;
            RETURN_CODE rt = IDT_Device.SharedController.msr_getClearPANID(ref response);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Get Clear PAN Digits Response: " + (int)(response) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Clear PAN Digits Response: " + (int)(response));
            }
            else
            {
                tbOutputAppendText("Get Clear PAN Digits Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Clear PAN Digits Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetExpirationMask_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte response = 0x00;
            RETURN_CODE rt = IDT_Device.SharedController.msr_getExpirationMask(ref response);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Expiration Masking: " + ((response == 0x30) ? "Masked" : "Unmasked") + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine(
                    "Expiration Masking: " + ((response == 0x30) ? "Masked" : "Unmasked"));
            }
            else
            {
                tbOutputAppendText("Expiration Masking Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void btnMaskExp_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setExpirationMask(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Expiration Mask Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Expiration Mask Successful");
            }
            else
            {
                tbOutputAppendText("Set Expiration Mask Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Expiration Mask Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnUnmaskExp_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setExpirationMask(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Expiration Unmask Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Expiration Unmask Successful");
            }
            else
            {
                tbOutputAppendText("Set Expiration Unmask Unsuccessful" + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Expiration Unmask Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSwipeTDES_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setSwipeEncryption(0x01);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Swipe Encryption TDES Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Swipe Encryption TDES Successful");
            }
            else
            {
                tbOutputAppendText("Set Swipe Encryption TDES Unsuccessful: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);

            }
        }

        private void btnSwipeAES_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setSwipeEncryption(0x02);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Swipe Encryption AES Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Swipe Encryption AES Successful");
            }
            else
            {
                tbOutputAppendText("Set Swipe Encryption AES Unsuccessful: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }
        }

        private void btnSwipeEncryption_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte format = 0;

            RETURN_CODE rt = IDT_Device.SharedController.msr_getSwipeEncryption(ref format);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (format == 0x31)
                {
                    tbOutputAppendText("Swipe Encryption for MSR: TDES" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Swipe Encryption for MSR: TDES");
                }
                else if (format == 0x32)
                {
                    tbOutputAppendText("Swipe Encryption for MSR: AES" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Swipe Encryption for MSR: AES");
                }
                else if (format == 0x33)
                {
                    tbOutputAppendText("Swipe Encryption for MSR: TransArmor RSA Encryption" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Swipe Encryption for MSR: TransArmor RSA Encryption");
                }
                else
                {
                    tbOutputAppendText("Swipe Encryption for MSR: None" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Swipe Encryption for MSR: None");
                }
            }
            else
            {
                tbOutputAppendText("Swipe Encryption for MSR  Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Swipe Encryption for MSR  Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }
        }

        private void btnSetSwipeForceEncryption_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt =
                IDT_Device.SharedController.msr_setSwipeForcedEncryptionOption(cbT1.Checked, cbT2.Checked, cbT3.Checked,
                    cbT30.Checked);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Swipe Force Encryption  Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Swipe Force Encryption  Successful");
            }
            else
            {
                tbOutputAppendText("Set Swipe Force Encryption Unsuccessful: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }
        }

        private void btnGetSwipeForceEncryption_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte format = 0;

            RETURN_CODE rt = IDT_Device.SharedController.msr_getSwipeForcedEncryptionOption(ref format);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if ((format & 0x01) == 0x01)
                {
                    tbOutputAppendText("Track 1 Swipe Force Encryption: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 1 Swipe Force Encryption: ON");
                }
                else
                {
                    tbOutputAppendText("Track 1 Swipe Force Encryption: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 1 Swipe Force Encryption: OFF");
                }

                if ((format & 0x02) == 0x02)
                {
                    tbOutputAppendText("Track 2 Swipe Force Encryption: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 2 Swipe Force Encryption: ON");
                }
                else
                {
                    tbOutputAppendText("Track 2 Swipe Force Encryption: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 2 Swipe Force Encryption: OFF");
                }

                if ((format & 0x04) == 0x04)
                {
                    tbOutputAppendText("Track 3 Swipe Force Encryption: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 3 Swipe Force Encryption: ON");
                }
                else
                {
                    tbOutputAppendText("Track 3 Swipe Force Encryption: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 3 Swipe Force Encryption: OFF");
                }

                if ((format & 0x08) == 0x08)
                {
                    tbOutputAppendText("Track 3 Option 0 Swipe Force Encryption: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 3 Option 0 Swipe Force Encryption: ON");
                }
                else
                {
                    tbOutputAppendText("Track 3 Option 0 Swipe Force Encryption: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 3 Option 0 Swipe Force Encryption: OFF");
                }

            }
            else
            {
                tbOutputAppendText("Get Swipe Force Encryption  Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Get Swipe Force Encryption  Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }
        }

        private void btnSetSwipeMaskOption_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt =
                IDT_Device.SharedController.msr_setSwipeMaskOption(cbM1.Checked, cbM2.Checked, cbM3.Checked);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Swipe Mask Option  Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Swipe Mask Option  Successful");
            }
            else
            {
                tbOutputAppendText("Set Swipe Mask Option Unsuccessful: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }
        }

        private void btnGetSwipeMaskOption_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte format = 0;

            RETURN_CODE rt = IDT_Device.SharedController.msr_getSwipeMaskOption(ref format);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if ((format & 0x01) == 0x01)
                {
                    tbOutputAppendText("Track 1 Mask Option: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 1 Mask Option: ON");
                }
                else
                {
                    tbOutputAppendText("Track 1 Mask Option: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 1 Mask Option: OFF");
                }

                if ((format & 0x02) == 0x02)
                {
                    tbOutputAppendText("Track 2 Mask Option: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 2 Mask Option: ON");
                }
                else
                {
                    tbOutputAppendText("Track 2 Mask Option: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 2 Mask Option: OFF");
                }

                if ((format & 0x04) == 0x04)
                {
                    tbOutputAppendText("Track 3 Mask Option: ON" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 3 Mask Option: ON");
                }
                else
                {
                    tbOutputAppendText("Track 3 Mask Option: OFF" + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Track 3 Mask Option: OFF");
                }


            }
            else
            {
                tbOutputAppendText("Get Mask Option  Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Mask Option  Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }
        }

        private void cbAutoAuthenticate_CheckedChanged(object sender, EventArgs e)
        {
            byte[] additionalTags = Common.getByteArray(tbAuthenticate.Text);
            IDT_Device.emv_autoAuthenticateTags(cbAutoAuthenticate.Checked, additionalTags);
        }


        private void cancelStart()
        {

            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Perform Cancel Transaciton immediately followed by Start Transaction?",
                    "Cancel Test", "YES", -1, -1);
            if (!input.Equals("YES")) return;

            byte[] response = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_sendVivoCommandP2_ext(0x05, 0x01, null, ref response, 1000, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {


            }
            else
            {
                tbOutputAppendText("Send Command Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Send Command Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
                return;
            }



            byte[] additionalTags = Common.getByteArray(tbAdditionalTags.Text);
            IDT_Device.emv_allowFallback(cbAllowFallback.Checked);
            IDT_Device.emv_autoAuthenticate(cbAutoAuthenticate.Checked);

            rt = 0;
            pinMode = false;
            rt = IDT_Device.SharedController.emv_startTransaction(Convert.ToDouble(tbAmount.Text), 0,
                2, 0, 15, additionalTags, cbForceOnline.Checked,
                (fastEMV1.Checked || fastemv2.Checked));



            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS || rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
            {
                tbOutputAppendText("Start EMV Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Start EMV Successful");
            }
            else
            {
                tbOutputAppendText("Start EMV failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start EMV failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEMVStart_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            byte[] additionalTags = Common.getByteArray(tbAdditionalTags.Text);
            IDT_Device.emv_allowFallback(cbAllowFallback.Checked);
            IDT_Device.emv_autoAuthenticate(cbAutoAuthenticate.Checked);
            RETURN_CODE rt = 0;
            pinMode = false;
            rt = IDT_Device.SharedController.emv_startTransaction(Convert.ToDouble(tbAmount.Text), 0,
                2, 0, 200, additionalTags, cbForceOnline.Checked,
                (fastEMV1.Checked || fastemv2.Checked));



            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS || rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
            {
                tbOutputAppendText("Start EMV Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Start EMV Successful");
            }
            else
            {
                tbOutputAppendText("Start EMV failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start EMV failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }







        private void btnCancelTransaction_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_cancelTransaction();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Cancel Transaction Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction Successful");

            }
            else
            {
                tbOutputAppendText("Cancel Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnCancelTransactions_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_cancelTransaction();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Cancel Transaction Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction Successful");

            }
            else
            {
                tbOutputAppendText("Cancel Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void btnDefaultADI_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            tbOutputAppendText("Please Wait. Loading Default AID...\r\n", ident);


            byte[] name;
            byte[] aid;
            RETURN_CODE rt;
            if (IDT_Device.getProtocolType() == DEVICE_PROTOCOL_Types.DEVICE_PROTOCOL_IDG &&
                (connectedDevicesList.SelectedItem != null && connectedDevicesList.SelectedItem.Equals(NEONAME))) //DFEE15 = 00 for PSE
            {
                name = Common.getByteArray("A00000002501");
                aid = Common.getByteArray(
                    "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A000000152");
                aid = Common.getByteArray(
                    "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000001524010");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                name = Common.getByteArray("A0000000041010");
                aid = Common.getByteArray(
                    "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000000042203");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                name = Common.getByteArray("A0000000031010");
                aid = Common.getByteArray(
                    "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000000980840");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A000000333010108");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000006200620");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                name = Common.getByteArray("A0000000651010");
                aid = Common.getByteArray(
                    "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

            }
            else if (IDT_Device.getProtocolType() == DEVICE_PROTOCOL_Types.DEVICE_PROTOCOL_IDG) //DFEE15 = 01 for PSE
            {
                if (IDT_Device.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_NEO2)
                {
                    name = Common.getByteArray("A00000002501");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400000000df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A000000152");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400000000df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000001524010");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                    name = Common.getByteArray("A0000000041010");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400000000df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000000042203");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                    name = Common.getByteArray("A0000000031010");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400000000df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000000980840");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A000000333010108");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000006200620");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                    name = Common.getByteArray("A0000000651010");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400000000df25039f3704df28039f0802DFEE150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                }
                else
                {
                    name = Common.getByteArray("A00000002501");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802dfee150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A000000152");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802dfee150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000001524010");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                    name = Common.getByteArray("A0000000041010");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802dfee150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000000042203");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                    name = Common.getByteArray("A0000000031010");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802dfee150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000000980840");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A000000333010108");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                    name = Common.getByteArray("A0000006200620");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                    name = Common.getByteArray("A0000000651010");
                    aid = Common.getByteArray(
                        "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802dfee150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100");
                    rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                }


            }
            else
            {
                name = Common.getByteArray("A0000000031010");
                aid = Common.getByteArray(
                    "9F01065649534130305F5701005F2A0208409F090200965F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000000980840");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A000000333010108");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000006200620");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                aid = Common.getByteArray(
                    "9F01065649534130305F5701005F2A0208409F090200965F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                name = Common.getByteArray("A0000000032010");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                aid = Common.getByteArray(
                    "5F5701005F2A0208409F090200025F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                name = Common.getByteArray("A0000000041010");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000000042203");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                aid = Common.getByteArray(
                    "5F5701005F2A0208409F090200015F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                name = Common.getByteArray("A00000002501");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                aid = Common.getByteArray(
                    "5F5701005F2A0208409F090200015F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                name = Common.getByteArray("A0000001523010");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                aid = Common.getByteArray(
                    "5F5701005F2A0208409F090200015F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                name = Common.getByteArray("A0000001524010");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
                name = Common.getByteArray("A0000001524010");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);

                name = Common.getByteArray("A0000000651010");
                aid = Common.getByteArray(
                    "9F01065649534130305F5701005F2A0208409F090200965F3601029F1B0400003A98DF25039F3704DF28039F0802DFEE150101DF13050000000000DF14050000000000DF15050000000000DF180100DF170400002710DF190100");
                rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);


            }





            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Default AID Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Default AID EMV Successful");
            }
            else
            {
                tbOutputAppendText("Default AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Default AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }


        private void btnEMVAuthenticate_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] additionalTags = Common.getByteArray(tbAuthenticate.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_authenticateTransaction(additionalTags);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS || rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
            {
                tbOutputAppendText("Authenticate EMV Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Authenticate EMV Successful");
            }
            else
            {
                tbOutputAppendText("Authenticate EMV failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Authenticate EMV failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEMVComplete_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] additionalTags = Common.getByteArray(tbComplete.Text);
            byte[] responseCode = new byte[] { 0x30, 0x30 };
            if (responseCode8A.Text.Length == 4) responseCode = Common.getByteArray(responseCode8A.Text);

            byte[] iad = new byte[] { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 };
            // byte[] iad = null;

            RETURN_CODE rt = 0;


            rt = IDT_Device.SharedController.emv_completeTransaction(cbNoHost.Checked, responseCode, null, null,
                additionalTags);


            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS || rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
            {
                if (rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND) tbOutputAppendText("Complete EMV Command Accepted with '10'\r\n", ident);
                else tbOutputAppendText("Complete EMV Command Accepted\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Complete EMV Command Accepted");
            }
            else
            {
                tbOutputAppendText("Complete EMV failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Complete EMV failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnKernelVersion_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            String ver = "";
            RETURN_CODE rt = IDT_Device.SharedController.emv_getEMVKernelVersion(ref ver);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("EMV Kernel Version: " + ver + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("EMV Kernel Version: " + ver);
            }
            else
            {
                tbOutputAppendText("EMV Kernel Version failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("EMV Kernel Version failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void VP8800BeepLCD(byte beep, byte led, bool turnOn)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setBuzzerLED(beep, led, turnOn);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("BEEP/LCD send successfully\r\n", ident);
            }
            else
            {
                tbOutputAppendText("BEEP/LCD failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private void VP8800LED(int indicator, bool turnOn)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_controlIndicator(indicator, turnOn);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("LED send successfully\r\n", ident);
            }
            else
            {
                tbOutputAppendText("LED failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }
        }

        private string convertAidResponse(byte[] response)
        {
            string ident = getIdentValue();

            if (response != null && response.Length > 0)
            {

                if (response[0] == 0xDF || response[0] == 0xFF)
                {
                    try
                    {
                        int offset = 0;
                        if (response[0] == 0xDF) offset = 1;
                        byte[] group = new byte[] { response[3 + offset] };
                        int aidLen = response[6 + offset];
                        byte[] aid = new byte[aidLen];
                        string resString = Common.getHexStringFromBytes(response).ToUpper();
                        bool isContact = false;
                        isContact = ((resString.IndexOf("FFE70102") >= 0) || (resString.IndexOf("DFEE4F0102") >= 0));
                        System.Array.Copy(response, 7 + offset, aid, 0, aidLen);
                        return (isContact ? "CONTACT - " : "CTLS - ") + "Group: " +
                               Common.getHexStringFromBytes(group) + " - AID: " + Common.getHexStringFromBytes(aid);
                    }
                    catch
                    {
                        return "BAD DATA ENCOUNTERED - " + Common.getHexStringFromBytes(response);
                    }

                }
                else
                {
                    return Common.getHexStringFromBytes(response);
                }
            }

            return "";
        }

        private void btnListAid_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[][] aids = null;
            RETURN_CODE rt = IDT_Device.SharedController.emv_retrieveAIDList(ref aids);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List AID Successful  \r\n", ident);
                System.Diagnostics.Debug.WriteLine("List AID Successful\r\n\r\n", ident);


                if (aids != null && aids.Count() > 0)
                {
                    foreach (byte[] b in aids)
                    {
                        tbOutputAppendText(convertAidResponse(b) + " \r\n", ident);
                    }
                }

            }
            else
            {
                tbOutputAppendText("List AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnListAidCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[][] aids = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_retrieveAIDList(ref aids);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List AID Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("List AID Successful");
                if (aids.Count() > 0)
                {
                    foreach (byte[] b in aids)
                    {
                        //tbOutputAppendText(Common.getHexStringFromBytes(b) + " \r\n", ident);

                        tbOutputAppendText(convertAidResponse(b) + " \r\n", ident);
                    }
                }
            }
            else
            {
                tbOutputAppendText("List AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnListAidALL_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[][] aids = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_retrieveAIDList(ref aids);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List All AIDs Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("List All AIDs Successful");
                if (aids.Count() > 0)
                {
                    foreach (byte[] b in aids)
                    {
                        tbOutputAppendText(convertAidResponse(b) + " \r\n", ident);
                    }
                }
            }
            else
            {
                tbOutputAppendText("List All AIDs failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List All AIDs failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetrieveAid_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt =
                IDT_Device.SharedController.emv_retrieveApplicationData(Common.getByteArray(tbAid.Text), ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (tlv == null || tlv.Length == 0)
                {
                    tbOutputAppendText("Command executed successfully, but no data found for that AID\r\n" +
                                        tlvToValues(tlv), ident);

                    System.Diagnostics.Debug.WriteLine("Command executed successfully, but no data found for that AID");
                }
                else
                {
                    tbOutputAppendText("Retrieve AID Successful- TLV: " + "  \r\n" +
                                        Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" +
                                        tlvToValues(tlv), ident);

                    System.Diagnostics.Debug.WriteLine("Retrieve AID Successful");
                }


            }
            else
            {
                tbOutputAppendText("Retrieve AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetrieveAidCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt = 0;
            rt = IDT_Device.SharedController.ctls_retrieveApplicationData(Common.getByteArray(tbAid.Text), ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                if (tlv == null || tlv.Length == 0)
                {
                    tbOutputAppendText("Command executed successfully, but no data found for that AID\r\n" +
                                        tlvToValues(tlv), ident);

                    System.Diagnostics.Debug.WriteLine("Command executed successfully, but no data found for that AID");
                }
                else
                {
                    tbOutputAppendText("Retrieve AID Successful- TLV: " + "  \r\n" +
                                        Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" +
                                        tlvToValues(tlv), ident);

                    System.Diagnostics.Debug.WriteLine("Retrieve AID Successful");
                }

            }
            else
            {
                tbOutputAppendText("Retrieve AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveAid_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_removeApplicationData(Common.getByteArray(tbAid.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove AID Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove AID Successful");

            }
            else
            {
                tbOutputAppendText("Remove AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveAidCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.ctls_removeApplicationData(Common.getByteArray(tbAid.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove AID Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove AID Successful");

            }
            else
            {
                tbOutputAppendText("Remove AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveAID_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] aid = Common.getByteArray(tbAidData.Text);
            byte[] name = Common.getByteArray(tbAid.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_setApplicationData(name, aid);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save AID Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save AID Successful");

            }
            else
            {
                tbOutputAppendText("Save AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnSaveAIDCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] aid = Common.getByteArray(tbAidData.Text);
            RETURN_CODE rt = IDT_Device.SharedController.ctls_setApplicationData(aid);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save AID Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save AID Successful");

            }
            else
            {
                tbOutputAppendText("Save AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnSaveConfiguration_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] aid = Common.getByteArray(tbAidData.Text);
            RETURN_CODE rt = IDT_Device.SharedController.ctls_setConfigurationGroup(aid);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save Configuration Group Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save Configuration Group Successful");

            }
            else
            {
                tbOutputAppendText("Save Configuration Group failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Configuration Group failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void activateTransaction()
        {
            string ident = getIdentValue();

            byte[] tags = Common.getByteArray(tbActivateTLV.Text);
            int timeout = 15;
            try
            {
                timeout = Convert.ToInt32(tbActiveTimeout.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid timeout" + "  \r\n", ident);
                return;
            }

            if (timeout < 0 || timeout > 255)
            {
                tbOutputAppendText("Timeout must be between 1 and 255 seconds" + "  \r\n", ident);
                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.ctls_activateTransaction(timeout, tags, false, false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Activate Transaction Started Successfully" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Activate Transaction Started Successfully");

            }
            else
            {
                tbOutputAppendText("Activate Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Activate Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnRemoveAids_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            tbOutputAppendText("Please Wait. Removing All AID...\r\n", ident);
            RETURN_CODE rt = IDT_Device.SharedController.emv_removeAllApplicationData();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove all AID Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove all AID Successful");

            }
            else
            {
                tbOutputAppendText("Remove all AID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove all AID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnterminalinfo(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_terminalInfo(ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve Terminal Info Successful- TLV: " + "  \r\n" +
                                    Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" + tlvToValues(tlv), ident);

                System.Diagnostics.Debug.WriteLine("Retrieve Terminal Info Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve Terminal failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetriveTerm_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.emv_retrieveTerminalData(ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve Terminal Successful- TLV: " + "  \r\n" +
                                    Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" + tlvToValues(tlv), ident);

                System.Diagnostics.Debug.WriteLine("Retrieve Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve Terminal failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetriveTermCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_retrieveTerminalData(ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve Terminal Successful- TLV: " + "  \r\n" +
                                    Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" + tlvToValues(tlv), ident);

                System.Diagnostics.Debug.WriteLine("Retrieve Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve Terminal failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetriveTermDEVICE_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_retrieveTerminalData(ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve Terminal Successful- TLV: " + "  \r\n" +
                                    Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" + tlvToValues(tlv), ident);

                System.Diagnostics.Debug.WriteLine("Retrieve Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve Terminal failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveTerm_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_removeTerminalData();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove Terminal Data Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove Terminal Data Successful");

            }
            else
            {
                tbOutputAppendText("Remove Terminal Data failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove Terminal Data failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnAddTerm_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_addTerminalData(term);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Add Terminal Data Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Add Terminal Data Successful");

            }
            else
            {
                tbOutputAppendText("Add Terminal Data Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Add Terminal Data Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void btnSaveTerm2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] rejectedTLV = null;
            byte[] convertedTLV = null;
            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_trySetTerminalData(term, ref rejectedTLV, ref convertedTLV, false, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Successful:" + "  \r\n", ident);
                if (rejectedTLV != null && rejectedTLV.Length > 0)
                {
                    tbOutputAppendText("Rejected TLV: " + Common.getHexStringFromBytes(rejectedTLV) + "  \r\n", ident);
                }
                if (convertedTLV != null && convertedTLV.Length > 0)
                {
                    tbOutputAppendText("Converted TLV: " + Common.getHexStringFromBytes(convertedTLV) + "  \r\n", ident);
                }

                System.Diagnostics.Debug.WriteLine("Save Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Save Terminal failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveTerm_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_setTerminalData(term);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Save Terminal failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnCRLStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] status = new byte[0];
            RETURN_CODE rt = IDT_Device.SharedController.emv_getCRLStatus(ref status);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("CRL Status: " + "  \r\n", ident);
                string val = Common.getHexStringFromBytes(status);
                tbOutputAppendText("Version Number: " + val.Substring(0, 8) + "  \r\n", ident);
                tbOutputAppendText("Number of Records: " + val.Substring(8, 8) + "  \r\n", ident);
                tbOutputAppendText("Size of Record: " + val.Substring(16, 8) + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("CRL Status: " + Common.getHexStringFromBytes(status));
            }
            else
            {
                tbOutputAppendText("CRL Status failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("CRL Status Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btngetLogRecord_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] record = new byte[0];
            int remaining = 0;
            RETURN_CODE rt = IDT_Device.SharedController.emv_getTransactionLogRecord(ref record, ref remaining);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Number of Records Remaining: " + remaining.ToString() + "  \r\n", ident);

                tbOutputAppendText("Transaction Log Record: " + Common.getHexStringFromBytes(record) + "  \r\n", ident);



            }
            else
            {
                tbOutputAppendText("Transaction Log Record Status failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Transaction Log Record Status Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveTransactionAmountLog_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_VP8800.SharedController.emv_removeTransactionAmountLog();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Remove Transaction Amount Log Successfully\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Remove Transaction Amount Log failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove Transaction Amount Log Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnClearLogStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] status = new byte[0];
            RETURN_CODE rt = IDT_Device.SharedController.emv_getTransactionLogStatus(ref status);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Transaction Log Status: " + "  \r\n", ident);
                string val = Common.getHexStringFromBytes(status);
                tbOutputAppendText("Version Number: " + val.Substring(0, 8) + "  \r\n", ident);
                tbOutputAppendText("Number of Records: " + val.Substring(8, 8) + "  \r\n", ident);
                tbOutputAppendText("Size of Record: " + val.Substring(16, 8) + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Transaction Log Status: " + Common.getHexStringFromBytes(status));

            }
            else
            {
                tbOutputAppendText("Transaction Log Status failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Transaction Log Status Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnExemptionStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] status = new byte[0];
            RETURN_CODE rt = IDT_Device.SharedController.emv_getExemptionLogStatus(ref status);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Exemption Log Status: " + "  \r\n", ident);
                string val = Common.getHexStringFromBytes(status);
                tbOutputAppendText("Version Number: " + val.Substring(0, 8) + "  \r\n", ident);
                tbOutputAppendText("Number of Records: " + val.Substring(8, 8) + "  \r\n", ident);
                tbOutputAppendText("Size of Record: " + val.Substring(16, 8) + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Exemption Log Status: " + Common.getHexStringFromBytes(status));

            }
            else
            {
                tbOutputAppendText("Exemption Log Status failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Exemption Log Status Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnClearLog_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_clearTransactionLog();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Clear Transaction Log Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Clear Transaction Log Successful");

            }
            else
            {
                tbOutputAppendText("Clear Transaction Log failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Clear Transaction Log Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveMajorConfig_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt =
                IDT_Device.SharedController.emv_setTerminalMajorConfiguration(comboBoxTermConfig.SelectedIndex + 1);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Major Config Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Set Terminal Major Config Successful");

            }
            else
            {
                tbOutputAppendText("Set Terminal Major Config failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Terminal Major Config Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnOnlineOK(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.ctls_displayOnlineAuthResult(true, null);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Display Online Result OK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Display Online Result OK Successful");

            }
            else
            {
                tbOutputAppendText("Display Online Result OK  failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Display Online Result OK  Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnOnlineNotOK(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.ctls_displayOnlineAuthResult(false, null);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Display Online Result OK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Display Online Result OK Successful");

            }
            else
            {
                tbOutputAppendText("Display Online Result OK  failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Display Online Result OK  Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void btnGetMajorConfig_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            int config = 0;
            RETURN_CODE rt = IDT_Device.SharedController.emv_getTerminalMajorConfiguration(ref config);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Kernel Major Config: " + config.ToString() + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Get Kernel Major Config Successful");

            }
            else
            {
                tbOutputAppendText("Get Kernel Major Config failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Kernel Major Config Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void btnSaveTermCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.ctls_setTerminalData(term);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Save Terminal failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveTermDEVICE_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.device_setTerminalData(term);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Save Terminal failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveCAPK_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] capk = Common.getByteArray(tbCAPKData.Text);
            RETURN_CODE rt = IDT_Device.SharedController.emv_setCAPK(capk);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Save CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveCAPKCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] capk = Common.getByteArray(tbCAPKData.Text);
            RETURN_CODE rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Save CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetrieveCAPK_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter RID/Index of CAPK to retrieve to retrieve",
                    "CAPK", "a000009999", -1, -1);
            if (input.Length == 0) return;

            byte[] capk = null;
            RETURN_CODE rt = IDT_Device.SharedController.emv_retrieveCAPK(Common.getByteArray(input), ref capk);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve CAPK Successful: " + "  \r\n" + Common.getHexStringFromBytes(capk) +
                                    "  \r\n", ident);
                System.Diagnostics.Debug.WriteLine("Retrieve CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRetrieveCAPKCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter RID/Index of CAPK to retrieve to retrieve",
                    "CAPK", "a000009999", -1, -1);
            if (input.Length == 0) return;
            byte[] capk = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_retrieveCAPK(Common.getByteArray(input), ref capk);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve CAPK Successful: " + "  \r\n" + Common.getHexStringFromBytes(capk) +
                                    "  \r\n", ident);
                System.Diagnostics.Debug.WriteLine("Retrieve CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveCAPK_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter RID/Index of CAPK to retrieve to remove",
                    "CAPK", "a000009999", -1, -1);
            if (input.Length == 0) return;
            RETURN_CODE rt = IDT_Device.SharedController.emv_removeCAPK(Common.getByteArray(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Remove CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveCAPKCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter RID/Index of CAPK to retrieve to remove",
                    "CAPK", "a000009999", -1, -1);
            if (input.Length == 0) return;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_removeCAPK(Common.getByteArray(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Remove CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnListCAPK_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] capk = null;
            RETURN_CODE rt = IDT_Device.SharedController.emv_retrieveCAPKList(ref capk);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List CAPK Command Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("List CAPK Command Successful");
                if (capk.Length > 0)
                {
                    for (int x = 0; x < capk.Length; x = x + 6)
                    {
                        byte[] thecapk = new byte[]
                            {capk[x], capk[x + 1], capk[x + 2], capk[x + 3], capk[x + 4], capk[x + 5]};
                        tbOutputAppendText(Common.getHexStringFromBytes(thecapk) + " \r\n", ident);
                    }


                }
                else
                {
                    tbOutputAppendText("No CAPKs Found  \r\n", ident);
                }
            }
            else
            {
                tbOutputAppendText("List CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnListCAPKCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] capk = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_retrieveCAPKList(ref capk);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List CAPK Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("List CAPK Successful");
                if (capk.Length > 0)
                {
                    for (int x = 0; x < capk.Length; x = x + 6)
                    {
                        byte[] thecapk = new byte[]
                            {capk[x], capk[x + 1], capk[x + 2], capk[x + 3], capk[x + 4], capk[x + 5]};
                        tbOutputAppendText(Common.getHexStringFromBytes(thecapk) + " \r\n", ident);
                    }


                }
            }
            else
            {
                tbOutputAppendText("List CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveAllCAPK_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            tbOutputAppendText("Please Wait. Removing All CAPK...\r\n", ident);
            RETURN_CODE rt = IDT_Device.SharedController.emv_removeAllCAPK();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove all CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove all CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Remove all CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove all CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnRemoveAllCAPKCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            tbOutputAppendText("Please Wait. Removing All CAPK...\r\n", ident);
            RETURN_CODE rt = IDT_Device.SharedController.ctls_removeAllCAPK();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove all CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove all CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Remove all CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove all CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void loadCTLSCAPKDisk()
        {
            string ident = getIdentValue();

            byte[] capk = null;
            RETURN_CODE rt = 0;
            loadSettings();
            capkDialog.InitialDirectory = _lastCAPK;
            if (capkDialog.ShowDialog() == DialogResult.OK)
            {
                _lastCAPK = capkDialog.InitialDirectory;
                saveSettings();

                foreach (String file in capkDialog.FileNames)
                {
                    try
                    {
                        string data = System.IO.File.ReadAllText(file);
                        capk = Common.getByteArray(data);

                        rt = IDT_Device.SharedController.ctls_setCAPK(capk);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            tbOutputAppendText(data.Substring(0, 12) + "  CAPK failed Error Code: " + "0x" +
                                                String.Format("{0:X}", (ushort)rt) + ": " +
                                                IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                            checkLastExtendedErrorCode(ident);
                        }
                        else
                        {
                            tbOutputAppendText("Sent CAPK:" + data.Substring(0, 12) + "  \r\n", ident);
                        }

                        Thread.Sleep(100);

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message);
                    }
                }
            }
        }

        private void loadCTLSCAPK()
        {
            string ident = getIdentValue();

            byte[] capk = Common.getByteArray(
                "a000009999e10101f8707b9bedf031e58a9f843631b90c90d80ed69500000003700099c5b70aa61b4f4c51b6f90b0e3bfb7a3ee0e7db41bc466888b3ec8e9977c762407ef1d79e0afb2823100a020c3e8020593db50e90dbeac18b78d13f96bb2f57eeddc30f256592417cdf739ca6804a10a29d2806e774bfa751f22cf3b65b38f37f91b4daf8aec9b803f7610e06ac9e6b");
            RETURN_CODE rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e20101c1056adce9e6f76ea77c89cb832f5a4817907a1a000000037000bd232e348b118eb3f6446ef4da6c3bac9b2ae510c5ad107d38343255d21c4bdf4952a42e92c633b1ce4bfec39afb6dfe147ecbb91d681dac15fb0e198e9a7e4636bdca107bcda3384fcb28b06afef90f099e7084511f3cc010d4343503e1e5a67264b4367daa9a3949499272e9b5022f");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e301011b795cbb0830e2c5231704fa57424d1c4e50f3e4000100017000bc01e12223e1a41e88bffa801093c5f8cec5cd05dbbdbb787ce87249e8808327c2d218991f97a1131e8a25b0122ed11e709c533e8886a1259addfdcbb396604d24e505a2d0b5dd0384fb0002a7a1eb39bc8a11339c7a9433a948337761be73bc497b8e58736da4636538ad282d3cd3db");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e40101ac8da3e12324d719c1d5c9e6e8580157196efeb9000000038000cbf2e40f0836c9a5e390a37be3b809bdf5d740cb1da38cfc05d5f8d6b7745b5e9a3fa6961e55ff20412108525e66b970f902f7ff4305dd832cd0763e3aa8b8173f84777100b1047bd1d744509312a0932ed25fed52a959430768ccd902fd8c8ad9123e6addb3f34b92e7924d729cb6473533ae2b2b55bf0e44964fdea8440117");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e50101ada2349afd118d55af782d37b64651af1ca61ee5000000038000d4fdae94dedbecc6d20d38b01e91826dc6954338379917b2bb8a6b36b5d3b0c5eda60b337448baffebcc3abdba869e8dadec6c870110c42f5aab90a18f4f867f72e3386ffc7e67e7ff94eba079e531b3cf329517e81c5dd9b3dc65db5f9043190be0be897e5fe48adf5d3bfa0585e076e554f26ec69814797f15669f4a255c13");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e601018aa4f4648f0dc62ab6aed92554ad1a831bafc9e4000100018000ebf9faecc3e5c315709694664775d3fbda5a504d89344dd920c55696e891d9ab622598a9d6ab8fbf35e4599cab7eb22f956992f8ab2e6535decb6b576fa0675f97c23dd4c374a66e6af419c9d204d0b9f93c08d789d63805660fbb629df1b488cfa1d7a13e9b729437eeafe718efa859348ba0d76812a99f31cd364f2a4fd42f");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fa01017f5acbb96b589f74cb959ed1c35bdb965c3f410600010001f800a4203e0c7beb27097b63c103c19fdcda671aea7f813065756f3b9b81810cbd4bc4dec548fbf1f3cdae51f847235cbf2c8badd8aca7c93bea3d44e80ed6a7b70e29622619db420accce07e1dd4e6c354f359fbdc9c5b70813926f77d827e52b19daf09bfae5274438bb8f61d17753c9ec0a8efa3b7e46f02692160d2653cdbcc71b7d48bd37968316eb444f6504b9421b7dd3035a2c117d8b1f76a8975440da9563618102397b881cef8ada7689edface32482a2dffed656e7f951db841da78368c6293bfc1053a86a845bfa6578e4b69f100b42b558fde1aecec6d250741bc783aa8a68a4261e7bb9246b10587a498d68dd955ce8b2b2433");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fb0101fc787db138f994a0c554cc6734eb3e48a55066cc0001000190009b170603a489c7546c45da57b8ffd1db2061240f0e8c6d1f9abdc6b265aa8911915c1a4eabd8d0ed4755d1b902ba06fe5a645b786cd241295517d44ef1a7c25d75afe0eb28066e4d69fee7abafdd5eeb230f14e402c9840825fa77ead12b5f1c5494701de1897f65fe6bf106d47545ebf70ce7c158068c61f0773534db742ab83c28038c1494f15905d0ad17cf1bd38d");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fc0101db50b5b0d966300760b1e42125277ba833b6523400010001f800b3296c91f4795bd97112606903407b6eff3ab39246e91095e51d17867da4ade59a48be2fe9b52710283d3d32260e2c7d247214c57d46aa6465e47e0a4b3ffaad8a7f6a190755bccfe3f3fb3989a9f6b1c9e1845bcccad6f20b1dac6033600234e81dac4153212b0f760c23099192aa6c4c9083beffd9a79d2a27b08fecc8e5d437d6c68550a839b1294151daba9d9cb2f160f60f749289f500c8c7f334bd20ebac4ab109cf3c182f1b781c7c097a7903530746c449b99e39e4db6493dd2a02e37c62ae8bc9a7470ecccf8dc06a18c33cd24b30d56f25d2755ce82aa4de4d2eaec07750a03db75ebd0d8ebc9f2a1d85a0d252eff40329be05");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fd0101fc505e4a83ff29a3b1bd28dabf52599b2ae9cb14000100019000c9485dbeb5e40415d1b397524f47685f306cfdc499d4e2e7d0cbaf222cfa8184bd111daeedc9cc6ec8540c3f7271ea9990119cc5c43180501d9f45252d6835053fae35696ae8cd67a325647449cf5e594da8f627209f7f03ae8d6dfc0db3e79e28e415df29a5b57d6814856cc30a96da5b8890363e507fcb2e283da1ebb5f18e8e24102b7d0192bb8e35a4f7cd05a435");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fe01018535f14cbd6b4ae5028618fab5ac1106549fd03c000100019000e76317965175a08bee510f58830e87b262c70d529803245fa8b88e0c753562de7aeb5a9e3e6c1a98e94d8db7c31407dac5d071e06b80b09e146f22db85f1d72d1ea18d22600032c6dd40e3714d5ada7de9d7d01e88391f893156d6f4bf13e9063559da0786de9bde6b1c9b0bb968edde07145abf877b931682ccb1fb800728724d04af241e2827e0fa1f62591914ff25");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004ff0101439eb23d8a71b99f879c1a1f1765252d840b9a74000100019000f69dbb5e15983eae3ccf31cf4e47098c2fc16f97a0c710f84777efa99622d86502b138728ab12e3481a84d20e014ad2d634d2836f27f294924b895a87f91f81b8169d4dfdad8d7cbd741804cd61b467c7a9acfeceb71188caa73a907547699d45c9c7d2098ac2966266417f665a46bdd012c097dbd33d1d11aff6ec8a9c0ad814a65b48262ca011636079a328c1aaeb7");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000065020101b973e9f377b419c36ac9696ed95ffb25c8020687000100018000bb7f51983fd8707fd6227c23def5d5377a5a737cef3c5252e578efe136df87b50473f9341f1640c8d258034e14c16993fce6c6b8c3ceeb65fc8fbcd8eb77b3b05ac7c4d09e0fa1ba2efe87d3184db6718ae41a7cad89b8dce0fe80ceb523d5d647f9db58a31d2e71ac677e67fa6e75820736c9893761ee4acd11f31dbdc349ef");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a0000000650301017dc435dbde093d1f0ad0bae0fea4dc12056413dc00000003f800c9e6c1f3c6949a8a42a91f8d0224132b2865e6d953a5b5a54cffb0412439d54aeba79e9b399a6c104684df3fb727c7f55984db7a450e6aa917e110a7f2343a0024d2785d9ebe09f601d592362fdb237700b567ba14bbe2a6d3d23cf1270b3dd822b5496549bf884948f55a0d308348c4b723bafb6a7f3975ac397cad3c5d0fc2d178716f5e8e79e75beb1c84fa202f80e68069a984e008706b30c212305456201540787925e86a8b28b129a11af204b387cb6ee43db53d15a46e13901bebd5cecf4854251d9e9875b16e82ad1c5938a972842c8f1a42ebb5ae5336b04ff3da8b8dfbe606fca8b9084ee05bf67950ba89897cd089f924dbcd");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003500101b769775668cacb5d22a647d1d993141edab7237b000100018000d11197590057b84196c2f4d11a8f3c05408f422a35d702f90106ea5b019bb28ae607aa9cdebcd0d81a38d48c7ebb0062d287369ec0c42124246ac30d80cd602ab7238d51084ded4698162c59d25eac1e66255b4db2352526ef0982c3b8ad3d1cce85b01db5788e75e09f44be7361366def9d1e1317b05e5d0ff5290f88a0db47");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003510101b9d248075a3f23b522fe45573e04374dc4995d71000000039000db5fa29d1fda8c1634b04dccff148abee63c772035c79851d3512107586e02a917f7c7e885e7c4a7d529710a145334ce67dc412cb1597b77aa2543b98d19cf2cb80c522bdbea0f1b113fa2c86216c8c610a2d58f29cf3355ceb1bd3ef410d1edd1f7ae0f16897979de28c6ef293e0a19282bd1d793f1331523fc71a228800468c01a3653d14c6b4851a5c029478e757f");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003530101ac213a2e0d2c0ca35ad0201323536d58097e4e5700000003f800bcd83721be52cccc4b6457321f22a7dc769f54eb8025913be804d9eabbfa19b3d7c5d3ca658d768caf57067eec83c7e6e9f81d0586703ed9dddadd20675d63424980b10eb364e81eb37db40ed100344c928886ff4ccc37203ee6106d5b59d1ac102e2cd2d7ac17f4d96c398e5fd993ecb4ffdf79b17547ff9fa2aa8eefd6cbda124cbb17a0f8528146387135e226b005a474b9062ff264d2ff8efa36814aa2950065b1b04c0a1ae9b2f69d4a4aa979d6ce95fee9485ed0a03aee9bd953e81cfd1ef6e814dfd3c2ce37aefa38c1f9877371e91d6a5eb59fdedf75d3325fa3ca66cdfba0e57146cc789818ff06be5fcc50abd362ae4b80996d");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a0000000039601017616e9ac8be014af88ca11a8fb17967b7394030e000000038000b74586d19a207be6627c5b0aafbc44a2ecf5a2942d3a26ce19c4ffaeee920521868922e893e7838225a3947a2614796fb2c0628ce8c11e3825a56d3b1bbaef783a5c6a81f36f8625395126fa983c5216d3166d48acde8a431212ff763a7f79d9edb7fed76b485de45beb829a3d4730848a366d3324c3027032ff8d16a1e44d8d");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003570101251a5f5de61cf28b5c6e2b5807c0644a01d46ff5000100016000942b7f2ba5ea307312b63df77c5243618acc2002bd7ecb74d821fe7bdc78bf28f49f74190ad9b23b9713b140ffec1fb429d93f56bdc7ade4ac075d75532c1e590b21874c7952f29b8c0f0c1ce3aeedc8da25343123e71dcf86c6998e15f756e3");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003580101753ed0aa23e4cd5abd69eae7904b684a34a57c2200010001c80099552c4a1ecd68a0260157fc4151b5992837445d3fc57365ca5692c87be358cdcdf2c92fb6837522842a48eb11cdffe2fd91770c7221e4af6207c2de4004c7dee1b6276dc62d52a87d2cd01fbf2dc4065db52824d2a2167a06d19e6a0f781071cdb2dd314cb94441d8dc0e936317b77bf06f5177f6c5aba3a3bc6aa30209c97260b7a1ad3a192c9b8cd1d153570afcc87c3cd681d13e997fe33b3963a0a1c79772acf991033e1b8397ad0341500e48a24770bc4cbe19d2ccf419504fdbf0389bc2f2fdcd4d44e61f");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a00000000354010106960618791a86d387301edd4a3baf2d34fef1b400010001f800c6ddc0b7645f7f16286ab7e4116655f56dd0c944766040dc68664dd973bd3bfd4c525bcbb95272b6b3ad9ba8860303ad08d9e8cc344a4070f4cfb9eeaf29c8a3460850c264cda39bbe3a7e7d08a69c31b5c8dd9f94ddbc9265758c0e7399adcf4362caee458d414c52b498274881b196dacca7273f687f2a65faeb809d4b2ac1d3d1efb4f6490322318bd296d153b307a3283ab4e5be6ebd910359a8565eb9c4360d24baaca3dbfe393f3d6c830d603c6fc1e83409dfcd80d3a33ba243813bbb4ceaf9cbab6b74b00116f72ab278a88a011d70071e06cab140646438d986d48281624b85b3b2ebb9a6ab3bf2178fcc3011e7caf24897ae7d");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000025600101894b8df19bdc691103c3b93979f5ee28c05888a7000100019000a8ee74edef3c0dca5102ff9b5707975ff67b60d64b5e7322d48de9d3bb6153f63512a091b606dd8fd5f6a14588324ef8827844c7ffc0bab2334ae5207770078b69cdc3f2c666cf69e28e16e1816714c4df313bef539cc01da9dd2d6f47de4f247c500b561c099166ad4fc16df12dfb684ac48d35cdd2c47a13a86a5a162306f64e33b092ab74eda71a4091d96e3daa47");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000025610101cccf27c49c15b2a9410ec6089223a3a01ea8433e00010001f80086c7254665e17ce6934df7d082569f208d1cc1ad8e9fb2fe23e3d7467be50b4f874f906adf2280ec9d204f6d10c037a23ce5fd8283c9ed47d1c669abdd7c1cb356c70bcdc44e5c8ae231555f7b786ac9c3155bcd51f28efbc1b33cc87277049219b2c890952736c4713487111678911d9f42e08074cf524e65d721d727f054e6b5e85ec92b3eb59ffee926dd6c314df555c94ad487a99b67cb7c7ba5e46a5b813ddb918b8e3e0423f4302a58686d1263c0baca9e82068c493289e3e6936eca5f9f77e06b0d6fbda718818b835020098c671c5dd7e9b8e8e841d2df32ee94a7f4748484ca44108ab241a5263ba1ff00d51360dddc749d30a1");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000152d00101de1bb8a37cddbceaab043aaef81634120349726d000100019000d05c2a09d09c9031366ec092bcac67d4b1b4f88b10005e1fc45c1b483ae7eb86ff0e884a19c0595a6c34f06386d776a21d620fc9f9c498adca00e66d129bcdd4789837b96dcc7f09da94ccac5ac7cfc07f4600df78e493dc1957deba3f4838a4b8bd4cefe4e4c6119085e5bb21077341c568a21d65d049d666807c39c401cdfee7f7f99b8f9cb34a8841ea62e83e8d63");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000152d10101ffda858cb2af08b79d750cc97fa6efe2ef228dda00010001f800a71af977c1079304d6dff3f665ab6db3fbdfa1b170287ac6d7bc0afcb7a202a4c815e1fc2e34f75a052564ee2148a39cd6b0f39cfaef95f0294a86c3198e349ff82eece633d50e5860a15082b4b342a90928024057dd51a2401d781b67ae7598d5d1ff26a441970a19a3a58011ca19284279a85567d3119264806caf761122a71fc0492ac8d8d42b036c394fc494e03b43600d7e02cb5267755ace64437cfa7b475ad40ddc93b8c9bcad63801fc492fd251640e41fd13f6e231f56f97283447ab44cbe11910db3c75243784aa9bdf57539c31b51c9f35bf8bc2495762881255478264b792bbdca6498777ae9120ed935bb3e8bea3eab13d9");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000333c001018b094d260bdf8bfc8b9a88b0c177a43fe2fae765000100019000c7cdb6f2a3fe80a8834cdddd326e1082aa2288f47c464d57b34718193431711a44119148055044cfe3313708bed0c98e1c589b0f53cf6d7e829fcd906d21a90fd4cb6baf13110c4685107c27e00981db29dc0ac186e6d701577f23865626244e1f9b2cd1ddfcb9e899b41f5084d8ccc178a7c3f4546cf93187106fab055a7ac67df62e778cb88823ba58cf7546c2b09f");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000333c10101b6372db9919f8c6c9c88e83d3c600a4ad8adc7a900010001f80092f083cbe46f8dcc0c04e498ba9952ba9d4c09c80dd277e579f07e45772846fa43dd3ab31cc6b08dd18695715949fb108e53a071d393a7fddbf9c5fb0b0507138797317480fc48d633ed38b401a451443ad7f15facda45a62abe24ff6343add0909ea8389348e54e26f842880d1a69f9214368ba30c18de5c5e0cb9253b5abc55fb6ef0a738d927494a30bbf82e340285363b6faa15673829dbb210e710da58ee9e578e7ce55dc812ab7d6dcce0e3b1ae179d664f3356eb951e3c91a1cbbf6a7ca8d0c7ec9c6af7a4941c5051099b9784e56c9162067b8c3b15c5fa4480a645cd2526a69c80ba8ef361be2aa9417defce35b62b0c9cf097d");
            rt = IDT_Device.SharedController.ctls_setCAPK(capk);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Load Default CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Default CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Default CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Default CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }


        private void loadCAPKDisk()
        {
            string ident = getIdentValue();

            byte[] capk = null;
            RETURN_CODE rt = 0;
            loadSettings();
            capkDialog.InitialDirectory = _lastCAPK;
            if (capkDialog.ShowDialog() == DialogResult.OK)
            {
                _lastCAPK = capkDialog.InitialDirectory;
                saveSettings();

                foreach (String file in capkDialog.FileNames)
                {
                    try
                    {
                        string data = System.IO.File.ReadAllText(file);
                        capk = Common.getByteArray(data);

                        rt = IDT_Device.SharedController.emv_setCAPK(capk);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            tbOutputAppendText(data.Substring(0, 12) + "  CAPK failed Error Code: " + "0x" +
                                                String.Format("{0:X}", (ushort)rt) + ": " +
                                                IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                            checkLastExtendedErrorCode(ident);
                        }
                        else
                        {
                            tbOutputAppendText("Sent CAPK:" + data.Substring(0, 12) + "  \r\n", ident);
                        }

                        Thread.Sleep(100);

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message);
                    }
                }
            }
        }


        private void button1_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            tbOutputAppendText("Please Wait. Loading Default CAPK...\r\n", ident);

            byte[] capk = Common.getByteArray(
                "a000009999e10101f8707b9bedf031e58a9f843631b90c90d80ed69500000003700099c5b70aa61b4f4c51b6f90b0e3bfb7a3ee0e7db41bc466888b3ec8e9977c762407ef1d79e0afb2823100a020c3e8020593db50e90dbeac18b78d13f96bb2f57eeddc30f256592417cdf739ca6804a10a29d2806e774bfa751f22cf3b65b38f37f91b4daf8aec9b803f7610e06ac9e6b");
            RETURN_CODE rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e20101c1056adce9e6f76ea77c89cb832f5a4817907a1a000000037000bd232e348b118eb3f6446ef4da6c3bac9b2ae510c5ad107d38343255d21c4bdf4952a42e92c633b1ce4bfec39afb6dfe147ecbb91d681dac15fb0e198e9a7e4636bdca107bcda3384fcb28b06afef90f099e7084511f3cc010d4343503e1e5a67264b4367daa9a3949499272e9b5022f");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e301011b795cbb0830e2c5231704fa57424d1c4e50f3e4000100017000bc01e12223e1a41e88bffa801093c5f8cec5cd05dbbdbb787ce87249e8808327c2d218991f97a1131e8a25b0122ed11e709c533e8886a1259addfdcbb396604d24e505a2d0b5dd0384fb0002a7a1eb39bc8a11339c7a9433a948337761be73bc497b8e58736da4636538ad282d3cd3db");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e40101ac8da3e12324d719c1d5c9e6e8580157196efeb9000000038000cbf2e40f0836c9a5e390a37be3b809bdf5d740cb1da38cfc05d5f8d6b7745b5e9a3fa6961e55ff20412108525e66b970f902f7ff4305dd832cd0763e3aa8b8173f84777100b1047bd1d744509312a0932ed25fed52a959430768ccd902fd8c8ad9123e6addb3f34b92e7924d729cb6473533ae2b2b55bf0e44964fdea8440117");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e50101ada2349afd118d55af782d37b64651af1ca61ee5000000038000d4fdae94dedbecc6d20d38b01e91826dc6954338379917b2bb8a6b36b5d3b0c5eda60b337448baffebcc3abdba869e8dadec6c870110c42f5aab90a18f4f867f72e3386ffc7e67e7ff94eba079e531b3cf329517e81c5dd9b3dc65db5f9043190be0be897e5fe48adf5d3bfa0585e076e554f26ec69814797f15669f4a255c13");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000009999e601018aa4f4648f0dc62ab6aed92554ad1a831bafc9e4000100018000ebf9faecc3e5c315709694664775d3fbda5a504d89344dd920c55696e891d9ab622598a9d6ab8fbf35e4599cab7eb22f956992f8ab2e6535decb6b576fa0675f97c23dd4c374a66e6af419c9d204d0b9f93c08d789d63805660fbb629df1b488cfa1d7a13e9b729437eeafe718efa859348ba0d76812a99f31cd364f2a4fd42f");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fa01017f5acbb96b589f74cb959ed1c35bdb965c3f410600010001f800a4203e0c7beb27097b63c103c19fdcda671aea7f813065756f3b9b81810cbd4bc4dec548fbf1f3cdae51f847235cbf2c8badd8aca7c93bea3d44e80ed6a7b70e29622619db420accce07e1dd4e6c354f359fbdc9c5b70813926f77d827e52b19daf09bfae5274438bb8f61d17753c9ec0a8efa3b7e46f02692160d2653cdbcc71b7d48bd37968316eb444f6504b9421b7dd3035a2c117d8b1f76a8975440da9563618102397b881cef8ada7689edface32482a2dffed656e7f951db841da78368c6293bfc1053a86a845bfa6578e4b69f100b42b558fde1aecec6d250741bc783aa8a68a4261e7bb9246b10587a498d68dd955ce8b2b2433");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fb0101fc787db138f994a0c554cc6734eb3e48a55066cc0001000190009b170603a489c7546c45da57b8ffd1db2061240f0e8c6d1f9abdc6b265aa8911915c1a4eabd8d0ed4755d1b902ba06fe5a645b786cd241295517d44ef1a7c25d75afe0eb28066e4d69fee7abafdd5eeb230f14e402c9840825fa77ead12b5f1c5494701de1897f65fe6bf106d47545ebf70ce7c158068c61f0773534db742ab83c28038c1494f15905d0ad17cf1bd38d");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fc0101db50b5b0d966300760b1e42125277ba833b6523400010001f800b3296c91f4795bd97112606903407b6eff3ab39246e91095e51d17867da4ade59a48be2fe9b52710283d3d32260e2c7d247214c57d46aa6465e47e0a4b3ffaad8a7f6a190755bccfe3f3fb3989a9f6b1c9e1845bcccad6f20b1dac6033600234e81dac4153212b0f760c23099192aa6c4c9083beffd9a79d2a27b08fecc8e5d437d6c68550a839b1294151daba9d9cb2f160f60f749289f500c8c7f334bd20ebac4ab109cf3c182f1b781c7c097a7903530746c449b99e39e4db6493dd2a02e37c62ae8bc9a7470ecccf8dc06a18c33cd24b30d56f25d2755ce82aa4de4d2eaec07750a03db75ebd0d8ebc9f2a1d85a0d252eff40329be05");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fd0101fc505e4a83ff29a3b1bd28dabf52599b2ae9cb14000100019000c9485dbeb5e40415d1b397524f47685f306cfdc499d4e2e7d0cbaf222cfa8184bd111daeedc9cc6ec8540c3f7271ea9990119cc5c43180501d9f45252d6835053fae35696ae8cd67a325647449cf5e594da8f627209f7f03ae8d6dfc0db3e79e28e415df29a5b57d6814856cc30a96da5b8890363e507fcb2e283da1ebb5f18e8e24102b7d0192bb8e35a4f7cd05a435");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004fe01018535f14cbd6b4ae5028618fab5ac1106549fd03c000100019000e76317965175a08bee510f58830e87b262c70d529803245fa8b88e0c753562de7aeb5a9e3e6c1a98e94d8db7c31407dac5d071e06b80b09e146f22db85f1d72d1ea18d22600032c6dd40e3714d5ada7de9d7d01e88391f893156d6f4bf13e9063559da0786de9bde6b1c9b0bb968edde07145abf877b931682ccb1fb800728724d04af241e2827e0fa1f62591914ff25");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000004ff0101439eb23d8a71b99f879c1a1f1765252d840b9a74000100019000f69dbb5e15983eae3ccf31cf4e47098c2fc16f97a0c710f84777efa99622d86502b138728ab12e3481a84d20e014ad2d634d2836f27f294924b895a87f91f81b8169d4dfdad8d7cbd741804cd61b467c7a9acfeceb71188caa73a907547699d45c9c7d2098ac2966266417f665a46bdd012c097dbd33d1d11aff6ec8a9c0ad814a65b48262ca011636079a328c1aaeb7");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000065020101b973e9f377b419c36ac9696ed95ffb25c8020687000100018000bb7f51983fd8707fd6227c23def5d5377a5a737cef3c5252e578efe136df87b50473f9341f1640c8d258034e14c16993fce6c6b8c3ceeb65fc8fbcd8eb77b3b05ac7c4d09e0fa1ba2efe87d3184db6718ae41a7cad89b8dce0fe80ceb523d5d647f9db58a31d2e71ac677e67fa6e75820736c9893761ee4acd11f31dbdc349ef");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a0000000650301017dc435dbde093d1f0ad0bae0fea4dc12056413dc00000003f800c9e6c1f3c6949a8a42a91f8d0224132b2865e6d953a5b5a54cffb0412439d54aeba79e9b399a6c104684df3fb727c7f55984db7a450e6aa917e110a7f2343a0024d2785d9ebe09f601d592362fdb237700b567ba14bbe2a6d3d23cf1270b3dd822b5496549bf884948f55a0d308348c4b723bafb6a7f3975ac397cad3c5d0fc2d178716f5e8e79e75beb1c84fa202f80e68069a984e008706b30c212305456201540787925e86a8b28b129a11af204b387cb6ee43db53d15a46e13901bebd5cecf4854251d9e9875b16e82ad1c5938a972842c8f1a42ebb5ae5336b04ff3da8b8dfbe606fca8b9084ee05bf67950ba89897cd089f924dbcd");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003500101b769775668cacb5d22a647d1d993141edab7237b000100018000d11197590057b84196c2f4d11a8f3c05408f422a35d702f90106ea5b019bb28ae607aa9cdebcd0d81a38d48c7ebb0062d287369ec0c42124246ac30d80cd602ab7238d51084ded4698162c59d25eac1e66255b4db2352526ef0982c3b8ad3d1cce85b01db5788e75e09f44be7361366def9d1e1317b05e5d0ff5290f88a0db47");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003510101b9d248075a3f23b522fe45573e04374dc4995d71000000039000db5fa29d1fda8c1634b04dccff148abee63c772035c79851d3512107586e02a917f7c7e885e7c4a7d529710a145334ce67dc412cb1597b77aa2543b98d19cf2cb80c522bdbea0f1b113fa2c86216c8c610a2d58f29cf3355ceb1bd3ef410d1edd1f7ae0f16897979de28c6ef293e0a19282bd1d793f1331523fc71a228800468c01a3653d14c6b4851a5c029478e757f");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003530101ac213a2e0d2c0ca35ad0201323536d58097e4e5700000003f800bcd83721be52cccc4b6457321f22a7dc769f54eb8025913be804d9eabbfa19b3d7c5d3ca658d768caf57067eec83c7e6e9f81d0586703ed9dddadd20675d63424980b10eb364e81eb37db40ed100344c928886ff4ccc37203ee6106d5b59d1ac102e2cd2d7ac17f4d96c398e5fd993ecb4ffdf79b17547ff9fa2aa8eefd6cbda124cbb17a0f8528146387135e226b005a474b9062ff264d2ff8efa36814aa2950065b1b04c0a1ae9b2f69d4a4aa979d6ce95fee9485ed0a03aee9bd953e81cfd1ef6e814dfd3c2ce37aefa38c1f9877371e91d6a5eb59fdedf75d3325fa3ca66cdfba0e57146cc789818ff06be5fcc50abd362ae4b80996d");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a0000000039601017616e9ac8be014af88ca11a8fb17967b7394030e000000038000b74586d19a207be6627c5b0aafbc44a2ecf5a2942d3a26ce19c4ffaeee920521868922e893e7838225a3947a2614796fb2c0628ce8c11e3825a56d3b1bbaef783a5c6a81f36f8625395126fa983c5216d3166d48acde8a431212ff763a7f79d9edb7fed76b485de45beb829a3d4730848a366d3324c3027032ff8d16a1e44d8d");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003570101251a5f5de61cf28b5c6e2b5807c0644a01d46ff5000100016000942b7f2ba5ea307312b63df77c5243618acc2002bd7ecb74d821fe7bdc78bf28f49f74190ad9b23b9713b140ffec1fb429d93f56bdc7ade4ac075d75532c1e590b21874c7952f29b8c0f0c1ce3aeedc8da25343123e71dcf86c6998e15f756e3");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000003580101753ed0aa23e4cd5abd69eae7904b684a34a57c2200010001c80099552c4a1ecd68a0260157fc4151b5992837445d3fc57365ca5692c87be358cdcdf2c92fb6837522842a48eb11cdffe2fd91770c7221e4af6207c2de4004c7dee1b6276dc62d52a87d2cd01fbf2dc4065db52824d2a2167a06d19e6a0f781071cdb2dd314cb94441d8dc0e936317b77bf06f5177f6c5aba3a3bc6aa30209c97260b7a1ad3a192c9b8cd1d153570afcc87c3cd681d13e997fe33b3963a0a1c79772acf991033e1b8397ad0341500e48a24770bc4cbe19d2ccf419504fdbf0389bc2f2fdcd4d44e61f");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a00000000354010106960618791a86d387301edd4a3baf2d34fef1b400010001f800c6ddc0b7645f7f16286ab7e4116655f56dd0c944766040dc68664dd973bd3bfd4c525bcbb95272b6b3ad9ba8860303ad08d9e8cc344a4070f4cfb9eeaf29c8a3460850c264cda39bbe3a7e7d08a69c31b5c8dd9f94ddbc9265758c0e7399adcf4362caee458d414c52b498274881b196dacca7273f687f2a65faeb809d4b2ac1d3d1efb4f6490322318bd296d153b307a3283ab4e5be6ebd910359a8565eb9c4360d24baaca3dbfe393f3d6c830d603c6fc1e83409dfcd80d3a33ba243813bbb4ceaf9cbab6b74b00116f72ab278a88a011d70071e06cab140646438d986d48281624b85b3b2ebb9a6ab3bf2178fcc3011e7caf24897ae7d");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000025600101894b8df19bdc691103c3b93979f5ee28c05888a7000100019000a8ee74edef3c0dca5102ff9b5707975ff67b60d64b5e7322d48de9d3bb6153f63512a091b606dd8fd5f6a14588324ef8827844c7ffc0bab2334ae5207770078b69cdc3f2c666cf69e28e16e1816714c4df313bef539cc01da9dd2d6f47de4f247c500b561c099166ad4fc16df12dfb684ac48d35cdd2c47a13a86a5a162306f64e33b092ab74eda71a4091d96e3daa47");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000025610101cccf27c49c15b2a9410ec6089223a3a01ea8433e00010001f80086c7254665e17ce6934df7d082569f208d1cc1ad8e9fb2fe23e3d7467be50b4f874f906adf2280ec9d204f6d10c037a23ce5fd8283c9ed47d1c669abdd7c1cb356c70bcdc44e5c8ae231555f7b786ac9c3155bcd51f28efbc1b33cc87277049219b2c890952736c4713487111678911d9f42e08074cf524e65d721d727f054e6b5e85ec92b3eb59ffee926dd6c314df555c94ad487a99b67cb7c7ba5e46a5b813ddb918b8e3e0423f4302a58686d1263c0baca9e82068c493289e3e6936eca5f9f77e06b0d6fbda718818b835020098c671c5dd7e9b8e8e841d2df32ee94a7f4748484ca44108ab241a5263ba1ff00d51360dddc749d30a1");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000152d00101de1bb8a37cddbceaab043aaef81634120349726d000100019000d05c2a09d09c9031366ec092bcac67d4b1b4f88b10005e1fc45c1b483ae7eb86ff0e884a19c0595a6c34f06386d776a21d620fc9f9c498adca00e66d129bcdd4789837b96dcc7f09da94ccac5ac7cfc07f4600df78e493dc1957deba3f4838a4b8bd4cefe4e4c6119085e5bb21077341c568a21d65d049d666807c39c401cdfee7f7f99b8f9cb34a8841ea62e83e8d63");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000152d10101ffda858cb2af08b79d750cc97fa6efe2ef228dda00010001f800a71af977c1079304d6dff3f665ab6db3fbdfa1b170287ac6d7bc0afcb7a202a4c815e1fc2e34f75a052564ee2148a39cd6b0f39cfaef95f0294a86c3198e349ff82eece633d50e5860a15082b4b342a90928024057dd51a2401d781b67ae7598d5d1ff26a441970a19a3a58011ca19284279a85567d3119264806caf761122a71fc0492ac8d8d42b036c394fc494e03b43600d7e02cb5267755ace64437cfa7b475ad40ddc93b8c9bcad63801fc492fd251640e41fd13f6e231f56f97283447ab44cbe11910db3c75243784aa9bdf57539c31b51c9f35bf8bc2495762881255478264b792bbdca6498777ae9120ed935bb3e8bea3eab13d9");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000333c001018b094d260bdf8bfc8b9a88b0c177a43fe2fae765000100019000c7cdb6f2a3fe80a8834cdddd326e1082aa2288f47c464d57b34718193431711a44119148055044cfe3313708bed0c98e1c589b0f53cf6d7e829fcd906d21a90fd4cb6baf13110c4685107c27e00981db29dc0ac186e6d701577f23865626244e1f9b2cd1ddfcb9e899b41f5084d8ccc178a7c3f4546cf93187106fab055a7ac67df62e778cb88823ba58cf7546c2b09f");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);
            capk = Common.getByteArray(
                "a000000333c10101b6372db9919f8c6c9c88e83d3c600a4ad8adc7a900010001f80092f083cbe46f8dcc0c04e498ba9952ba9d4c09c80dd277e579f07e45772846fa43dd3ab31cc6b08dd18695715949fb108e53a071d393a7fddbf9c5fb0b0507138797317480fc48d633ed38b401a451443ad7f15facda45a62abe24ff6343add0909ea8389348e54e26f842880d1a69f9214368ba30c18de5c5e0cb9253b5abc55fb6ef0a738d927494a30bbf82e340285363b6faa15673829dbb210e710da58ee9e578e7ce55dc812ab7d6dcce0e3b1ae179d664f3356eb951e3c91a1cbbf6a7ca8d0c7ec9c6af7a4941c5051099b9784e56c9162067b8c3b15c5fa4480a645cd2526a69c80ba8ef361be2aa9417defce35b62b0c9cf097d");
            rt = IDT_Device.SharedController.emv_setCAPK(capk);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Load Default CAPK Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Default CAPK Successful");

            }
            else
            {
                tbOutputAppendText("Default CAPK failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Default CAPK failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }


        private void startSwipeTransaction(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_startSwipeTransaction(60, Common.getByteArray(tbCRLList.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Start Swipe Transaction Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Start Swipe Transaction Successful");

            }
            else
            {
                tbOutputAppendText("Start Swipe Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start Swipe Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void startKeyedTransaction(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_startKeyedTransaction(60, keyedZip.Checked, keyedCVC.Checked, keyedAddress.Checked, keyedMod10.Checked, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Start Keyed Transaction Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Start Keyed Transaction Successful");

            }
            else
            {
                tbOutputAppendText("Start Keyed Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start Keyed Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }


        private void cancelSwipeTransaction(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_cancelTransaction(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Cancel Transaction Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Cancel Transaction Successful");

            }
            else
            {
                tbOutputAppendText("Cancel Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void resetMSRTerminalData(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_resetTerminalData(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Reset Terminal Data Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Reset Terminal Data Successful");

            }
            else
            {
                tbOutputAppendText("Reset Terminal Data failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Reset Terminal Data failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setMSRTerminalData(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setTerminalData(Common.getByteArray(tbCRLList.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Data Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Set Terminal Data Successful");

            }
            else
            {
                tbOutputAppendText("Set Terminal Data failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Terminal Data failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getMSRTerminalData(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter tag value to retrieve",
              "Tag", "DFEC09", -1, -1);
            if (input.Length == 0) return;
            byte[] tagValue = null;
            try
            {
                tagValue = Common.getByteArray(input);
            }
            catch
            {
                tbOutputAppendText("Invalid TLV Tag\r\n", ident);
                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.msr_getTerminalData(tagValue, ref tlv, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Retrieve Terminal Successful- TLV: " + "  \r\n" +
                                    Common.getHexStringFromBytes(tlv) + "  \r\n\r\nTag Values\r\n" + tlvToValues(tlv), ident);

                System.Diagnostics.Debug.WriteLine("Retrieve Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Retrieve Terminal failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }


        private void btnRemoveExc_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_removeException(Common.getByteArray(tbCRLList.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove Exception Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove Exception Successful");

            }
            else
            {
                tbOutputAppendText("Remove Exception failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove Exception failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnRemoveCRL_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_removeCRL(Common.getByteArray(tbCRLList.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove CRL Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove CRL Successful");

            }
            else
            {
                tbOutputAppendText("Remove CRL failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove CRL failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnListExc_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] crl = null;
            RETURN_CODE rt = IDT_Device.SharedController.emv_retrieveExceptionList(ref crl);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List Exceptions Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("List Exceptions Successful");
                if (crl != null && crl.Length > 0)
                {
                    for (int x = 0; x < crl.Length; x = x + 12)
                    {
                        byte[] thecrl = new byte[]
                        {
                            crl[x], crl[x + 1], crl[x + 2], crl[x + 3], crl[x + 4], crl[x + 5], crl[x + 6], crl[x + 7],
                            crl[x + 8], crl[x + 9], crl[x + 10], crl[x + 11]
                        };
                        tbOutputAppendText(Common.getHexStringFromBytes(thecrl) + " \r\n", ident);
                    }


                }
            }
            else
            {
                tbOutputAppendText("List Exceptions failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List Exceptions failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnListCRL_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] crl = null;
            RETURN_CODE rt = IDT_Device.SharedController.emv_retrieveCRLList(ref crl);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("List CRL Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("List CRL Successful");
                if (crl != null && crl.Length > 0)
                {
                    for (int x = 0; x < crl.Length; x = x + 9)
                    {
                        byte[] thecrl = new byte[]
                        {
                            crl[x], crl[x + 1], crl[x + 2], crl[x + 3], crl[x + 4], crl[x + 5], crl[x + 6], crl[x + 7],
                            crl[x + 8]
                        };
                        tbOutputAppendText(Common.getHexStringFromBytes(thecrl) + " \r\n", ident);
                    }


                }
            }
            else
            {
                tbOutputAppendText("List CRL failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List CRL failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveExc_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] crl = Common.getByteArray(tbCRLList.Text);

            RETURN_CODE rt = IDT_Device.SharedController.emv_setException(crl);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save Exception Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save Exception Successful");

            }
            else
            {
                tbOutputAppendText("Save Exception failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Exception failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSaveCRL_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] crl = Common.getByteArray(tbCRLList.Text);

            RETURN_CODE rt = IDT_Device.SharedController.emv_setCRL(crl);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Save CRL Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Save CRL Successful");

            }
            else
            {
                tbOutputAppendText("Save CRL failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save CRL failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void btnRemoveAllExp_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_removeAllExceptions();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove all Exceptions Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove all Exceptions Successful");

            }
            else
            {
                tbOutputAppendText("Remove all Exceptions failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove all Exceptions failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void btnRemoveAllCRL_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.emv_removeAllCRL();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove all CRL Successful:" + "  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Remove all CRL Successful");

            }
            else
            {
                tbOutputAppendText("Remove all CRL failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove all CRL failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void isConnected(object sender, EventArgs e)
        {

        }

        private void btnPingDevice_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_pingDevice(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Ping Device successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Ping Device successful");
            }
            else
            {
                tbOutputAppendText("Ping Device failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Ping Device failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnInterfaceControl_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt =
                IDT_Device.SharedController.device_controlUserInterface(Common.getByteArray(tbInterfaceControl.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Interface Control successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Interface Control successful");
            }
            else
            {
                tbOutputAppendText("Interface Control Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Interface Control Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void continueBooting()
        {
            string ident = getIdentValue();

            byte[] response = null;
            RETURN_CODE rt = 0;

            rt = IDT_Device.SharedController.device_sendVivoCommandP2_ext(0x77,
                0x06, null, ref response,
                Convert.ToInt32(tbTimeoutNeo.Text), cbNoResponseNeo.Checked);


            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (response != null)
                    tbOutputAppendText("Continue Boot Command successful:" + Common.getHexStringFromBytes(response) +
                                        "\r\n", ident);
                else tbOutputAppendText("Continue Boot Command successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Send P2 Command");
            }
            else
            {
                tbOutputAppendText("Continue Boot Command Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Continue Boot Command Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnP2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] response = null;
            RETURN_CODE rt = 0;
            if (tbp2cmd.Text.Length != 2 || tbp2sub.Text.Length != 2)
            {
                tbOutputAppendText("Invalid Parameters\r\n", ident);
                return;
            }

            if (v2.Checked)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2_ext(Common.getByteArray(tbp2cmd.Text)[0],
                    Common.getByteArray(tbp2sub.Text)[0], Common.getByteArray(tbp2data.Text), ref response,
                    Convert.ToInt32(tbTimeoutNeo.Text), cbNoResponseNeo.Checked);
            }
            else if (v3.Checked)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP3_ext(Common.getByteArray(tbp2cmd.Text)[0],
                    Common.getByteArray(tbp2sub.Text)[0], Common.getByteArray(tbp2data.Text), ref response,
                    Convert.ToInt32(tbTimeoutNeo.Text), cbNoResponseNeo.Checked);
            }
            else if (v4.Checked)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP4_ext(Common.getByteArray(tbp2cmd.Text)[0],
                    Common.getByteArray(tbp2sub.Text)[0], Common.getByteArray(tbp2data.Text), ref response,
                    Convert.ToInt32(tbTimeoutNeo.Text), cbNoResponseNeo.Checked);
            }

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (response != null)
                    tbOutputAppendText("Send P2 Command successful:" + Common.getHexStringFromBytes(response) +
                                        "\r\n", ident);
                else tbOutputAppendText("Send P2 Command successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Send P2 Command");
            }
            else
            {
                tbOutputAppendText("Send P2 Command Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Send P2 Command Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetAllConfigGroups_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            byte[][] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_getAllConfigurationGroups(ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Get All Configs Group Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Get All Configs Group Successful");
                if (tlv != null && tlv.Count() > 0)
                {
                    foreach (byte[] b in tlv)
                    {
                        Dictionary<string, string> dict = Common.processTLVUnencrypted(b);
                        int group = 0;
                        if (dict.ContainsKey("DFEE2D"))
                        {
                            group = Convert.ToInt32(dict["DFEE2D"], 16);
                        }

                        if (dict.ContainsKey("FFE4"))
                        {
                            group = Convert.ToInt32(dict["FFE4"], 16);
                        }

                        tbOutputAppendText(" Config Group , Group number : " + group +
                                            "\r\n===================\r\n\r\n", ident);
                        tbOutputAppendText(Common.getHexStringFromBytes(b) + " \r\n", ident);
                        tbOutputAppendText(" --------------\r\n", ident);
                        tbOutputAppendText(tlvToValues(b), ident);
                        tbOutputAppendText(" ===================\r\n\r\n", ident);
                    }
                }
            }
            else
            {
                tbOutputAppendText("Get All Config Groups failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get All Config Groups failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnRemoveAllConfigGroups_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            byte[][] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_getAllConfigurationGroups(ref tlv);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Removing All Configuration Groups Successful  \r\n", ident);
                System.Diagnostics.Debug.WriteLine("Removing Configuration Group Successful");
                if (tlv != null && tlv.Count() > 0)
                {
                    foreach (byte[] b in tlv)
                    {
                        Dictionary<string, string> dict = Common.processTLVUnencrypted(b);
                        int group = 0;
                        if (dict.ContainsKey("FFE4"))
                        {
                            group = Convert.ToInt32(dict["FFE4"], 16);
                        }

                        if (dict.ContainsKey("DFEE2D"))
                        {
                            group = Convert.ToInt32(dict["DFEE2D"], 16);
                        }

                        if (group != 0)
                        {
                            tbOutputAppendText("Removing Configuration Groups " + group + "...", ident);
                            RETURN_CODE rt1 = IDT_Device.SharedController.ctls_removeConfigurationGroup(group);
                            if (rt1 == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                            {
                                tbOutputAppendText("DONE\r\n\r\n", ident);
                                tbOutputAppendText("Remove Configuration Groups Successful: " + group.ToString(), ident);
                            }
                            else
                            {
                                tbOutputAppendText("FAILED\r\n", ident);
                                tbOutputAppendText("Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt1) +
                                                    ": " + IDTechSDK.errorCode.getErrorString(rt1) + "\r\n\r\n", ident);
                                checkLastExtendedErrorCode(ident);
                                System.Diagnostics.Debug.WriteLine(
                                    "Remove Configuration Groups failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt));
                            }
                        }
                    }
                }
            }
            else
            {
                tbOutputAppendText("Removing Configuration Group failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Removing Configuration Group failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
            //if (!IncrementProgress()) return;

        }


        private void btnRemoveConfigGroups_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter configuration group to retrieve",
                "Group", "1", -1, -1);
            if (input.Length == 0) return;

            RETURN_CODE rt = IDT_Device.SharedController.ctls_removeConfigurationGroup(Convert.ToInt32(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Remove Config Group Successful  \r\n", ident);


            }
            else
            {
                tbOutputAppendText("Remove Config Group failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get All Connfig Group failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnResetConfigGroups_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter configuration group to retrieve",
                "Group", "0", -1, -1);
            if (input.Length == 0) return;

            RETURN_CODE rt = IDT_Device.SharedController.ctls_resetConfigurationGroup(Convert.ToInt32(input));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Reset Config Group Successful  \r\n", ident);


            }
            else
            {
                tbOutputAppendText("Reset Config Group failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get All Connfig Group failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnGetConfigGroup_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter configuration group to retrieve",
                "Group", "0", -1, -1);
            if (input.Length == 0) return;

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_getConfigurationGroup(Convert.ToInt32(input), ref tlv);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Get Config Group Successful  \r\n", ident);

                System.Diagnostics.Debug.WriteLine("Get Config Group Successful");
                if (tlv != null)
                {
                    tbOutputAppendText(" Config Group \r\n===================\r\n\r\n", ident);

                    tbOutputAppendText(Common.getHexStringFromBytes(tlv) + " \r\n", ident);
                    tbOutputAppendText(" --------------\r\n", ident);
                    tbOutputAppendText(tlvToValues(tlv), ident);
                    tbOutputAppendText(" ===================\r\n\r\n", ident);
                }

            }
            else
            {
                tbOutputAppendText("Get Connfig Group failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get All Connfig Group failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnBeep_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = 0;

            if (IDT_Device.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_AUGUSTA &&
                IDT_Device.getProtocolType() != DEVICE_PROTOCOL_Types.DEVICE_PROTOCOL_KB)
                rt = IDT_Device.SharedController.device_controlBeep(1, 4000, 3000);
            else
                rt = IDT_Device.SharedController.device_sendBeep(3);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Beep Command successful:" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Beep Control successful");
            }
            else
            {
                tbOutputAppendText("Beep Control Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Beep Control Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnStartCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte[] additionalTags = Common.getByteArray(ctlsTags.Text);
            pinMode = false;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_startTransaction(Convert.ToDouble(ctlsAmt.Text), 0, 2, 0,
                30, additionalTags, false, (fastEMV1.Checked || fastemv2.Checked));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS || rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
            {
                tbOutputAppendText("Start CTLS Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Start CTLS Successful");
            }
            else
            {
                tbOutputAppendText("Start CTLS failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start CTLS failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void setTracks()
        {

            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox(
                    "Please enter Track Choice\n0=All Tracks\n1=Track 1\n2=Track 2\n3=Track 1 + Track 2\n4=Track 3\n5=Track 1 + Track 3\n6=Track 2 + Track 3\n7=Track 1 + Track 2 + Track 3",
                    "Track Choice", "0", -1, -1);
            int selection = -1;
            try
            {
                selection = Convert.ToInt32(input);
            }
            catch
            {
                tbOutputAppendText("Invalid Choice\r\n", ident);
                return;
            }

            if (selection < 0 || selection > 7)
            {
                tbOutputAppendText("Invalid Choice\r\n", ident);
                return;
            }


            RETURN_CODE rt = IDT_Device.SharedController.msr_setMSRTrack(selection, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Track Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Start Transaction Successful");
            }
            else
            {
                tbOutputAppendText("Set Track failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Track failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getTracks()
        {


            int selection = 0;


            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_getMSRTrack(ref selection, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Track Successful:  " + selection.ToString() + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Track Successful:  " + selection.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Track failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Track failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnStartAll_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();
            string tags = tbAdditionalTags.Text.ToUpper();
            if (IDT_Device._deviceType == IDT_DEVICE_Types.IDT_DEVICE_NEO2 && !fastEMV1.Checked && !fastemv2.Checked && tags.IndexOf("DFEF3701") == -1)
            {
                string input = Microsoft.VisualBasic.Interaction.InputBox(
                    "Please enter Interface Choice\n1=MSR\n2=Contactless\n3=MSR+Contactless\n4=Contact\n5=Contact+MSR\n6=Contact+Contactless\n7=Contact+MSR+Contactless",
                    "Interface", "7", -1, -1);
                int selection = 0;
                try
                {
                    selection = Convert.ToInt32(input);
                }
                catch
                {

                }

                if (selection < 1 || selection > 7)
                {
                    tbOutputAppendText("Invalid Interface\r\n", ident);
                    return;
                }


                tags = tags + "DFEF37010" + selection.ToString();


            }

            byte[] additionalTags = Common.getByteArray(tags);
            pinMode = false;
            RETURN_CODE rt = IDT_Device.SharedController.device_startTransaction(Convert.ToDouble(tbAmount.Text), 0, 2,
                0, 180, additionalTags, null, false, 0, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS || rt == RETURN_CODE.RETURN_CODE_P2_OK_AND_HAVE_NEXT_COMMAND)
            {
                tbOutputAppendText("Start Transaction Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Start Transaction Successful");
            }
            else
            {
                tbOutputAppendText("Start Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnCancelCTLS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.ctls_cancelTransaction();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Cancel Transaction Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction Successful");
            }
            else
            {
                tbOutputAppendText("Cancel Transaction failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Cancel Transaction failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnBurstModeOn_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_setBurstMode(1);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Burst Mode On Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Burst Mode On Successful");
            }
            else
            {
                tbOutputAppendText("Set Burst Mode On failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Burst Mode On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnBurstModeOff_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setBurstMode(0);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Burst Mode Off Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Burst Mode On Successful");
            }
            else
            {
                tbOutputAppendText("Set Burst Mode Off failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Burst Mode On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnAutoPoll_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setPollMode(0);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Poll Mode Auto Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Poll Mode Auto Successful");
            }
            else
            {
                tbOutputAppendText("Set Poll Mode Auto failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Poll Mode Auto failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setPollMode(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter Poll Mode\r\n", "Poll Mode",
                    "", -1, -1);
            byte val = 0;
            try
            {
                val = Convert.ToByte(input);
            }
            catch
            {
                tbOutputAppendText("Invalid Entry\r\n", ident);
                return;
            }

            if (val < 0 || val > 4)
            {
                tbOutputAppendText("Invalid Entry\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_setPollMode(val);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Poll Mode Auto Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Poll Mode Auto Successful");
            }
            else
            {
                tbOutputAppendText("Set Poll Mode Auto failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Poll Mode Auto failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getPollMode(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            byte mode = 0;
            RETURN_CODE rt = IDT_Device.SharedController.device_getPollMode(ref mode);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Poll Mode Auto Successful = " + mode.ToString() + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Poll Mode Auto Successful");
            }
            else
            {
                tbOutputAppendText("Get Poll Mode Auto failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Poll Mode Auto failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnPollOnDemand_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setPollMode(1);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Poll On Demand Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Poll On Demand Successful");
            }
            else
            {
                tbOutputAppendText("Poll On Demand failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Poll On Demand failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }




        private void UniversalSDKDemo_Activated(object sender, EventArgs e)
        {
            spBDK.Text = IDT_Device.Spectrum_BDK;
            spUID.Text = IDT_Device.Spectrum_UID;
        }

        private void btnBDK_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();


            IDT_Device.Spectrum_BDK = spBDK.Text;

            tbOutputAppendText("BDK set Successful\r\n", ident);
            System.Diagnostics.Debug.WriteLine("BDK set Successful");

        }

        private void btnUID_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            SpectrumInfo info = new SpectrumInfo();
            RETURN_CODE rt = IDT_Device.SharedController.device_setUID(spUID.Text, 2, ref info);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("UID set Successful\r\nFirmware: " + info.firmwareVersion + "\r\nApplication: " +
                                    info.applicationVersion + "\r\nMSR: " + info.msrHead + "\r\nHardware: " +
                                    info.hardwareVersion + "\r\nSerial Number: " + info.serialNumber +
                                    "\r\nKey Mode: " + info.keyType.ToString() + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("UID set Successful");
            }
            else
            {
                tbOutputAppendText("UID set failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("UID set failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        //Added because of ConfigUtility
        private void getProductType()
        {
            string ident = getIdentValue();

            byte[] type = new byte[3];
            RETURN_CODE rt = IDT_Device.SharedController.device_getProductType(ref type);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                string name = Common.getProductName(type);
                tbOutputAppendText("Get Product Type Successful: " + name + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Product Type Successful");
            }
            else
            {
                tbOutputAppendText("Get Product Type failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Product Type failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void getProcessorType()
        {
            string ident = getIdentValue();

            byte[] type = new byte[2];
            RETURN_CODE rt = IDT_Device.SharedController.device_getProcessorType(ref type);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                string name = "";
                if (type[0] == 0x45)
                {
                    name = "ARM7 / LPC21xx";
                }
                else if (type[0] == 0x4D)
                {
                    name = "ARM Cortex-M4/ K21 Family";
                }
                else if (type[0] == 0x4E)
                {
                    name = "ARM Cortex-M4/ K81 Family";
                }
                else
                {
                    name = "name unknown";
                }

                tbOutputAppendText("Get Processor Type Successful: " + name + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Processor Type Successful");
            }
            else
            {
                tbOutputAppendText("Get Processor Type failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Processor Type failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getHardwareInfor()
        {
            string ident = getIdentValue();

            string ascii = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_getHardwareInfor(ref ascii);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                string name = getHardwareDes(ascii);
                tbOutputAppendText("Get Hardware Information Successful: " + name + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Hardware Information Successful");
            }
            else
            {
                tbOutputAppendText("Get Hardware Information failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Hardware Information failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private static string getHardwareDes(string ascii)
        {
            if (ascii == null) return "Unknown";
            switch (ascii)
            {
                case "HW,VPVendi<CR> < LF > K21F Rev9": return "Vendi";
                case "HW,VP3300 Audio Jack<CR> < LF > K21F Rev9": return "Unipay III";
                case "HW,VPUnipay1.5<CR><LF>K21F Rev9": return "UniPay 1.5 TTK";
                case "HW,VP3300 USB<CR><LF>K21F Rev9": return "VP3300 USB, VP3300 USB OEM ";
                case "HW,VP3300 USB-E<CR><LF>K21F Rev9": return "VP3300 USB-E";
                case "HW,VP3300 USB-C<CR><LF>K21F Rev9": return "VP3300 USB-C";
                case "HW,VPVP3300 Bluetooth<CR><LF>K21F Rev9": return "VP3300 Bluetooth ";
                case "HW,.VP6300<CR><LF>K81F.Rev4": return "VP6300";
            }

            return ascii;
        }

        private void getUIDofMCU()
        {
            string ident = getIdentValue();

            string uid = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_getUIDofMCU(ref uid);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get UID Successful: " + uid + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get UID Successful");
            }
            else
            {
                tbOutputAppendText("Get UID failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get UID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void getModuleVer()
        {
            string ident = getIdentValue();
            string moduleVer = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_getModuleVer(ref moduleVer);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Module Version Information Successful: " + moduleVer + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Module Version Information Successful");
            }
            else
            {
                tbOutputAppendText("Get Module Version Information failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Module Version Information failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getUsbBootLoader()
        {
            string ident = getIdentValue();

            string bootLoader = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_getUsbBootLoader(ref bootLoader);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get USB Boot Loader Information Successful: " + bootLoader + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get USB Boot Loader Information Successful");
            }
            else
            {
                tbOutputAppendText("Get USB Boot Loader Information failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get USB Boot Loader Information failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getRemoteKeyInjectionTO()
        {
            string ident = getIdentValue();

            int timeout = 0;
            RETURN_CODE rt = IDT_Device.SharedController.device_getRemoteKeyInjectionTO(ref timeout);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Remote Key Injection Timeout Successful: " + timeout + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Remote Key Injection Timeout Successful");
            }
            else
            {
                tbOutputAppendText("Get Remote Key Injection Timeout failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Remote Key Injection Timeout failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getCashTranRiskPara()
        {
            string ident = getIdentValue();
            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getCashTranRiskPara(ref tlv);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Cash Transaction Reader Risk Parameters Successful: " +
                                    Common.getHexStringFromBytes(tlv) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Cash Transaction Reader Risk Parameters Successful");
            }
            else
            {
                tbOutputAppendText("Get Cash Transaction Reader Risk Parameters failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Cash Transaction Reader Risk Parameters failed Error Code: " +
                                                   "0x" + String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getDrlReaderRiskPara()
        {
            string ident = getIdentValue();

            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter DRL index", "index", "01", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No DRL index specified.  \r\n", ident);
                return;
            }

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getDrlReaderRiskPara(Convert.ToByte(input), ref tlv);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get DRL Reader Risk Parameters Successful: " + Common.getHexStringFromBytes(tlv) +
                                    "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get DRL Reader Risk Parameters Successful");
            }
            else
            {
                tbOutputAppendText("Get DRL Reader Risk Parameters failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get DRL Reader Risk Parameters failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getMsrSecurePar()
        {
            string ident = getIdentValue();

            byte[] tlv = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getMsrSecurePar(true, false, false, false, ref tlv);

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get MSR Secure Parameters Successful: " + Common.getHexStringFromBytes(tlv) +
                                    "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Secure Parameters Successful");
            }
            else
            {
                tbOutputAppendText("Get MSR Secure Parameters failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Secure Parameters failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }
        //Added end


        // State object for receiving data from remote device.  
        public class StateObject
        {
            // Client socket.  
            public Socket workSocket = null;

            // Size of receive buffer.  
            public const int BufferSize = 256;

            // Receive buffer.  
            public byte[] buffer = new byte[BufferSize];

            // Received data string.  
            public StringBuilder sb = new StringBuilder();
        }


        // The port number for the remote device.  
        private const int port = 1025;

        // ManualResetEvent instances signal completion.  
        private static ManualResetEvent connectDone =
            new ManualResetEvent(false);

        private static ManualResetEvent sendDone =
            new ManualResetEvent(false);

        private static ManualResetEvent receiveDone =
            new ManualResetEvent(false);

        // The response from the remote device.  
        private static String response = String.Empty;

        private static void StartClient()
        {
            // Connect to a remote device.  
            try
            {
                // Establish the remote endpoint for the socket.  
                // The name of the   
                // remote device is "host.contoso.com".  
                IPAddress ipAddress = new IPAddress(1646398474);
                IPEndPoint remoteEP = new IPEndPoint(ipAddress, port);

                // Create a TCP/IP socket.  
                Socket client = new Socket(ipAddress.AddressFamily,
                    SocketType.Stream, ProtocolType.Tcp);

                // Connect to the remote endpoint.  
                client.BeginConnect(remoteEP,
                    new AsyncCallback(ConnectCallback), client);
                connectDone.WaitOne();

                // Send test data to the remote device.  
                Send(client, Common.getByteArray("5669564f74656368320029000000dea0"));
                sendDone.WaitOne();

                // Receive the response from the remote device.  
                Receive(client);
                receiveDone.WaitOne();

                // Write the response to the console.  
                Debug.WriteLine("Response received : {0}", response);

                // Release the socket.  
                client.Shutdown(SocketShutdown.Both);
                client.Close();

            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }
        }

        private static void ConnectCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the socket from the state object.  
                Socket client = (Socket)ar.AsyncState;

                // Complete the connection.  
                client.EndConnect(ar);

                Debug.WriteLine("Socket connected to {0}",
                    client.RemoteEndPoint.ToString());

                // Signal that the connection has been made.  
                connectDone.Set();
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }
        }

        private static void Receive(Socket client)
        {
            try
            {
                // Create the state object.  
                StateObject state = new StateObject();
                state.workSocket = client;

                // Begin receiving the data from the remote device.  
                client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                    new AsyncCallback(ReceiveCallback), state);
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }
        }

        private static void ReceiveCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the state object and the client socket   
                // from the asynchronous state object.  
                StateObject state = (StateObject)ar.AsyncState;
                Socket client = state.workSocket;

                // Read data from the remote device.  
                // int bytesRead = client.EndReceive(ar);

                SocketError errorCode;
                int bytesRead = client.EndReceive(ar, out errorCode);
                if (errorCode != SocketError.Success)
                {
                    bytesRead = 0;
                }

                if (bytesRead > 0)
                {
                    // There might be more data, so store the data received so far.  
                    state.sb.Append(Common.getHexStringFromBytes(state.buffer));

                    // Get the rest of the data.  
                    client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                        new AsyncCallback(ReceiveCallback), state);
                }
                else
                {
                    // All the data has arrived; put it in response.  
                    if (state.sb.Length > 1)
                    {
                        response = state.sb.ToString();
                    }

                    // Signal that all bytes have been received.  
                    receiveDone.Set();
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }
        }

        private static void Send(Socket client, byte[] byteData)
        {
            // Convert the string data to byte data using ASCII encoding.  
            // byte[] byteData = Encoding.ASCII.GetBytes(data);

            // Begin sending the data to the remote device.  
            client.BeginSend(byteData, 0, byteData.Length, 0,
                new AsyncCallback(SendCallback), client);
        }

        private static void SendCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the socket from the state object.  
                Socket client = (Socket)ar.AsyncState;

                // Complete sending the data to the remote device.  
                int bytesSent = client.EndSend(ar);
                Debug.WriteLine("Sent {0} bytes to server.", bytesSent);

                // Signal that all bytes have been sent.  
                sendDone.Set();
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }
        }







        private void btnCloseSerial_Click(object sender, EventArgs e)
        {
            if (connectedDevicesList.SelectedItem != null)
            {
                Profile.closeDevice((string)connectedDevicesList.SelectedItem);
                refreshDevices();
            }
            else
            {
                MessageBox.Show("No device selected that can be disconnected.", "No Device", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }



        private void btnLEDOn_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_controlLED_ICC(1, 500);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set ICC LED On Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set ICC LED On Successful");
            }
            else
            {
                tbOutputAppendText("Set ICC LED On failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set ICC LED On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnSetBaud_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            int index = cbsetBaud.SelectedIndex;
            if (index == 0 || index == 4)
            {
                tbOutputAppendText("Invalid Baud Rate Selected\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setBaudRate(index + 1);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Baud Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Baud Successful");
            }
            else
            {
                tbOutputAppendText("Set Baud failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Baud failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGetBaud_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            int index = 0;
            RETURN_CODE rt = IDT_Device.SharedController.config_getBaudRate(ref index);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                switch (index)
                {
                    case 2:
                    tbOutputAppendText("Baud Rate 2400\r\n", ident);
                    break;

                    case 3:
                    tbOutputAppendText("Baud Rate 4800\r\n", ident);
                    break;

                    case 4:
                    tbOutputAppendText("Baud Rate 9600\r\n", ident);
                    break;

                    case 6:
                    tbOutputAppendText("Baud Rate 19200\r\n", ident);
                    break;

                    case 7:
                    tbOutputAppendText("Baud Rate 38400\r\n", ident);
                    break;

                    case 9:
                    tbOutputAppendText("Baud Rate 115200\r\n", ident);
                    break;

                }
            }
            else
            {
                tbOutputAppendText("Get Baud failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Baud failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void btnRetrieveTransactionResult_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            IDTTransactionData cardData = null;



            RETURN_CODE rt =
                    IDT_Device.SharedController.emv_retrieveTransactionResult(Common.getByteArray(tbRetrieveTags.Text),
                        ref cardData);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && cardData != null)
            {
                String text = "";
                if (cardData.emv_unencryptedTags != null)
                {
                    if (cardData.emv_unencryptedTags.Length > 0)
                    {
                        text += "\r\n======================== \r\n";

                        text += "\r\nUnencrypted Tags: \r\n";
                        text += Common.getHexStringFromBytes(cardData.emv_unencryptedTags) + "\r\n\r\n";
                        text += tlvToValues(cardData.emv_unencryptedTags);
                        text += "\r\n======================== \r\n";
                    }

                }

                if (cardData.emv_encryptedTags != null)
                {
                    if (cardData.emv_encryptedTags.Length > 0)
                    {
                        text += "\r\n======================== \r\n";
                        text += "\r\nEncrypted Tags: \r\n";
                        text += Common.getHexStringFromBytes(cardData.emv_encryptedTags) + "\r\n\r\n";
                        text += tlvToValues(cardData.emv_encryptedTags);
                        text += "\r\n======================== \r\n";

                    }

                }

                if (cardData.emv_maskedTags != null)
                {
                    if (cardData.emv_maskedTags.Length > 0)
                    {
                        text += "\r\n======================== \r\n";
                        text += "\r\nMasked Tags: \r\n";
                        text += Common.getHexStringFromBytes(cardData.emv_maskedTags) + "\r\n\r\n";
                        text += tlvToValues(cardData.emv_maskedTags);
                        text += "\r\n======================== \r\n";

                    }

                }

                tbOutputAppendText(text, ident);
            }
            else
            {
                tbOutputAppendText("Retrieve EMV Results failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Retrieve EMV Results failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnLEDOff_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_controlLED_ICC(0, 0);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set ICC LED Off Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set ICC LED On Successful");
            }
            else
            {
                tbOutputAppendText("Set ICC LED Off failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set ICC LED On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnLEDBlink_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_controlLED_ICC(2, 500);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set ICC LED Blink Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set ICC LED On Successful");
            }
            else
            {
                tbOutputAppendText("Set ICC LED Blink failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set ICC LED On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void btngetDebitCredit(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = "";
            string currency = null;
            string amount = null;
            input = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter amount to display without currency symbol. Will use $", "Amount", "1.00", -1, -1);

            if (input.Length > 0)
            {
                currency = "¥";
                amount = input;
            }

            RETURN_CODE rt = IDT_Device.SharedController.pin_promptCreditDebit(currency, amount, 20);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Prompt Credit/Debit Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Prompt Credit/Debit Executed Successful");
            }
            else
            {
                tbOutputAppendText("Prompt Credit/Debit failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Prompt Credit/Debit failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEncryptedPIN_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = "0";
            if (lastEncryptAES) input = "4";

            input = Microsoft.VisualBasic.Interaction.InputBox("Please enter PIN Block type.", "PIN Block", "0", -1,
                -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No PIN Block specified.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.pin_getEncryptedOnlinePIN(Convert.ToInt32(input), 4);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enter Pin Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed Successful");
            }
            else
            {
                tbOutputAppendText("Enter Pin Executed failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEncryptedPIN_Click2(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.pin_getEncryptedPIN(1, "4111111111111111", "Enter PIN", 30);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enter Pin Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed Successful");
            }
            else
            {
                tbOutputAppendText("Enter Pin Executed failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEncryptedPIN3_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();

            if (tbTimeout.Text.Length == 0) tbTimeout.Text = "0";
            try
            {
                Convert.ToInt32(tbTimeout.Text);

            }
            catch
            {
                tbTimeout.Text = "30";
            }

            byte[] type = Common.getByteArray(pinCB.Text.Substring(0, 2));
            string pan = pinPAN.Text;
            if (pan.Length == 0) pan = null;

            RETURN_CODE rt = IDT_Device.SharedController.pin_capturePinExt(Convert.ToInt32(tbTimeout.Text), type[0], pan, Convert.ToInt32(pinMin.Text), Convert.ToInt32(pinMax.Text), pinMessage1.Text, pinMessage2.Text, pinVerify1.Text, pinVerify2.Text, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enter Pin Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed Successful");
            }
            else
            {
                tbOutputAppendText("Enter Pin Executed failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEncryptedPIN2_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_capturePin_ext(15, 0x11, "4111111111111111", 4, 12, null, ident,
                pinInputCallback, pinFailureCallback, pinTimeoutCallback, pinCancelPromptCallback);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enter Pin Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed Successful");
            }
            else
            {
                tbOutputAppendText("Enter Pin Executed failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }











        private void btnEncryptedPIN_SP2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_getPIN(1, 1, null, 30, 60, "EN");
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enter Pin Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed Successful");
            }
            else
            {
                tbOutputAppendText("Enter Pin Executed failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enter Pin Executed failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }






        private void btnFlushTrackData(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_flushTrackData();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Flush Track Data Executed Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Flush Track Data Executed Successful");
            }
            else
            {
                tbOutputAppendText("Flush Track Data  failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Flush Track Data failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEnablePassthrough_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_enablePassThrough(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enable Passthrough Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enable Passthrough Successful");
            }
            else
            {
                tbOutputAppendText("Enable Passthrough failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enable Passthrough failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEnableL100Passthrough_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_enableL100PassThrough(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enable L100 Passthrough Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enable Passthrough Successful");
            }
            else
            {
                tbOutputAppendText("Enable L100 Passthrough failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enable Passthrough failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnEnableL80Passthrough_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_enableL80PassThrough(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enable L80 Passthrough Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Enable Passthrough Successful");
            }
            else
            {
                tbOutputAppendText("Enable L80 Passthrough failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Enable Passthrough failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void FeliCaAuthentication(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] data = null;
            try
            {
                data = Common.getByteArray(f_command.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Key Data\r\n", ident);
                return;
            }

            if (data == null || data.Length == 0)
            {
                tbOutputAppendText("Invalid Key Data\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.felica_authentication(data);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Authentication Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Authentication Successful");
            }
            else
            {
                tbOutputAppendText("Felica Authentication failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Authentication failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void FeliCaRequestService(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] data = null;
            try
            {
                data = Common.getByteArray(f_command.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Node Code Data\r\n", ident);
                return;
            }

            if (data == null || data.Length == 0)
            {
                tbOutputAppendText("Invalid Node Code Data\r\n", ident);
                return;
            }
            byte[] res = null;

            RETURN_CODE rt = IDT_Device.SharedController.felica_requestService(data, ref res);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Request Service Successful\r\n", ident);
                if (res != null) tbOutputAppendText(Common.getHexStringFromBytes(res) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Request Service Successful");
            }
            else
            {
                tbOutputAppendText("Felica Request Service failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Request Service failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void FeliCaSendCommand(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] data = null;
            try
            {
                data = Common.getByteArray(f_command.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Command Data\r\n", ident);
                return;
            }

            if (data == null || data.Length == 0)
            {
                tbOutputAppendText("Invalid Command Data\r\n", ident);
                return;
            }
            byte[] res = null;

            RETURN_CODE rt = IDT_Device.SharedController.felica_SendCommand(data, ref res);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Command Successful\r\n", ident);
                if (res != null) tbOutputAppendText(Common.getHexStringFromBytes(res) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Command Successful");
            }
            else
            {
                tbOutputAppendText("Felica Command failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Command failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }
        private void FeliCaWritewMac(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            byte[] block = null;
            try
            {
                block = Common.getByteArray(f_block.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block\r\n", ident);
                return;
            }

            if (block == null || block.Length == 0)
            {
                tbOutputAppendText("Invalid Block\r\n", ident);
                return;
            }

            int blockNumber = 0;
            try
            {
                blockNumber = Convert.ToInt32(f_blockNumber.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block Number \r\n", ident);
                return;
            }




            RETURN_CODE rt = IDT_Device.SharedController.felica_writeWithMac(blockNumber, block);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Write with Mac Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Write with Mac Successful");
            }
            else
            {
                tbOutputAppendText("Felica Write with Mac failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Write with Mac failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }
        private void FeliCaReadwMac(object sender, EventArgs e)
        {
            string ident = getIdentValue();


            byte[] blocklist = null;
            try
            {
                blocklist = Common.getByteArray(f_blockList.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block List \r\n", ident);
                return;
            }

            if (blocklist == null || blocklist.Length == 0)
            {
                tbOutputAppendText("Invalid Block List \r\n", ident);
                return;
            }

            int numBlocks = 0;
            try
            {
                numBlocks = Convert.ToInt32(f_numBlocks.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Number of Blocks \r\n", ident);
                return;
            }



            byte[] blocks = null;

            RETURN_CODE rt = IDT_Device.SharedController.felica_readWithMac(numBlocks, blocklist, ref blocks);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Read with Mac Successful\r\n", ident);
                if (blocks != null) tbOutputAppendText(Common.getHexStringFromBytes(blocks) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Read with Mac Successful");
            }
            else
            {
                tbOutputAppendText("Felica Read with Mac failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Read with Mac failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void FeliCaWrite(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] servicecode = null;
            try
            {
                servicecode = Common.getByteArray(f_command.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Service Code\r\n", ident);
                return;
            }

            if (servicecode == null || servicecode.Length == 0)
            {
                tbOutputAppendText("Invalid Service Code\r\n", ident);
                return;
            }

            byte[] blocklist = null;
            try
            {
                blocklist = Common.getByteArray(f_blockList.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block List \r\n", ident);
                return;
            }

            if (blocklist == null || blocklist.Length == 0)
            {
                tbOutputAppendText("Invalid Block List \r\n", ident);
                return;
            }
            byte[] block = null;
            try
            {
                block = Common.getByteArray(f_block.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block\r\n", ident);
                return;
            }


            int blockCount = 0;
            try
            {
                blockCount = Convert.ToInt32(f_blockCount.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block Count\r\n", ident);
                return;
            }



            byte[] statusFlag = null;

            RETURN_CODE rt = IDT_Device.SharedController.felica_write(servicecode, blockCount, blocklist, block, ref statusFlag);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Write Successful\r\n", ident);
                if (statusFlag != null) tbOutputAppendText(Common.getHexStringFromBytes(statusFlag) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Write Successful");
            }
            else
            {
                tbOutputAppendText("Felica Write failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Write failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }


        private void FeliCaRead(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] servicecode = null;
            try
            {
                servicecode = Common.getByteArray(f_command.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Service Code\r\n", ident);
                return;
            }

            if (servicecode == null || servicecode.Length == 0)
            {
                tbOutputAppendText("Invalid Service Code\r\n", ident);
                return;
            }

            byte[] blocklist = null;
            try
            {
                blocklist = Common.getByteArray(f_blockList.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Block List \r\n", ident);
                return;
            }

            if (blocklist == null || blocklist.Length == 0)
            {
                tbOutputAppendText("Invalid Block List \r\n", ident);
                return;
            }

            int numBlocks = 0;
            try
            {
                numBlocks = Convert.ToInt32(f_numBlocks.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid Number of Blocks\r\n", ident);
                return;
            }



            byte[] blocks = null;

            RETURN_CODE rt = IDT_Device.SharedController.felica_read(servicecode, numBlocks, blocklist, ref blocks);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Felica Read Successful\r\n", ident);
                if (blocks != null) tbOutputAppendText(Common.getHexStringFromBytes(blocks) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Felica Read Successful");
            }
            else
            {
                tbOutputAppendText("Felica Read failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Felica Read failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }



        private void btnDisablePassthrough_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_enablePassThrough(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Disable Passthrough Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Disable Passthrough Successful");
            }
            else
            {
                tbOutputAppendText("Disable Passthrough failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Disable Passthrough failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnDisableL100Passthrough_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_enableL100PassThrough(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Disable L100 Passthrough Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Disable Passthrough Successful");
            }
            else
            {
                tbOutputAppendText("Disable L100 Passthrough failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Disable Passthrough failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnDisableL80Passthrough_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_enableL80PassThrough(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Disable L80 Passthrough Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Disable Passthrough Successful");
            }
            else
            {
                tbOutputAppendText("Disable L80 Passthrough failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Disable Passthrough failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnAutoMode_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_captureMode(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("MSR Set Auto Mode successfully\r\n", ident);
                tbOutput.ReadOnly = false;
                tbOutput.Focus();
                System.Diagnostics.Debug.WriteLine("MSR Turned Off successfully");
            }
            else
            {
                tbOutputAppendText("MSR Set Auto Mode failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Set Auto Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnBufferMode_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_captureMode(true, checkBoxMSR_Notification.Checked);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("MSR Set Buffer Mode successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Set Buffer Mode successfully");
            }
            else
            {
                tbOutputAppendText("MSR Set Buffer Mode failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Set Buffer Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnDisableMSR_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_disable();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("MSR Disable successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Disable successfully");
            }
            else
            {
                tbOutputAppendText("MSR Disable failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Disable failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnEnableMSR_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_enable();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("MSR Enabled successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Disable successfully");
            }
            else
            {
                tbOutputAppendText("MSR Enable failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Disable failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnUSBKB_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Enter KB Mode?", "Switch Mode?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
            {

                return;
            }
            string ident = getIdentValue();
            tbOutputAppendText("Sending command to change mode....\r\n", ident);
            RETURN_CODE rt = IDT_Device.SharedController.msr_switchUSBInterfaceMode(true, ref ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                ident = getIdentValue();
                tbOutputAppendText("MSR Enter into USB KB Successful.\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Enter into USB KB Mode successfully");
                refreshDevices();
                buildTreeView();
            }
            else
            {
                ident = getIdentValue();
                tbOutputAppendText("MSR Enter into USB KB  failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Enter into USB KB Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnVerifyBackdoorKey_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_verifyBackdoorKey();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Verify Backdoor Key successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Verify Backdoor Key successfully");
            }
            else
            {
                tbOutputAppendText("Verify Backdoor Key failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Verify Backdoor Key failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnGet_DRS_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] codeDRS = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getDRS(ref codeDRS);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get DRS successfully\r\n", ident);
                tbOutputAppendText(Common.getHexStringFromBytes(codeDRS) + "\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Get DRS failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get DRS failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        /*
        private byte[] readEMVL2ConfigFile(string filename)
        {
            var listOfArrays = new List<byte[]>();
            var flattenedList = listOfArrays.SelectMany(bytes => bytes);
            var byteArray = flattenedList.ToArray();
            //======Read EMV L2 Terminal data
            var filestream = new System.IO.FileStream(filename,
                                          System.IO.FileMode.Open,
                                          System.IO.FileAccess.Read,
                                          System.IO.FileShare.ReadWrite);

            var file = new System.IO.StreamReader(filestream, System.Text.Encoding.UTF8, true, 128);
            string lineOfText;
            //file.
            while ((lineOfText = file.ReadLine()) != null)
            {
                //Do something with the lineOfText
            }

        }
        */

        private void btnSelfCheck_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_selfCheck();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Self Check successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Self Check successfully");
            }
            else
            {
                tbOutputAppendText("Self Check failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Self Check failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnUSBHID_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Enter HID Mode?", "Switch Mode?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
            {

                return;
            }
            string ident = getIdentValue();
            tbOutputAppendText("Sending command to change mode....\r\n", ident);
            RETURN_CODE rt = IDT_Device.SharedController.msr_switchUSBInterfaceMode(false, ref ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                ident = getIdentValue();
                tbOutputAppendText("MSR Enter into USB HID Mode successful.\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Enter into USB HID Mode successfully");
                refreshDevices();
                buildTreeView();
            }
            else
            {
                ident = getIdentValue();
                tbOutputAppendText("MSR Enter into USB HID Mode failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Enter into USB HID Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }


        private void btnSetMultiSetting_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] val1 = Common.getByteArray(textBoxFunctionID.Text.ToString());
            byte[] val2 = Common.getByteArray(textBoxMSRSetting.Text.ToString());
            RETURN_CODE rt = 0;
            if (cbMulti.Checked)
            {
                rt = IDT_Device.SharedController.msr_setSettings(val1[0], val2);
            }
            else
            {
                rt = IDT_Device.SharedController.msr_setSetting(val1[0], val2[0]);
            }

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set  MSR  Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set  MSR  Successful");
            }
            else
            {
                tbOutputAppendText("Set  MSR Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }

        }

        private void btnGetMultiSetting_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] format = null;
            byte format2 = 0;
            byte[] val1 = Common.getByteArray(textBoxFunctionID.Text.ToString());
            RETURN_CODE rt = 0;
            if (cbMulti.Checked)
            {
                rt = IDT_Device.SharedController.msr_getSettings(val1[0], ref format);
            }
            else
            {
                rt = IDT_Device.SharedController.msr_getSetting(val1[0], ref format2);
                format = new byte[] { format2 };
            }

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get MSR Setting " + Common.getHexStringFromBytes(format) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Setting" + Common.getHexStringFromBytes(format));
            }
            else
            {
                tbOutputAppendText("Get MSR Setting  Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Setting Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }

        }


        private void btnSetMultiSettingICC_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] val1 = Common.getByteArray(textBoxFunctionID.Text.ToString());
            byte[] val2 = Common.getByteArray(textBoxMSRSetting.Text.ToString());
            RETURN_CODE rt = 0;
            if (cbMulti.Checked)
            {
                rt = IDT_Device.SharedController.icc_setSettings(val1[0], val2);
            }
            else
            {
                rt = IDT_Device.SharedController.icc_setSetting(val1[0], val2[0]);
            }

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set  ICC  Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set  ICC  Successful");
            }
            else
            {
                tbOutputAppendText("Set  ICC Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }

        }

        private void btnGetMultiSettingICC_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] format = null;
            byte format2 = 0;
            byte[] val1 = Common.getByteArray(textBoxFunctionID.Text.ToString());
            RETURN_CODE rt = 0;
            if (cbMulti.Checked)
            {
                rt = IDT_Device.SharedController.icc_getSettings(val1[0], ref format);
            }
            else
            {
                rt = IDT_Device.SharedController.icc_getSetting(val1[0], ref format2);
                format = new byte[] { format2 };
            }

            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get ICC Setting " + Common.getHexStringFromBytes(format) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get ICC Setting" + Common.getHexStringFromBytes(format));
            }
            else
            {
                tbOutputAppendText("Get ICC Setting  Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Get ICC Setting Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }

        }

        private void btnSetMSRWhiteListFromBDK_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] val = null;
            byte[] mac = null;
            try
            {
                val = Common.getByteArray(whiteListtb.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid White List\r\n", ident);
                return;
            }
            try
            {
                if (mactb.Text.Length > 0)
                    mac = Common.getByteArray(mactb.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid MAC\r\n", ident);
                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.msr_setWhiteListFromBDK(val, mac, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set MSR White List  Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Multi MSR  Successful");
            }
            else
            {
                tbOutputAppendText("Set MSR White List Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }

        }


        private void btnSetMSRWhiteList_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] val = null;
            byte[] mac = null;
            try
            {
                val = Common.getByteArray(whiteListtb.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid White List\r\n", ident);
                return;
            }
            try
            {
                if (mactb.Text.Length > 0)
                    mac = Common.getByteArray(mactb.Text);
            }
            catch
            {
                tbOutputAppendText("Invalid MAC\r\n", ident);
                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.msr_setWhiteList(val, mac);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set MSR White List  Successful" + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Multi MSR  Successful");
            }
            else
            {
                tbOutputAppendText("Set MSR White List Unsuccessful: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);


            }

        }

        private void btnGetMSRWhiteList_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] format = null;

            RETURN_CODE rt = IDT_Device.SharedController.msr_RetrieveWhiteList(ref format);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get MSR White List " + Common.getHexStringFromBytes(format) + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get MSR White List" + Common.getHexStringFromBytes(format));
            }
            else
            {
                tbOutputAppendText("Get MSR White List Fail Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + "\n\r", ident);
                System.Diagnostics.Debug.WriteLine("Get MSR White List Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));

            }

        }

        private void btnGetKernalCheckValue_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            String ver = "";
            RETURN_CODE rt = IDT_Device.SharedController.emv_getEMVKernelCheckValue(ref ver);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("EMV Kernel Check Value: " + ver + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("EMV Kernel Check Value: " + ver);
            }
            else
            {
                tbOutputAppendText("EMV Kernel Check Value failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("EMV Kernel Check Value failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnGetConfigurationCV_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            String ver = "";
            RETURN_CODE rt = IDT_Device.SharedController.emv_getEMVConfigurationCheckValue(ref ver);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("EMV Configuration Check Value: " + ver + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("EMV Configuration Check Value: " + ver);
            }
            else
            {
                tbOutputAppendText("EMV Configuration Check Value failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("EMV Configuration Check Value failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }


        delegate void ShowPINPad(bool showPINButton);

        private void showPINPad(bool showPINButton)
        {
            if (btnPINPad0.InvokeRequired)
            {
                ShowPINPad d = new ShowPINPad(showPINPad);
                Invoke(d, new object[] { showPINButton });
            }
            else
            {

                btnPINPad0.Enabled = showPINButton;
                btnPINPad1.Enabled = showPINButton;
                btnPINPad2.Enabled = showPINButton;
                btnPINPad3.Enabled = showPINButton;
                btnPINPad4.Enabled = showPINButton;
                btnPINPad5.Enabled = showPINButton;
                btnPINPad6.Enabled = showPINButton;
                btnPINPad7.Enabled = showPINButton;
                btnPINPad8.Enabled = showPINButton;
                btnPINPad9.Enabled = showPINButton;

                btnPINPadF1.Enabled = showPINButton;
                btnPINPadF2.Enabled = showPINButton;
                btnPINPadQ.Enabled = showPINButton;
                btnPINPadBack.Enabled = showPINButton;
                btnPINPadCancel.Enabled = showPINButton;
                btnPINPadEnter.Enabled = showPINButton;
            }
        }

        private void showMenuPad(bool showPINButton)
        {
            if (btnPINPadCancel.InvokeRequired)
            {
                ShowPINPad d = new ShowPINPad(showMenuPad);
                Invoke(d, new object[] { showPINButton });
            }
            else
            {
                btnPINPadCancel.Enabled = showPINButton;
                btnPINPadEnter.Enabled = showPINButton;
            }
        }

        private void processEMVCallback(EMV_Callback emvCallback, string ident)
        {
            if (emvCallback != null)
                System.Diagnostics.Debug.WriteLine("processEMVCallback: " + "LCD Display =" +
                                                   Common.getHexStringFromBytes(emvCallback.lcd_messages));
            if (emvCallback.lcd_displayMode != EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CANCEL)
                IDTechSoftwareDevice.UpdateEMVResponse(emvCallback);
            if (emvCallback.callbackType == EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_LCD) //LCD Callback Type
            {
                if (emvCallback.lcd_displayMode == EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CLEAR_SCREEN)
                {
                    SetOutputTextLCD("", ident);

                    return;
                }
                else if (emvCallback.lcd_displayMode == EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MESSAGE || emvCallback.lcd_displayMode == EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE2 || emvCallback.lcd_displayMode == EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE3)
                {
                    showMessageOnLCD(emvCallback.language, emvCallback.lcd_messages, ident);
                }
                else if (emvCallback.lcd_displayMode == EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE4)
                {
                    showMessageOnLCD(emvCallback.language, emvCallback.lcd_messages, ident);

                    tbOutputAppendText("Mode 4 Callback - Awaiting Response.  \r\n", ident);
                    RETURN_CODE RT = IDT_Device.SharedController.emv_callbackResponseLCD(EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE4, 0);

                }

                else
                {
                    //Display message with menu/language or prompt, and return result to emv_callbackResponseLCD
                    //Kernel will not proceed until this step is complete
                    processLCDMenuSelect(ident);
                }

            }

            if (emvCallback.callbackType == EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD) //PIN Callback Type
            {
                if (emvCallback.pin_pinMode == EMV_PIN_MODE.EMV_PIN_MODE_MCPOG ||
                    emvCallback.pin_pinMode == EMV_PIN_MODE.EMV_PIN_MODE_POG)
                {
                    string input =
                        Microsoft.VisualBasic.Interaction.InputBox("Please enter PIN Blob as Hex Data", "Data", "", -1,
                            -1);

                    if (input.Length == 0)
                    {
                        tbOutputAppendText("No data specified.  \r\n", ident);
                        IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_CANCEL,
                            null,
                            null);
                        return;
                    }

                    IDT_Device.SharedController.emv_callbackResponsePIN(emvCallback.pin_pinMode,
                        null,
                        Common.getByteArray(input));
                }
                else
                {
                    processPINPad(ident);
                    showMessageOnLCD(emvCallback.language, emvCallback.lcd_messages, ident);
                    pinMode = true;
                }
                //Provide PIN information to emv_callbackResponsePIN
                //Kernel will not proceed until this step is complete


            }

            if (emvCallback.callbackType == EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD_ETC) //PIN Callback Type
            {

                processPINPad(ident);
                showMessageOnLCD(emvCallback.language, emvCallback.lcd_messages, ident);
                pinMode = true;

                //Provide PIN information to emv_callbackResponsePIN
                //Kernel will not proceed until this step is complete


            }

            if (emvCallback.callbackType == EMV_CALLBACK_TYPE.EMV_CALLBACK_MSR) //MSR Callback Type
            {
                //Provide MSR Swipe information to emv_callbackResponseMSR
                //Kernel will not proceed until this step is complete
                showMessageOnLCD(emvCallback.language, emvCallback.lcd_messages, ident);
                DisplayMSRPrompMethod(
                    "022601803F4D286BA49B3B303135393032373D39393939393939393939393939393939393D343130343130333030303030303030303030303030333336343738313139303030303031343039303D30303030303030303030303030303030303D3D303D353438353936303336343738313730363F33DB35EA39AAD494725F4DF6C5C461B2B3F8C513AA241CC9BA4CC13B7A30C77D15E71D986317CC72B928CBCCEA1FA1F192873798937CE93C2DA73E459728FA5E2C5DA0767905DC8501A2693F1784C1FF502E917602B9C375A2E7D9B60F22EC54D0B0AB365D93660C99483F2ECD09C68A2721E51AABCA5B08290000000000000000000000000000000000000000000000000000000000000000000000000000000036333754393434323535629949000000000001F5DACE03", ident);
            }
        }

        bool pinMode = false;

        private void processLCDMenuSelect(string ident)
        {
            if (IDTechSoftwareDevice.emvCallbackInfo == null) return;
            switch (IDTechSoftwareDevice.emvCallbackInfo.callbackType)
            {
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_LCD:
                switch (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode)
                {
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CANCEL:
                    //skip

                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU:
                    //LCD control should be changed to select the menu
                    showMessageOnLCD(IDTechSoftwareDevice.emvCallbackInfo.language,
                        IDTechSoftwareDevice.emvCallbackInfo.lcd_messages, ident);
                    showPINPad(true);
                    //showMenuPad(true);
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_PROMPT:
                    showMessageOnLCD(IDTechSoftwareDevice.emvCallbackInfo.language,
                        IDTechSoftwareDevice.emvCallbackInfo.lcd_messages, ident);
                    showMenuPad(true);
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE2:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE3:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE4:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MESSAGE:
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT:
                    //LCD control should be changed to select the menu
                    showMessageOnLCD(IDTechSoftwareDevice.emvCallbackInfo.language,
                        IDTechSoftwareDevice.emvCallbackInfo.lcd_messages, ident);
                    //showMenuPad(true);
                    showPINPad(true);
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CLEAR_SCREEN:
                    break;
                }

                break;
            }
        }

        private void processPINPad(string ident)
        {
            //show message
            SetOutputTextLCD(getLCDDisplayMessage(convertLang(), (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_ENTER_PIN), ident);
            showPINPad(true);
            IDTechSoftwareDevice.m_posOnlinePIN = "";
        }


        public static string getLCDDisplayMessage(byte[] language, int id)
        {
            if (id > (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.TRANS_MSG_NEW_TBL_LIMIT) return "";
            ASCIIEncoding encoding = new ASCIIEncoding();
            string line1 = "";
            string line2 = "";
            string sLanguage = encoding.GetString(language, 0, 2).ToUpper();
            DisplayMessages.DISPLAY_MESSAGE_LANGUAGE theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.ENGLISH;
            if (sLanguage.Equals("FR"))
            {
                theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.FRENCH;
            }
            if (sLanguage.Equals("EF"))
            {
                theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.ENGLISH_FRENCH;
            }
            if (sLanguage.Equals("ES"))
            {
                theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.SPANISH;
            }
            if (sLanguage.Equals("PT"))
            {
                theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.PORTUGUESE;
            }
            if (sLanguage.Equals("ZH"))
            {
                theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.CHINESE;
            }
            if (sLanguage.Equals("JA"))
            {
                theLang = DisplayMessages.DISPLAY_MESSAGE_LANGUAGE.JAPANESE;
            }

            DisplayMessages.retrieveMessage(theLang, (DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER)id, ref line1, ref line2);
            return (line1 + "\r\n" + line2);
        }

        private static string _sLanguage = "en";

        private static byte[] convertLang()
        {
            if (_sLanguage == null) return new byte[] { 0x45, 0x4E };
            if (_sLanguage.Length != 2) return new byte[] { 0x45, 0x4E };
            return Encoding.ASCII.GetBytes(_sLanguage);
        }

        public static string getLanguageCode(string sLanguage)
        {
            _sLanguage = sLanguage.ToUpper();

            if (String.Compare(sLanguage, "en", true) == 0)
            {
                return "ENGLISH";
            }
            else if (String.Compare(sLanguage, "fr", true) == 0)
            {
                return "FRANCAIS";
            }
            else if (String.Compare(sLanguage, "sp", true) == 0 || String.Compare(sLanguage, "es", true) == 0)
            {
                return "ESPANOL";
            }
            else if (String.Compare(sLanguage, "zh", true) == 0)
            {
                return "中文";
            }
            else if (String.Compare(sLanguage, "pt", true) == 0)
            {
                return "PORTUGUESA";
            }
            else if (String.Compare(sLanguage, "ef", true) == 0)
            {
                return "ENGLISH-FRANCAIS";
            }
            else if (String.Compare(sLanguage, "ja", true) == 0)
            {
                return "日本人";
            }
            else
                return "(Unsupported)";
        }

        private void showMessageOnLCD(byte[] language, byte[] message, string ident)
        {
            if (IDTechSoftwareDevice.emvCallbackInfo == null) return;
            if (message == null) return;
            StringBuilder sb = new StringBuilder();
            int position = 0;
            while (position < message.Length)
            {
                byte line = message[position++];
                if (position < message.Length)
                {
                    if ((line & 0x80) == 0x80)
                    {
                        sb.Append(getLCDDisplayMessage(language, message[position++]));

                    }
                    else
                    {
                        StringBuilder tmp = new StringBuilder();
                        while (position < message.Length && message[position] != 0x1C)
                        {
                            tmp.Append(Encoding.ASCII.GetString(new byte[] { message[position++] }));
                        }

                        if (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode ==
                            EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT)
                            sb.Append(String.Format("{0:D}", line) + " : " +
                                      getLanguageCode(tmp.ToString()));
                        else if (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode ==
                                 EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU)
                            sb.Append(String.Format("{0:D}", line) + " : " + tmp);
                        else
                            sb.Append(tmp.ToString());
                    }

                    position++;
                    if (position < message.Length)
                        sb.AppendLine();

                }


            }

            if (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode ==
                EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT)
            {
                sb.AppendLine("");
                sb.Append("--Select Language--");
                SetOutputTextLCD(sb.ToString(), ident, true);
            }
            else if (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode ==
                     EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU)
            {
                sb.AppendLine("");
                sb.Append("--Select App--");
                SetOutputTextLCD(sb.ToString(), ident, true);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Setting LCD Screen Message");
                SetOutputTextLCD(sb.ToString(), ident);
            }

        }

        private void btnPINPadBack_Click(object sender, EventArgs e)
        {
            InputNumBackspace();
        }

        void InputNumBackspace()
        {
            string ident = getIdentValue();
            if (IDTechSoftwareDevice.emvCallbackInfo == null) return;

            switch (IDTechSoftwareDevice.emvCallbackInfo.callbackType)
            {
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD:
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD_ETC:
                switch (IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode)
                {
                    case EMV_PIN_MODE.EMV_PIN_MODE_CANCEL:
                    showPINPad(false);
                    break;
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_DUKPT:
                    case EMV_PIN_MODE.EMV_PIN_MODE_ONLINE_MKSK:
                    case EMV_PIN_MODE.EMV_PIN_MODE_OFFLINE:
                    int len = IDTechSoftwareDevice.m_posOnlinePIN.Length;
                    if (len > 0)
                    {
                        if (len > 1)
                            IDTechSoftwareDevice.m_posOnlinePIN =
                                IDTechSoftwareDevice.m_posOnlinePIN.Substring(0, len - 1);
                        else
                            IDTechSoftwareDevice.m_posOnlinePIN = "";

                        //Show the PIN * in the LCD
                        string messagePINPad =
                            getLCDDisplayMessage(convertLang(), (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_ENTER_PIN);


                        messagePINPad += "\r\n";
                        messagePINPad += getPIN_MASK(IDTechSoftwareDevice.m_posOnlinePIN);
                        SetOutputTextLCD(messagePINPad, ident);
                    }
                    else
                        IDTechSoftwareDevice.WarringBeep();


                    break;
                }

                break;
            }

        }

        private string postXMLData(string destinationUrl, string requestXml, int timeout)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(destinationUrl);
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            //ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;
            byte[] bytes;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestXml);
            request.ContentType = "text/xml; encoding='utf-8'";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            request.Timeout = timeout;
            try
            {
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Close();
            }
            catch (System.Net.WebException ex)
            {
                return "ERROR: " + ex.Message;
            }


            HttpWebResponse response;
            try
            {
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    //if (responseStr.Equals(requestXml)) return "ECHO";
                    return responseStr;
                }
            }
            catch (System.Net.WebException ex)
            {
                return "ERROR: " + ex.Message;
            }


            return null;
        }

        private void btnPINPadEnter_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();

            if (pinMode)
            {

                pinMode = false;
                IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_OFFLINE, null,
                    Encoding.ASCII.GetBytes(IDTechSoftwareDevice.m_posOnlinePIN));
                codes = new StringBuilder();
                SetOutputTextLCD(null, ident);
                return;
            }

            Thread demoThread = new Thread(new ThreadStart(threadResponseEnter));
            demoThread.IsBackground = true;
            demoThread.Start(); //启动线程 
        }

        private static string theCurrentIP = "";
        private void threadResponseCancel()
        {
            if (IDTechSoftwareDevice.emvCallbackInfo == null) return;

            switch (IDTechSoftwareDevice.emvCallbackInfo.callbackType)
            {
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_LCD:
                switch (IDTechSoftwareDevice.emvCallbackInfo.lcd_displayMode)
                {
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CANCEL:
                    //skip
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MENU:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_LANGUAGE_SELECT:
                    //LCD control should be changed to select the menu
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CANCEL, 0);
                    showMenuPad(false);
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_PROMPT:
                    showMenuPad(false);
                    IDT_Device.SharedController.emv_callbackResponseLCD(
                        EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_PROMPT, 0x43); //'C'
                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE2:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE3:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_AR_MESSAGE4:
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_MESSAGE:

                    break;
                    case EMV_LCD_DISPLAY_MODE.EMV_LCD_DISPLAY_MODE_CLEAR_SCREEN:
                    break;
                }

                break;

                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD:
                IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_CANCEL, null, null);
                showPINPad(false);

                break;
                case EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD_ETC:
                IDT_Device.SharedController.emv_callbackResponsePIN_ETC(EMV_PIN_MODE.EMV_PIN_MODE_CANCEL, null, null);
                showPINPad(false);

                break;
            }
        }

        private void btnPINPadCancel_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (inTest) return;
            if (pinMode)
            {
                pinMode = false;
                IDT_Device.SharedController.emv_callbackResponsePIN(EMV_PIN_MODE.EMV_PIN_MODE_CANCEL, null, null);
                IDTechSoftwareDevice.m_posOnlinePIN = "";
                codes = new StringBuilder();
                SetOutputTextLCD(null, ident);
                return;
            }

            Thread demoThread = new Thread(new ThreadStart(threadResponseCancel));
            demoThread.IsBackground = true;
            demoThread.Start(); //启动线程 
            codes = new StringBuilder();
            SetOutputTextLCD(null, ident);

        }

        StringBuilder codes = null;

        private void btnPINPad0_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (codes == null) codes = new StringBuilder();
            string sNum = ((Button)sender).Text;
            int num = Int32.Parse(sNum);
            if (pinMode)
            {
                IDTechSoftwareDevice.emvCallbackInfo.callbackType = EMV_CALLBACK_TYPE.EMV_CALLBACK_TYPE_PINPAD;
                IDTechSoftwareDevice.emvCallbackInfo.pin_pinMode = EMV_PIN_MODE.EMV_PIN_MODE_OFFLINE;
                InputNum(num);
                return;
            }

            System.Diagnostics.Debug.WriteLine("InputNum thread: ==0===");
            //Task backgroundWorkTask = Task.Run(() => InputNum(sNum));
            codes.Append(sNum);
            SetOutputTextLCD(codes.ToString(), ident);
            // tbLCD.Text = sNum + " SELECTED";
            Thread demoThread = new Thread(new ParameterizedThreadStart(InputNum));
            demoThread.IsBackground = true;
            demoThread.Start(sNum); //启动线程 
            System.Diagnostics.Debug.WriteLine("InputNum thread: ==1===");
            // codes.Append(sNum);


        }

        private void UniversalSDKDemo_FormClosed(object sender, FormClosedEventArgs e)
        {
            formIsClosing = true;
            Application.Exit();
        }

        private void rbEMV_CheckedChanged(object sender, EventArgs e)
        {
            buildTreeView();
        }

        private void btnControBeepWithSW_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.config_setBeeperController(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SoftwareController.softwareControlBeeper = true;
                tbOutputAppendText("Beep controller with SW successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Beep controller with SW successfully");
            }
            else
            {
                tbOutputAppendText("Beep controller with SW failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Beep controller with SW failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnsetMerchantRecord(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt =
                IDT_Device.SharedController.device_setMerchantRecord(1, true, "pass.com.firstdata.money2020", null);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Merchant Record successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Merchant Record successfully");
            }
            else
            {
                tbOutputAppendText("Set Merchant Record failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Merchant Record failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btngetMerchantRecord(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] response = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getMerchantRecord(1, ref response);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Merchant Record successfully:\r\n" + Common.getHexStringFromBytes(response) +
                                    "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Merchant Record failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Merchant Record failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void customdisplay(bool turnOn)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(turnOn);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (turnOn)
                    tbOutputAppendText("Custom display mode start successfully\r\n", ident);
                else
                    tbOutputAppendText("Custom display mode stop successfully\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Custom display failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }

        }

        private void notifications(bool turnOn)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.icc_setReadingCharacteristics(turnOn ? 2 : 1);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Notifications set to" + (turnOn ? "ON" : "OFF") + ":\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set notifications failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }

        }

        private void btnclearLineNumber_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (tblcdLine.Text.Length == 0)
            {
                tbOutputAppendText("Missing Required Parameters\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_clearDisplay(Convert.ToInt32(tblcdLine.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear Line Number Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Clear Line Number Successful");
            }
            else
            {
                tbOutputAppendText("Clear Line Number failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Clear Line Number failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnclearDisplay_Click2(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_clearDisplay(0);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear Display Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Clear Display Successful");
            }
            else
            {
                tbOutputAppendText("Clear Line Number failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Clear Line Number failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnclearDisplay_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_clearAllLines();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear Display Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Clear Display Successful");
            }
            else
            {
                tbOutputAppendText("Clear Line Number failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Clear Line Number failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnsavePrompt_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (tbLCDPrompt.Text.Length == 0)
            {
                tbOutputAppendText("Missing Required Parameters\r\n", ident);
                return;
            }

            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_savePrompt(Convert.ToInt32(tbLCDPrompt.Text), tbLCDMessage.Text);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Save Prompt Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Save Prompt Successful");
            }
            else
            {
                tbOutputAppendText("Save Prompt failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Prompt failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btndisplayPrompt_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (tbLCDPrompt.Text.Length == 0 || tblcdLine.Text.Length == 0)
            {
                tbOutputAppendText("Missing Required Parameters\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_displayPrompt(Convert.ToInt32(tbLCDPrompt.Text),
                Convert.ToInt32(tblcdLine.Text));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Display Prompt Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Display Prompt Successful");
            }
            else
            {
                tbOutputAppendText("Display Prompt failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("SDisplayave Prompt failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btndisplayMessage_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (tblcdLine.Text.Length == 0)
            {
                tbOutputAppendText("Missing Required Parameters\r\n", ident);
                return;
            }

            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_displayMessage(Convert.ToInt32(tblcdLine.Text), tbLCDMessage.Text);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Display Message Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Display Message Successful");
            }
            else
            {
                tbOutputAppendText("Display Message failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Display Message failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void startMonitor()
        {
            string ident = getIdentValue();
            IDT_Device.SharedController.ip_monitorSocketConnectionStatus(true, false, 10, 0);

            tbOutputAppendText("IP Monitoring Successful\r\n", ident);
            System.Diagnostics.Debug.WriteLine("IP Monitoring Successful");


        }

        private void stopMonitor()
        {
            string ident = getIdentValue();
            IDT_Device.SharedController.ip_monitorSocketConnectionStatus(false, false, 10, 0);

            tbOutputAppendText("IP Monitoring Stop Successful\r\n", ident);
            System.Diagnostics.Debug.WriteLine("IP Monitoring Stop Successful");


        }

        private void btnenableBacklight_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_enableBacklight(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Backlight Enabled Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Backlight Enabled Successful");
            }
            else
            {
                tbOutputAppendText("Backlight Enabled failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Backlight Enabled failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btndisableBacklight_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_enableBacklight(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Backlight Disabled Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Backlight Disabled Successful");
            }
            else
            {
                tbOutputAppendText("Backlight Disabled failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Backlight Disabled failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnbacklightStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            bool status = false;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_getBacklightStatus(ref status);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Backlight status: " + (status ? "ENABLED" : "DISABLED") + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Backlight status: " + (status ? "ENABLED" : "DISABLED"));
            }
            else
            {
                tbOutputAppendText("Get backlight status failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get backlight status failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void btnControBeepWithFW_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.config_setBeeperController(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SoftwareController.softwareControlBeeper = false;
                tbOutputAppendText("Beep controller with FW successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Beep controller with FW successfully");
            }
            else
            {
                tbOutputAppendText("Beep controller with FW failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Beep controller with FW failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnControMSRLEDWithSW_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.config_setLEDController(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SoftwareController.softwareControlMSRLED = true;
                tbOutputAppendText("MSR LED controller with SW successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR LED controller with SW successfully");
            }
            else
            {
                tbOutputAppendText("MSR LED controller with SW failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR LED controller with SW failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }
        private void btnControMSRLEDWithFW_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.config_setLEDController(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SoftwareController.softwareControlMSRLED = false;
                tbOutputAppendText("MSR LED controller with FW successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR LED controller with FW successfully");
            }
            else
            {
                tbOutputAppendText("MSR LED controller with FW failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR LED controller with FW failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnLED_MSR_ON_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_controlLED(0xff, 0x01, 500);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText(" LED On Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine(" LED On Successful");
            }
            else
            {
                tbOutputAppendText(" LED On failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine(" LED On failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnLED_MSR_OFF_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_controlLED(0xff, 0x00, 500);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText(" LED Off Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine(" LED Off Successful");
            }
            else
            {
                tbOutputAppendText(" LED Off failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine(" LED Off failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnLED_MSR_BLINK_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.device_controlLED(1, 0x22, 500, 500);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set MSR Blue LED Blink Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set MSR Blue LED Blink Successful");
            }
            else
            {
                tbOutputAppendText("Set MSR Blue LED Blink failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set MSR Blue LED Blink failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setConfig()
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please Enter Kernel Configuration Number (1-23)",
                "Set Kernel Configuration", "", -1, -1);
            if (input == null || input.Length == 0)
            {
                tbOutputAppendText("No Kernel Value Specified\r\n", ident);
                return;
            }

            int type = 0;
            try
            {
                type = Convert.ToInt32(input);
            }
            catch
            {
                tbOutputAppendText("Invalid Kernel Value\r\n", ident);
                return;
            }

            if (type < 1 || type > 23)
            {
                tbOutputAppendText("Kernel values must be between 1 and 23\r\n", ident);
            }

            RETURN_CODE rt = IDT_Device.SharedController.emv_setTerminalMajorConfiguration(type);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Configuration Success\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Configuration Success");


            }
            else
            {
                tbOutputAppendText("Set Configuration failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Configuration failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void getDUKPT(int type)
        {
            string ident = getIdentValue();
            byte[] dukpt = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getSpectrumProKSN(type, ref dukpt);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (dukpt != null && dukpt.Length > 0)
                {
                    tbOutputAppendText("DUKPT KSN = " + Common.getHexStringFromBytes(dukpt) + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("DUKPT KSN = " + Common.getHexStringFromBytes(dukpt) + "\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("No DUKPT KSN for that key\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("No DUKPT KSN for that key");
                }

            }
            else
            {
                tbOutputAppendText("DUKPT KSN failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("DUKPT KSN failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnclearMSRData(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.msr_clearMSRData();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear MSR Data Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Clear MSR Data Successful");
            }
            else
            {
                tbOutputAppendText("Clear MSR Data failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Clear MSR Data failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btngetMSRData(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            IDTTransactionData card = null;
            RETURN_CODE rt = IDT_Device.SharedController.msr_getMSRData(ref card);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get MSR Data Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Data Successful");
                displayCardData(card, ident);
            }
            else
            {
                tbOutputAppendText("Get MSR Data failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Data failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnEnableICC_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.icc_enable(checkBoxWithICCNotification.Checked);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("ICC Enable successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ICC Enable successfully");
            }
            else
            {
                tbOutputAppendText("ICC Enable failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("ICC Enable failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void approveOnline()
        {
            string ident = getIdentValue();
            if (IDT_Device.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_VP3300) return;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_updateBalance(00, null, null, null);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("ApproveOnline successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ApproveOnline successful");
                SetOutputTextLCD("", ident);
                SetOutputTextLCD(getLCDDisplayMessage(convertLang(), (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_APPROVED), ident);
                Common.pause(2000);
                SetOutputTextLCD(getLCDDisplayMessage(new byte[] { 0x45, 0x4E }, (int)DisplayMessages.DISPLAY_MESSAGE_IDENTIFIER.MSG_NEW_WELCOME), ident);
            }
            else
            {
                tbOutputAppendText("ApproveOnline  failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("ApproveOnline  failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnFreeSpace(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            int device = 0;
            int flash = 0;
            RETURN_CODE rt = IDT_Device.SharedController.device_getDriveFreeSpace(ref device, ref flash);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Free Drive Space  = " + device + " bytes\r\n", ident);
                tbOutputAppendText("Used Drive Space  = " + flash + " bytes\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Free Drive Space failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Free Drive Space Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnListDirectory(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string directory = "";
            string input2 = Microsoft.VisualBasic.Interaction.InputBox("Memory Location",
                    "Please Enter 1 for Flash Memory, or 2 for SDCard", "1", -1, -1);
            RETURN_CODE rt = IDT_Device.SharedController.device_listDirectory(null, true, input2.Equals("2"), ref directory);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                directory = directory.Replace(",", "\r\n");

                char[] point = new char[] { (char)0x0a };
                string[] dir = directory.Split(point);

                tbOutputAppendText("List directory successful\r\n", ident);
                foreach (string s in dir)
                {
                    tbOutputAppendText(s + "\r\n", ident);
                }
            }
            else
            {
                tbOutputAppendText("List directory failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("List directory Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnCreateDirectory(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please Enter Directory Name", "Create Directory", "", -1,
                    -1);
            if (input == null || input.Length == 0) return;
            RETURN_CODE rt = IDT_Device.SharedController.device_createDirectory(input);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Create Directory successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Create Directory failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Create Directory failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnDeleteDirectory(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please Enter Directory To Delete",
                "Delete File/Directory", "", -1, -1);
            if (input == null || input.Length == 0) return;
            RETURN_CODE rt = IDT_Device.SharedController.device_deleteDirectory(input);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Delete File/Directory successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Delete File/Directory failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Delete File/Directory failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnDeleteFile(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please Enter File To Delete",
                "Delete File/Directory", "", -1, -1);
            if (input == null || input.Length == 0) return;
            string input2 = Microsoft.VisualBasic.Interaction.InputBox("Memory Location",
                   "Please Enter 1 for Flash Memory, or 2 for SDCard", "1", -1, -1);
            RETURN_CODE rt = IDT_Device.SharedController.device_deleteFile(input, input2.Equals("2"), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Delete File/Directory successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Delete File/Directory failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Delete File/Directory failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnDisableICC_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.icc_disable();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("ICC Disable successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("ICC Disable successfully");
            }
            else
            {
                tbOutputAppendText("ICC Disable failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("ICC Disable failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void setUID(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter SpectrumPro UID to use", "UID",
                "0001020304050607", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No UID specified.  \r\n", ident);
                return;
            }

            SpectrumInfo info = new SpectrumInfo();
            RETURN_CODE rt = IDT_Device.SharedController.device_setUID(input, 2, ref info);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start UID Success  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start UID Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Start UID Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnGetICCFunctionStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            bool enable = false;
            bool withNotification = false;
            RETURN_CODE rt = IDT_Device.SharedController.icc_getFunctionStatus(ref enable, ref withNotification);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (enable)
                    tbOutputAppendText("ICC Reader " + (enable == true ? "Enabled " : "Disabled ") +
                                        (withNotification == true ? " with Notification." : " without Notification.") +
                                        "\r\n", ident);
                else
                    tbOutputAppendText("ICC Reader Disabled.", ident);
                System.Diagnostics.Debug.WriteLine("ICC Reader " + (enable == true ? "Enablegetpad " : "Disabled ") +
                                                   (withNotification == true
                                                       ? " with Notification."
                                                       : " without Notification.") + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get ICC Function Status Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get ICC Function Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnGetMSRFunctionStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            bool enable = false;
            bool isBufferMode = false;
            bool withNotification = false;
            RETURN_CODE rt =
                IDT_Device.SharedController.msr_getFunctionStatus(ref enable, ref isBufferMode, ref withNotification);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (enable)
                    tbOutputAppendText("MSR Reader " + (enable == true ? "Enabled " : "Disabled ") +
                                        (isBufferMode == true ? "Buffer Mode " : "Auto Mode ") +
                                        (withNotification == true ? " with Notification." : " without Notification.") +
                                        "\r\n", ident);
                else
                    tbOutputAppendText("MSR Reader Disabled.", ident);
                System.Diagnostics.Debug.WriteLine("MSR Reader " + (enable == true ? "Enabled " : "Disabled ") +
                                                   (withNotification == true
                                                       ? " with Notification."
                                                       : " without Notification.") + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get MSR Function Status Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Function Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

            Common.pause(300);
            rt = IDT_Device.SharedController.config_getBeeperController(ref enable);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Beeper controller by " + (enable == true ? "firmware. " : "software. ") + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Beeper controller by " +
                                                   (enable == true ? "firmware. " : "software. ") + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Beeper controller Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Beeper controller Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

            Common.pause(300);
            bool msrLED = false;
            bool iccLED = false;
            rt = IDT_Device.SharedController.config_getLEDController(ref msrLED, ref iccLED);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("MSR LED controller by " + (msrLED == true ? "firmware. " : "software. ") + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR LED controller by " +
                                                   (msrLED == true ? "firmware " : "software ") + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get MSR LED controller Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get MSR LED controller Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void _btnGetMSRFunctionStatus_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            bool enable = false;
            bool isBufferMode = false;
            bool withNotification = false;
            RETURN_CODE rt =
                IDT_Device.SharedController.msr_getFunctionStatus(ref enable, ref isBufferMode, ref withNotification);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (enable)
                    tbOutputAppendText("MSR Reader " + (enable == true ? "Enabled " : "Disabled ") +
                                        (isBufferMode == true ? "Buffer Mode " : "Auto Mode ") +
                                        (withNotification == true ? " with Notification." : " without Notification.") +
                                        "\r\n", ident);
                else
                    tbOutputAppendText("MSR Reader Disabled.", ident);
                System.Diagnostics.Debug.WriteLine("MSR Reader " + (enable == true ? "Enabled " : "Disabled ") +
                                                   (withNotification == true
                                                       ? " with Notification."
                                                       : " without Notification.") + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get MSR Function Status Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get MSR Function Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void btnSetEncryptionControl_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.config_setEncryptionControl(checkBoxEncryptControlMSR.Checked,
                checkBoxEncryptControlEMV.Checked);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("MSR Set Buffer Mode successfully\r\n", ident);
                System.Diagnostics.Debug.WriteLine("MSR Set Buffer Mode successfully");
            }
            else
            {
                tbOutputAppendText("MSR Set Buffer Mode failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("MSR Set Buffer Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void btnGetEncryptionControl_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            bool msr = false;
            bool icc = false;
            RETURN_CODE rt = IDT_Device.SharedController.config_getEncryptionControl(ref msr, ref icc);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                checkBoxEncryptControlMSR.Checked = msr;
                checkBoxEncryptControlEMV.Checked = icc;
                tbOutputAppendText("Encryption Control Status: " + (msr == true ? "MSR: ON " : "MSR: OFF ") +
                                    (icc == true ? "ICC: ON " : "ICC: OFF ") + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Encryption Control Status: " +
                                                   (msr == true ? "MSR: ON " : "MSR: OFF ") +
                                                   (icc == true ? "ICC: ON " : "ICC: OFF ") + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Encryption Control Status Failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Encryption Control Status Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void comboBoxTermConfig_SelectedIndexChanged(object sender, EventArgs e)
        {
            int sel = comboBoxTermConfig.SelectedIndex;
            byte[] config = Common.defaultTermialConfiguration(sel + 1);
            string tlv = Common.getHexStringFromBytes(config);
            tbTerm.Text = tlv;
        }

        private void buildTreeView()
        {
            if (InvokeRequired)
            {
                try
                {
                    Invoke((MethodInvoker)delegate
                    {
                        buildTreeView();
                    });
                    return;
                }
                catch
                {

                }

            }
            //if (lastType == IDT_Device.getDeviceType()) return;
            // lastType = IDT_Device.getDeviceType();
            keepInLoop = false;
            tvCommands.Nodes.Clear();
            clearPanels();
            string sel = (string)connectedDevicesList.SelectedItem;
            if (sel == null) sel = "";

            IDTechComm comm = null;
            if (sel.Length > 0) comm = Profile.getComm(sel);


            if (comm == null) return;



            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_UNIPAY) buildUniPayTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_VP8800) buildVP8800Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_VP3300) buildVP3300Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_UNIPAYI_V) buildUniPayI_VTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_VENDI) buildVendiTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_NEO2) buildNEOTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_VENDIII) buildVendIIITree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_KIOSKIII) buildKioskIIITree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_MINISMARTII) buildMiniSmartIITree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_SPECTRUM_PRO) buildSpectrumProTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_AUGUSTA) buildAugustaTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_TMS) buildTMSTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_AUGUSTA_KB) buildAugustaKBTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_SECUREMAG) buildSecureMagTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_SECUREKEY) buildSecureKeyTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_SREDKEY2) buildSREDKey2Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_CM100) buildCM1000Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_L100) buildL100Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_L80) buildL80Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_K100) buildK100Tree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_BTMAG) buildBTMagTree();
            if (comm.getDeviceType() == IDT_DEVICE_Types.IDT_DEVICE_PIP) buildPIPTree();

            selectTab(sel);
        }

        private void buildSpectrumProTree()
        {

            /////
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode mnode3 = new TreeNode("Clear Card Data");
            TreeNode mnode4 = new TreeNode("Get Card Data");
            TreeNode[] marray = new TreeNode[] { mnode1, mnode2, mnode3, mnode4 };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);



            TreeNode e1 = new TreeNode("Start Trans");
            TreeNode c2 = new TreeNode("Cancel Trans");

            TreeNode dnode4 = new TreeNode("Send Command");
            TreeNode dnode5 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode pollcr = new TreeNode("Poll Card Reader");
            TreeNode dk1 = new TreeNode("DUKPT KSN KEK");
            TreeNode dk3 = new TreeNode("DUKPT KSN DEK");
            TreeNode dk6 = new TreeNode("DUKPT KSN MAK");
            TreeNode dk7 = new TreeNode("DUKPT KSN REK");
            TreeNode dk8 = new TreeNode("DUKPT KSN HSM");
            // TreeNode rki = new TreeNode("Execute RKI");
            //  TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            // TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            //TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            // TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode ufw = new TreeNode("Update Firmware");
            TreeNode dnode1 = new TreeNode("Reboot Device");
            TreeNode kiii1 = new TreeNode("Enable KIII");
            TreeNode kiii2 = new TreeNode("Disable KIII");
            TreeNode kiii3 = new TreeNode("Set UID");
            TreeNode kiii4 = new TreeNode("Get Versions");
            TreeNode onnot = new TreeNode("Turn On Notifications");
            TreeNode offnot = new TreeNode("Turn Off Notifications");
            TreeNode pae = new TreeNode("Send PAE Command");

            TreeNode[] darray = new TreeNode[]
            {
                e1, c2, kiii4, dnode1, dnode4, fw, sn, mn, dnode5, pollcr, dk1, dk3, dk6, dk7, dk8, ufw, dnode1,
                kiii1, kiii2, kiii3, onnot, offnot,pae
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode rkiClient01 = new TreeNode("PKI RKI (Demo)");
            TreeNode rkiClient02 = new TreeNode("PKI RKI (Production)");
            TreeNode[] rArrayClient = new TreeNode[] { rkiClient01, rkiClient02 };

            TreeNode rkiCommandClient = new TreeNode("Remote Key Injection", rArrayClient);
            tvCommands.Nodes.Add(rkiCommandClient);

            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode grs = new TreeNode("Get ICC Reader Status");
            TreeNode grss = new TreeNode("Get ICC Status");

            TreeNode[] iarray = new TreeNode[] { oicc, ficc, grs, grss };
            TreeNode icc = new TreeNode("ICC", iarray);
            tvCommands.Nodes.Add(icc);



            TreeNode ea = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode ret = new TreeNode("Retrieve Tags");
            TreeNode[] transaction = new TreeNode[] { ea, e2, e3, e4, ret, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);

            TreeNode tid1 = new TreeNode("Set Kernel Config");
            TreeNode tc = new TreeNode("Get Kernel Config");
            TreeNode tid = new TreeNode("Get Terminal ID");
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa8 = new TreeNode("Remove Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode aa9b = new TreeNode("Clear Transaction Log");
            TreeNode[] terminal = new TreeNode[] { tid1, tc, tid, aa7, aa8, aa9, aa9z, aa9x, aa9b };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);

            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);


            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15 };
            TreeNode _capk = new TreeNode("CAPK", capk);


            TreeNode aa16 = new TreeNode("Remove CRL");
            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa16, aa17, aa18, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);


            TreeNode[] karray = new TreeNode[] { _transaction, _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);
            tvCommands.Nodes.Add(emv);

            TreeNode pnode2 = new TreeNode("Get PIN from MSR");
            TreeNode ce = new TreeNode("Cancel PIN Entry");

            TreeNode[] parray = new TreeNode[] { pnode2, ce };
            TreeNode pin = new TreeNode("PIN", parray);
            tvCommands.Nodes.Add(pin);
            addVivoConfig();

        }

        private void buildUniPayTree()
        {
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode expon = new TreeNode("Exp. Mask ON");
            TreeNode expoff = new TreeNode("Exp. Mask OFF");
            TreeNode getexp = new TreeNode("Get Exp. Mask");
            TreeNode panclear = new TreeNode("Set PAN Clear Digits");
            TreeNode gpanclear = new TreeNode("Get PAN Clear Digits");
            TreeNode swforce = new TreeNode("Set Swipe Force Enc.");
            TreeNode gswforce = new TreeNode("Get Swipe Force Enc.");
            TreeNode swipeMask = new TreeNode("Set Swipe Mask");
            TreeNode gswipeMask = new TreeNode("Get Swipe Mask");
            TreeNode tdes = new TreeNode("Set Swipe TDES");
            TreeNode aes = new TreeNode("Set Swipe AES");
            TreeNode enc = new TreeNode("Get Swipe Encryption");
            TreeNode sMulti = new TreeNode("Set MSR Setting");
            TreeNode gMulti = new TreeNode("Get MSR Setting");

            TreeNode[] marray = new TreeNode[]
            {
                mnode1, mnode2, expon, expoff, getexp, panclear, gpanclear, swforce, gswforce, swipeMask, gswipeMask,
                tdes, aes,
                enc, sMulti, gMulti
            };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode dnode1 = new TreeNode("Reboot Device");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode dnode3 = new TreeNode("Battery Voltage");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode blv = new TreeNode("Bootloader Version");
            TreeNode di = new TreeNode("Device Info");
            TreeNode rki = new TreeNode("Execute RKI");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode[] darray = new TreeNode[] { dnode1, dnode2, dnode3, fw, blv, di, rki, pae };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode[] carray = new TreeNode[] { sn, mn };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);

            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode apdu = new TreeNode("Send APDU");
            TreeNode ktype = new TreeNode("Get ICC DUKPT Key Type");
            TreeNode ftdes = new TreeNode("Set Format TDES");
            TreeNode faes = new TreeNode("Set Format AES");
            TreeNode iffc = new TreeNode("Get ICC DUKPT Format Type");
            TreeNode grs = new TreeNode("Get ICC Reader Status");
            TreeNode aksn = new TreeNode("Get APDU KSN");


            TreeNode[] iarray = new TreeNode[] { oicc, ficc, apdu, ktype, ftdes, faes, iffc, grs, aksn };
            TreeNode icc = new TreeNode("ICC", iarray);
            tvCommands.Nodes.Add(icc);
            addVivoConfig();

        }

        private void buildVP3300Tree()
        {

            TreeNode setDate = new TreeNode("Set Date");
            TreeNode getDate = new TreeNode("Get Date");
            TreeNode setTime = new TreeNode("Set Time");
            TreeNode getTime = new TreeNode("Get Time");
            TreeNode[] marray2 = new TreeNode[] { setDate, getDate, setTime, getTime };
            TreeNode config = new TreeNode("Config", marray2);
            tvCommands.Nodes.Add(config);


            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode[] marray = new TreeNode[] { mnode1, mnode2 };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);
            TreeNode e1 = new TreeNode("Start Trans");
            TreeNode c2 = new TreeNode("Cancel Trans");
            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ic = new TreeNode("Interface Control");
            TreeNode lOn = new TreeNode("LED On");
            TreeNode lOff = new TreeNode("LED OFF");
            TreeNode lBlink = new TreeNode("LED Blink");
            TreeNode ept = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt = new TreeNode("Disable ICC Passthrough");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode rki = new TreeNode("Execute RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode smr = new TreeNode("Set Merchant Record");
            TreeNode gmr = new TreeNode("Get Merchant Record");
            TreeNode d44 = new TreeNode("Get Transaction Results");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode getProductType = new TreeNode("Get Product Type");
            TreeNode getProcessorType = new TreeNode("Get Processor Type");
            TreeNode getHDInfor = new TreeNode("Get Hardware Information");
            TreeNode getUID = new TreeNode("Get UID of MCU");
            TreeNode mver = new TreeNode("Get Module Version Information");
            TreeNode bl = new TreeNode("Get USB Boot Loader Information");
            TreeNode keyTimeout = new TreeNode("Get Remote Key Injection Timeout");
            TreeNode ct = new TreeNode("Get Cash Transaction Reader Risk Parameters");
            TreeNode drlReader = new TreeNode("Get DRL Reader Risk Parameters");
            TreeNode kb = new TreeNode("USB KB Mode");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode spm = new TreeNode("Set Poll Mode");
            TreeNode gpm = new TreeNode("Get Poll Mode");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode reboot = new TreeNode("Reboot Device");
            TreeNode kbm = new TreeNode("KB Mode Status");

            TreeNode[] darray = new TreeNode[]
            {
                kbm,e1, c2, dnode1, dnode2, fw, sn, ping, ic, lOn, lOff, lBlink,
                ept, dpt, bmop, bmof, ap, pd, rki,rki01,rki02,rki03,rki04, smr, gmr, d44, ufw, getProductType, getProcessorType,
                getHDInfor, getUID, mver, bl, keyTimeout, ct, drlReader, kb, hid,spm,gpm,pae,sdt,gdt,reboot
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode apdu = new TreeNode("Send APDU");
            TreeNode ept2 = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt2 = new TreeNode("Disable ICC Passthrough");
            TreeNode grs = new TreeNode("Get ICC Reader Status");

            TreeNode[] iarray = new TreeNode[] { ept2, dpt2, oicc, ficc, apdu, grs };
            TreeNode icc = new TreeNode("ICC", iarray);
            tvCommands.Nodes.Add(icc);

            TreeNode e111 = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode ret = new TreeNode("Retrieve Tags");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode[] transaction = new TreeNode[] { e111, e2, e3, e4, ret, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);


            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);

            TreeNode tid1 = new TreeNode("Set Kernel Config");
            ;
            TreeNode tc = new TreeNode("Get Kernel Config");
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode remove = new TreeNode("Remove Terminal Data");
            TreeNode[] terminal = new TreeNode[] { tid1, tc, aa7, aa9, aa9z, aa9x, remove };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);

            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);

            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa18a = new TreeNode("Remove CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa17, aa18, aa18a, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);

            TreeNode[] karray = new TreeNode[] { _transaction, _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);

            tvCommands.Nodes.Add(emv);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c222 = new TreeNode("Cancel CTLS Trans");
            TreeNode activate = new TreeNode("Activate Transaction");
            TreeNode[] ctransaction = new TreeNode[] { c1, c222, activate };
            TreeNode _ctransaction = new TreeNode("Transaction", ctransaction);

            TreeNode ca1 = new TreeNode("Retrieve AID ");
            TreeNode ca2 = new TreeNode("Remove AID ");
            TreeNode ca3 = new TreeNode("List CTLS AID");
            TreeNode ca4 = new TreeNode("Save AID ");
            //TreeNode ca6 = new TreeNode("Load Default AID ");
            TreeNode[] caid = new TreeNode[] { ca1, ca2, ca3, ca4 };
            TreeNode _caid = new TreeNode("AID", caid);

            TreeNode ca7 = new TreeNode("Get Terminal Data ");
            TreeNode ca8 = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
            TreeNode cal = new TreeNode("Get Config Group ");
            TreeNode ca9 = new TreeNode("Get All Config Groups ");
            TreeNode ca17 = new TreeNode("Remove Config Group ");
            TreeNode ca18 = new TreeNode("Remove All Config Groups ");
            TreeNode avt = new TreeNode("Show ApplePay VAS Tags");
            TreeNode ca44 = new TreeNode("Save Configuration Group");
            TreeNode def = new TreeNode("Load Default Configuration ");
            TreeNode[] cterminal = new TreeNode[] { ca7, ca8, ca888, cal, ca9, ca17, ca18, avt, ca44, def };
            TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);



            TreeNode ca10 = new TreeNode("Retrieve CAPK ");
            TreeNode ca11 = new TreeNode("Remove CAPK ");
            TreeNode ca12 = new TreeNode("List CAPK ");
            TreeNode ca13 = new TreeNode("Save CAPK ");
            TreeNode ca14 = new TreeNode("Remove All CAPK ");
            TreeNode ca15 = new TreeNode("Load Default CAPK ");

            TreeNode ca16 = new TreeNode("Load CTLS CAPK From Disk ");
            TreeNode[] ccapk = new TreeNode[] { ca10, ca11, ca12, ca13, ca14, ca15, ca16 };
            TreeNode _ccapk = new TreeNode("CAPK", ccapk);

            TreeNode[] ctarray = new TreeNode[] { _ctransaction, _cterminal, _caid, _ccapk };
            TreeNode ctls = new TreeNode("CTLS", ctarray);
            tvCommands.Nodes.Add(ctls);



            addVivoConfig();
        }

        private void buildNEOFWTree()
        {

            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { buildNEOFWTree(); });
                return;
            }


            tvCommands.Nodes.Clear();

            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode ufwip = new TreeNode("Update Device Firmware");
            tvCommands.Nodes.Add(fw);
            tvCommands.Nodes.Add(ufwip);

        }

        private void buildNEOTree()
        {

            if (InvokeRequired)
            {
                Invoke((MethodInvoker)delegate { buildNEOTree(); });
                return;
            }
            IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_NEO2, IDT_Device.getConnectionType());
            if (comm == null) return;

            IDTechComm currentComm = IDTechComm.currentComm();
            if (comm.getDeviceConnection() == DEVICE_INTERFACE_Types.DEVICE_INTERFACE_USB && comm.usbDevice.PID == 0x4470)
            {
                buildNEOFWTree();
                return;
            }


            tvCommands.Nodes.Clear();
            bool isPassThroughL100 = false;
            bool isPassThroughL80 = false;
            if (comm != null && comm.enablePassthrough)
            {
                buildL100Tree();
                isPassThroughL100 = true;
                return;
            }
            if (comm != null && comm.enablePassthroughl80)
            {
                buildL80Tree();
                isPassThroughL80 = true;
                return;
            }
            TreeNode mnode1 = new TreeNode("Start MSR");

            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode mnode3 = new TreeNode("Set Tracks");
            TreeNode mnode4 = new TreeNode("Get Tracks");
            TreeNode scon = new TreeNode("Set Configuration");
            TreeNode gcon = new TreeNode("Get Configuration");

            TreeNode[] marray = new TreeNode[] { mnode1, mnode2, mnode3, mnode4, scon, gcon };
            TreeNode msr = new TreeNode("MSR", marray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(msr);
            TreeNode e1 = new TreeNode("Start Trans");
            TreeNode c2 = new TreeNode("Cancel Trans");

            TreeNode c2222d = new TreeNode("Approve Online CTLS Trans");
            TreeNode e2d = new TreeNode("Authenticate EMV Trans");
            TreeNode e3d = new TreeNode("Complete EMV Trans");
            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode blv = new TreeNode("Bootloader Version");
            TreeNode rt1050fw = new TreeNode("Get RT1050 Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ic = new TreeNode("Interface Control");
            TreeNode lOn = new TreeNode("LED On");
            TreeNode lOff = new TreeNode("LED OFF");
            // TreeNode lBlink = new TreeNode("LED Blink");
            TreeNode ept = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt = new TreeNode("Disable ICC Passthrough");
            TreeNode ept1 = new TreeNode("Enable L100 Passthrough");
            TreeNode ept1a = new TreeNode("Enable L80 Passthrough");
            //TreeNode dpt1 = new TreeNode("Disable L100 Passthrough");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            //TreeNode rki = new TreeNode("Execute RKI");
            // TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            //TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            // TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            // TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode smr = new TreeNode("Set Merchant Record");
            TreeNode gmr = new TreeNode("Get Merchant Record");
            TreeNode d44 = new TreeNode("Get Transaction Results");
            TreeNode ufw2 = new TreeNode("Update Firmware/Kernels");


            TreeNode dnode235 = new TreeNode("Execute RKI");
            TreeNode sockets = new TreeNode("Established IP Sockets");
            TreeNode sockets1 = new TreeNode("Start IP Connection Monitor");
            TreeNode sockets2 = new TreeNode("Stop IP Connection Monitor");
            TreeNode tid1a = new TreeNode("Get TransArmor ID");
            TreeNode tid2a = new TreeNode("Set TransArmor ID");
            TreeNode tid2e = new TreeNode("Set TransArmor Encryption");

            TreeNode lowPower = new TreeNode("Enter Low Power Mode");

            TreeNode deletefa = new TreeNode("Delete File");
            TreeNode transfera = new TreeNode("Transfer File");
            TreeNode lista = new TreeNode("List Directory");
            TreeNode deletea = new TreeNode("Delete Directory");

            TreeNode disBlueLED = new TreeNode("Disable Blue LED Sequence");
            TreeNode enaBlueLED = new TreeNode("Enable Blue LED Sequence");
            TreeNode offYellowLED = new TreeNode("Turn Off Yellow LED");
            TreeNode onYellowLED = new TreeNode("Turn On Yellow LED");
            TreeNode buzzerOnOff = new TreeNode("Buzzer On/Off");
            TreeNode reboot = new TreeNode("Reboot Device");
            TreeNode getLightSensor = new TreeNode("Get Light Sensor Value");
            TreeNode selfCheck = new TreeNode("Set Self-Check Time");
            TreeNode selfCheck2 = new TreeNode("Get Self-Check Time");
            TreeNode clock = new TreeNode("Get Device Time");
            TreeNode sdk = new TreeNode("SDK Status");
            TreeNode dnode3 = new TreeNode("Battery Voltage");
            TreeNode getProductType = new TreeNode("Get Product Type");
            TreeNode getProcessorType = new TreeNode("Get Processor Type");
            TreeNode getHDInfor = new TreeNode("Get Hardware Information");
            TreeNode getUID = new TreeNode("Get UID of MCU");
            TreeNode mver = new TreeNode("Get Module Version Information");
            TreeNode bl = new TreeNode("Get USB Boot Loader Information");
            TreeNode drlReader = new TreeNode("Get DRL Reader Risk Parameters");
            TreeNode msrPara = new TreeNode("Get MSR Secure Parameters");
            TreeNode standby = new TreeNode("Standby Mode");
            TreeNode log1 = new TreeNode("Read Log");
            TreeNode log2 = new TreeNode("Clear Log");
            TreeNode log3 = new TreeNode("Enable Log");
            TreeNode log4 = new TreeNode("Disable Log");
            TreeNode log5 = new TreeNode("Enable Extended Errors");
            TreeNode log6 = new TreeNode("Disable Extended Errors");
            TreeNode fw22 = new TreeNode("Terminal Info");
            TreeNode start = new TreeNode("Start Listen Notifications");
            TreeNode stop = new TreeNode("Stop Listen Notifications");
            TreeNode pae2 = new TreeNode("Send PAE Command");
            TreeNode ufw3 = new TreeNode("Poll For Token");
            TreeNode[] darray = new TreeNode[]
            {
                e1, c2, c2222d, e2d, e3d, dnode1, dnode2, fw,blv, rt1050fw, sn, ping, ic, lOn, lOff,

                ept, dpt, ept1,ept1a, bmop, bmof, ap, pd,  smr, gmr, d44, ufw2, dnode235, sockets,
                sockets1, sockets2, tid1a, tid2a, tid2e, lowPower, deletefa, transfera, disBlueLED, enaBlueLED, onYellowLED,
                offYellowLED, buzzerOnOff, reboot, getLightSensor, clock, selfCheck, selfCheck2, sdk, getProductType,
                getProcessorType, getHDInfor, getUID, mver, bl, drlReader, msrPara, standby, dnode3, log1, log2, log3, log4,log5, log6,fw22,start,stop,pae2,deletea,lista, ufw3
            };

            TreeNode device = new TreeNode("Device", darray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(device);

            TreeNode fw5 = new TreeNode("Firmware Version");
            TreeNode ufw25 = new TreeNode("Update Firmware/Kernels");
            TreeNode uak = new TreeNode("Update All Kernels");

            TreeNode[] darray5 = new TreeNode[]
            {
                fw5, ufw25, uak
            };

            TreeNode device5 = new TreeNode("Firmware", darray5);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(device5);

            TreeNode felica1 = new TreeNode("FeliCa Authentication");
            TreeNode felica2 = new TreeNode("FeliCa Send Command");
            TreeNode felica3 = new TreeNode("FeliCa Read");
            TreeNode felica4 = new TreeNode("FeliCa Read w/Mac");
            TreeNode felica5 = new TreeNode("FeliCa Write");
            TreeNode felica6 = new TreeNode("FeliCa Write w/Mac");
            TreeNode felica7 = new TreeNode("FeliCa Request Service");

            TreeNode[] darray6 = new TreeNode[]
            {
                felica1, felica2, felica3, felica4, felica5, felica6, felica7
            };

            TreeNode felica = new TreeNode("FeliCa", darray6);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(felica);


            TreeNode rkiClient01 = new TreeNode("PKI RKI (Demo)");
            TreeNode rkiClient02 = new TreeNode("PKI RKI (Production)");
            TreeNode[] rArrayClient = new TreeNode[] { rkiClient01, rkiClient02 };

            TreeNode rkiCommandClient = new TreeNode("Remote Key Injection", rArrayClient);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(rkiCommandClient);


            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode apdu = new TreeNode("Send APDU");
            TreeNode ept2 = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt2 = new TreeNode("Disable ICC Passthrough");
            TreeNode grs = new TreeNode("Get ICC Reader Status");
            TreeNode nfc = new TreeNode("Send NFC Command");

            TreeNode[] iarray = new TreeNode[] { ept2, dpt2, oicc, ficc, apdu, grs, nfc };
            TreeNode icc = new TreeNode("ICC", iarray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(icc);


            TreeNode av1 = new TreeNode("Start Screen Saver");
            TreeNode av2 = new TreeNode("Play Audio");
            TreeNode av3 = new TreeNode("Stop Audio");
            TreeNode av4 = new TreeNode("Start QR Scan");
            TreeNode av5 = new TreeNode("Stop QR Scan");
            TreeNode av6 = new TreeNode("Start Camera Capture");
            TreeNode av7 = new TreeNode("Stop Camera Capture");
            TreeNode pan = new TreeNode("Get Pan");
            TreeNode[] avarray = new TreeNode[] { av1, av2, av3, av4, av5, av6, av7, pan };
            TreeNode vp6800 = new TreeNode("VP6800", avarray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(vp6800);


            TreeNode e111 = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode ret = new TreeNode("Retrieve Tags");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode[] transaction = new TreeNode[] { e111, e2, e3, e4, ret, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);


            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);

            TreeNode tid1 = new TreeNode("Set Kernel Config");
            TreeNode tc = new TreeNode("Get Kernel Config");
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode remove = new TreeNode("Remove Terminal Data");
            TreeNode[] terminal = new TreeNode[] { tid1, tc, aa7, aa9, aa9z, aa9x, remove };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);

            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);

            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa18a = new TreeNode("Remove CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa17, aa18, aa18a, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);

            TreeNode[] karray = new TreeNode[] { _transaction, _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);

            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(emv);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c2222 = new TreeNode("Approve Online CTLS Trans");
            TreeNode c222 = new TreeNode("Cancel CTLS Trans");
            TreeNode activate = new TreeNode("Activate Transaction");
            TreeNode[] ctransaction = new TreeNode[] { c1, c2222, c222, activate };
            TreeNode _ctransaction = new TreeNode("Transaction", ctransaction);

            TreeNode ca1 = new TreeNode("Retrieve AID ");
            TreeNode ca2 = new TreeNode("Remove AID ");
            TreeNode ca3 = new TreeNode("List CTLS AID");
            TreeNode ca4 = new TreeNode("Save AID ");
            // TreeNode ca6 = new TreeNode("Load Default AID ");
            TreeNode[] caid = new TreeNode[] { ca1, ca2, ca3, ca4 };
            TreeNode _caid = new TreeNode("AID", caid);

            TreeNode ca7 = new TreeNode("Get Terminal Data ");
            TreeNode ca8 = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
            TreeNode ca9 = new TreeNode("Get All Config Groups ");
            TreeNode cal = new TreeNode("Get Config Group ");
            TreeNode ca17 = new TreeNode("Remove Config Group ");
            TreeNode ca18 = new TreeNode("Remove All Config Groups ");
            TreeNode avt = new TreeNode("Show ApplePay VAS Tags");
            TreeNode ca44 = new TreeNode("Save Configuration Group");
            TreeNode def = new TreeNode("Load Default Configuration ");
            TreeNode[] cterminal = new TreeNode[] { ca7, ca8, ca888, cal, ca9, ca17, ca18, avt, ca44, def };
            TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);



            TreeNode ca10 = new TreeNode("Retrieve CAPK ");
            TreeNode ca11 = new TreeNode("Remove CAPK ");
            TreeNode ca12 = new TreeNode("List CAPK ");
            TreeNode ca13 = new TreeNode("Save CAPK ");
            TreeNode ca14 = new TreeNode("Remove All CAPK ");
            TreeNode ca15 = new TreeNode("Load Default CAPK ");
            TreeNode ca16 = new TreeNode("Load CTLS CAPK From Disk ");
            TreeNode[] ccapk = new TreeNode[] { ca10, ca11, ca12, ca13, ca14, ca15, ca16 };
            TreeNode _ccapk = new TreeNode("CAPK", ccapk);

            TreeNode[] ctarray = new TreeNode[] { _ctransaction, _cterminal, _caid, _ccapk };
            TreeNode ctls = new TreeNode("CTLS", ctarray);

            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(ctls);

            TreeNode pnode1 = new TreeNode("Capture PIN");
            TreeNode pnode2 = new TreeNode("Capture PIN Extended");
            TreeNode pke = new TreeNode("Prompt Key Input");
            TreeNode pae = new TreeNode("Prompt Amt Input");
            TreeNode ce = new TreeNode("Cancel PIN Entry");
            TreeNode getf = new TreeNode("Get Function Key");
            TreeNode beep = new TreeNode("Send Beep");

            TreeNode pan3a = new TreeNode("Key Values ON");
            TreeNode pan4b = new TreeNode("Key Values OFF");
            TreeNode pan5b = new TreeNode("Get Key Values");

            TreeNode[] parray = new TreeNode[] { pnode1, pnode2, pke, pae, getf, ce, beep, pan3a, pan4b, pan5b };
            TreeNode pin = new TreeNode("Pin", parray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(pin);


            TreeNode net1 = new TreeNode("Set Network");
            TreeNode net2 = new TreeNode("Get Network");
            TreeNode net4 = new TreeNode("Get Ethernet Mac Address");
            TreeNode net5 = new TreeNode("Set BLE Parameters");
            TreeNode net7 = new TreeNode("Set Swipe and Done");
            TreeNode net8 = new TreeNode("Get Swipe and Done");
            TreeNode swl = new TreeNode("Set White List ");
            TreeNode sw2 = new TreeNode("Get White List ");
            TreeNode sw2a = new TreeNode("Set Track Format");
            TreeNode sw2b = new TreeNode("Get Track Format");
            TreeNode sw2c = new TreeNode("Set Masking");
            TreeNode sw2d = new TreeNode("Get Masking");



            TreeNode[] carray = new TreeNode[]
                {net1, net2, net4, net5, net7, net8, swl, sw2, sw2a, sw2b, sw2c, sw2d};
            TreeNode config = new TreeNode("Config", carray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(config);

            TreeNode dtm = new TreeNode("Display Message");
            TreeNode ctd = new TreeNode("Clear Display");
            TreeNode l21 = new TreeNode("Create Screen");
            TreeNode l211 = new TreeNode("Destroy Screen");
            TreeNode l2111 = new TreeNode("Get Active Screen");

            TreeNode l2 = new TreeNode("Show Screen");
            TreeNode l3 = new TreeNode("Get Button Event");
            TreeNode l4 = new TreeNode("Add Button");
            TreeNode l5 = new TreeNode("Add Text");
            TreeNode l6 = new TreeNode("Update Label");
            TreeNode l7 = new TreeNode("Update Color");
            TreeNode l8 = new TreeNode("Update Position");
            TreeNode l9 = new TreeNode("Remove Object");
            TreeNode l10a = new TreeNode("Add Ethernet");
            TreeNode l11 = new TreeNode("Add LED");
            TreeNode l23 = new TreeNode("Add Image");
            TreeNode l12 = new TreeNode("Clone Screen");
            TreeNode l13 = new TreeNode("Store Screen Info");
            TreeNode l14 = new TreeNode("Load Screen Info");
            TreeNode l15 = new TreeNode("Clear Screen Info");
            TreeNode l16 = new TreeNode("Get All Screens");
            TreeNode l17 = new TreeNode("Get All Objects on Screen");
            TreeNode l18 = new TreeNode("Query Screen by Name");
            TreeNode l19 = new TreeNode("Query Object by Name");
            TreeNode l20 = new TreeNode("Query Screen by ID");
            TreeNode l22 = new TreeNode("Query Object by ID");
            TreeNode l24 = new TreeNode("Set Backlight");
            TreeNode l30 = new TreeNode("Link MessageID to Screen");

            TreeNode[] lcdarray = new TreeNode[]
            {
                ctd, dtm, l21, l211, l2111, l2, l3, l4,  l10a, l11, l12, l5, l6, l7, l8, l9, l13, l14, l15, l16,
                l17, l18, l19, l20, l22, l23, l24, l30
            };
            TreeNode lcd = new TreeNode("LCD", lcdarray);
            if (!isPassThroughL100 && !isPassThroughL80) tvCommands.Nodes.Add(lcd);



            TreeNode dpt11 = new TreeNode("Disable L100 Passthrough");
            TreeNode dpt11a = new TreeNode("Disable L80 Passthrough");
            TreeNode dnode1x = new TreeNode("Send Data Command");
            TreeNode fwx = new TreeNode("Firmware Version");
            TreeNode rd = new TreeNode("Reboot Device");
            TreeNode gks = new TreeNode("Get Key Status");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode esm = new TreeNode("Enter Stop Mode");
            TreeNode ssm = new TreeNode("Set Sleep Mode");
            TreeNode rkix = new TreeNode("Execute Legacy RKI");
            TreeNode rki01a = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02a = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03a = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04a = new TreeNode("PKI RKI - PROD");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode ufwa = new TreeNode("Update Device Firmware");


            TreeNode[] darrayx = new TreeNode[] { dnode1x, fwx, rd, gks, sdt, gdt, esm, ssm, rkix, rki01a, rki02a, rki03a, rki04a, url, ufwa };
            TreeNode devicex = new TreeNode("Device", darrayx);

            TreeNode pnode1x = new TreeNode("Get Encrypted PIN ");
            TreeNode pkex = new TreeNode("Prompt Key Entry");
            TreeNode paex = new TreeNode("Prompt Amt Entry");
            TreeNode cex = new TreeNode("Cancel PIN Entry");
            TreeNode getfx = new TreeNode("Get Function Key");
            TreeNode beepx = new TreeNode("Send Beep");
            TreeNode pan2 = new TreeNode("Get Pan ");
            TreeNode pan3 = new TreeNode("Key Values ON");
            TreeNode pan4 = new TreeNode("Key Values OFF");


            TreeNode[] parrayx = new TreeNode[] { pnode1x, pkex, paex, getfx, cex, beepx, pan2, pan3, pan4 };
            TreeNode pinx = new TreeNode("Pin", parrayx);

            TreeNode snx = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode sbr = new TreeNode("Set Baud");
            TreeNode gbr = new TreeNode("Get Baud");
            TreeNode[] carrayx = new TreeNode[] { snx, mn, sbr, gbr };
            TreeNode configx = new TreeNode("Config", carrayx);


            TreeNode cln = new TreeNode("Clear Line #");
            TreeNode stp = new TreeNode("Save Prompt");
            TreeNode dtp = new TreeNode("Display Prompt");
            TreeNode dtmx = new TreeNode("Display Message");
            TreeNode etb = new TreeNode("Enable Backlight");
            TreeNode disb = new TreeNode("Disable Backlight");
            TreeNode tbs = new TreeNode("Backlight Status");
            TreeNode ctdx = new TreeNode("Clear Display");

            TreeNode[] lcdarrayx = new TreeNode[] { ctdx, cln, stp, dtp, dtmx, etb, disb, tbs };
            TreeNode lcdx = new TreeNode("LCD", lcdarrayx);
            if (isPassThroughL100)
            {
                TreeNode[] l100arrays = new TreeNode[] { dpt11, devicex, pinx, configx, lcdx };
                TreeNode lcdxx = new TreeNode("L100 Passthrough", l100arrays);

                tvCommands.Nodes.Add(lcdxx);
            }
            else if (isPassThroughL80)
            {
                TreeNode[] l100arrays = new TreeNode[] { dpt11a, devicex, pinx, configx, lcdx };
                TreeNode lcdxx = new TreeNode("L80 Passthrough", l100arrays);

                tvCommands.Nodes.Add(lcdxx);
            }


            addVivoConfig();





        }


        private void buildVP8800Tree()
        {
            IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_VP8800,
                DEVICE_INTERFACE_Types.DEVICE_INTERFACE_USB);

            if (comm != null && (comm.isAlternate == 1))
            {
                TreeNode dpt = new TreeNode("Continue Booting");
                TreeNode ufw = new TreeNode("Update Device Firmware");
                TreeNode[] darray = new TreeNode[]
                {
                    dpt,ufw
                };
                TreeNode device = new TreeNode("Device", darray);
                tvCommands.Nodes.Add(device);
            }
            else
            {
                TreeNode mnode1 = new TreeNode("Start MSR");
                TreeNode mnode2 = new TreeNode("Cancel MSR");
                TreeNode mnode3 = new TreeNode("Flush Track Data");
                TreeNode[] marray = new TreeNode[] { mnode1, mnode2, mnode3 };
                TreeNode msr = new TreeNode("MSR", marray);
                tvCommands.Nodes.Add(msr);

                TreeNode n1 = new TreeNode("Complete EMV Trans");
                TreeNode n3 = new TreeNode("Get Transaction Results");
                TreeNode n4 = new TreeNode("Auto Poll");
                TreeNode n5 = new TreeNode("Poll On Demmand");
                TreeNode e1 = new TreeNode("Start Trans");
                TreeNode c2 = new TreeNode("Cancel Trans");
                TreeNode dnode1 = new TreeNode("Send NEO Command");
                TreeNode dnode2 = new TreeNode("Send Data Command");
                TreeNode fw = new TreeNode("Firmware Version");
                TreeNode sn = new TreeNode("Get Serial Number");
                TreeNode ping = new TreeNode("Ping Device");
                TreeNode ept = new TreeNode("Enable ICC Passthrough");
                TreeNode dpt = new TreeNode("Disable ICC Passthrough");
                TreeNode ufw = new TreeNode("Update Device Firmware");
                TreeNode fdsa = new TreeNode("Free Drive Space");
                TreeNode lista = new TreeNode("List Directory");
                TreeNode createa = new TreeNode("Create Directory");
                TreeNode deletea = new TreeNode("Delete Directory");
                TreeNode deletefa = new TreeNode("Delete File");
                TreeNode transfera = new TreeNode("Transfer File");

                TreeNode[] file = new TreeNode[] { fdsa, lista, createa, deletea, deletefa, transfera };
                TreeNode _file = new TreeNode("File System", file);

                TreeNode delay = new TreeNode("Calibration");

                TreeNode _aid = new TreeNode("List ALL AIDs");


                TreeNode b1 = new TreeNode("Single Beep");
                TreeNode b2 = new TreeNode("Double Beep");
                TreeNode b3 = new TreeNode("Three Short Beeps");
                TreeNode b4 = new TreeNode("Four Short Beeps");
                TreeNode b5 = new TreeNode("200ms Beep");
                TreeNode b6 = new TreeNode("400ms Beep");
                TreeNode b7 = new TreeNode("600ms Beep");
                TreeNode b8 = new TreeNode("800ms Beep");
                TreeNode[] barray = new TreeNode[] { b1, b2, b3, b4, b5, b6, b7, b8 };
                TreeNode bdevice = new TreeNode("Beep", barray);

                TreeNode l1 = new TreeNode("LED 0 Off");
                TreeNode l2 = new TreeNode("LED 0 On");
                TreeNode l3 = new TreeNode("LED 1 Off");
                TreeNode l4 = new TreeNode("LED 1 On");
                TreeNode l5 = new TreeNode("LED 2 Off");
                TreeNode l6 = new TreeNode("LED 2 On");
                TreeNode l7 = new TreeNode("LED 3 Off");
                TreeNode l8 = new TreeNode("LED 3 On");
                TreeNode l9 = new TreeNode("All LED Off");
                TreeNode l10 = new TreeNode("All LED ON");
                TreeNode ll1 = new TreeNode("ICC LED Off");
                TreeNode ll2 = new TreeNode("ICC LED On");
                TreeNode ll3 = new TreeNode("BLUE MSR LED Off");
                TreeNode ll4 = new TreeNode("BLUE MSR LED On");
                TreeNode ll5 = new TreeNode("RED MSR LED Off");
                TreeNode ll6 = new TreeNode("RED MSR LED On");
                TreeNode ll7 = new TreeNode("GREEN LED Off");
                TreeNode ll8 = new TreeNode("GREEN LED On");
                TreeNode[] larray = new TreeNode[]
                    {l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, ll1, ll2, ll3, ll4, ll5, ll6, ll7, ll8};
                TreeNode ldevice = new TreeNode("LED", larray);

                TreeNode ca7t = new TreeNode("Get Terminal Data ");
                TreeNode ca8t = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
                TreeNode ca9ta = new TreeNode("Get Config Group ");
                TreeNode ca9t = new TreeNode("Get All Config Groups ");
                TreeNode ca44t = new TreeNode("Save Configuration Group");
                //TreeNode ca10tae1 = new TreeNode("Remove Config Group");
                TreeNode ca11tae1 = new TreeNode("Reset Config Group");
                TreeNode[] cterminal = new TreeNode[] { ca7t, ca8t, ca888, ca9ta, ca9t, ca44t, ca11tae1 };
                TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);
                TreeNode demo = new TreeNode("Run Demo From Device");
                TreeNode dnode235 = new TreeNode("Execute RKI");
                TreeNode mver = new TreeNode("Get Module Version Information");
                TreeNode msrPara = new TreeNode("Get MSR Secure Parameters");
                TreeNode pae = new TreeNode("Send PAE Command");
                TreeNode[] darray = new TreeNode[]
                {
                e1, c2, n1, n3, dnode1, dnode2, fw, sn, ping,
                ept, dpt, delay, bdevice, ldevice, _aid, _cterminal, _file, demo, dnode235, n4, n5,
                mver, msrPara,pae,ufw
                };
                if (comm == null)  //no firmware update unless USB and no reset usb
                {
                    darray = new TreeNode[]
                    {
                        e1, c2, n1, n3, dnode1, dnode2, fw, sn, ping,
                        ept, dpt, delay, bdevice, ldevice, _aid, _cterminal, _file, demo, dnode235, n4, n5,
                        mver, msrPara,pae
                    };
                }
                TreeNode device = new TreeNode("Device", darray);
                tvCommands.Nodes.Add(device);

                TreeNode rkiClient01 = new TreeNode("PKI RKI (Demo)");
                TreeNode rkiClient02 = new TreeNode("PKI RKI (Production)");
                TreeNode[] rArrayClient = new TreeNode[] { rkiClient01, rkiClient02 };

                TreeNode rkiCommandClient = new TreeNode("Remote Key Injection", rArrayClient);
                tvCommands.Nodes.Add(rkiCommandClient);

                TreeNode net5 = new TreeNode("Get Data Key Slot");
                TreeNode net6 = new TreeNode("Set Data Key Slot");
                TreeNode net7 = new TreeNode("Get PIN Key Slot");
                TreeNode net8 = new TreeNode("Set PIN Key Slot");
                TreeNode net9 = new TreeNode("Get Status All Key Slots");
                TreeNode net10 = new TreeNode("Get Info Single Key Slot");
                TreeNode net11 = new TreeNode("Get Certificate Info");



                TreeNode net1 = new TreeNode("Set Network");
                TreeNode net2 = new TreeNode("Get Network");
                TreeNode net3 = new TreeNode("Set Mac Address");
                TreeNode net4 = new TreeNode("Get Ethernet Mac Address");
                TreeNode[] carray = new TreeNode[] { net5, net6, net7, net8, net9, net10, net11, net1, net2, net3, net4 };
                TreeNode config = new TreeNode("Config", carray);
                tvCommands.Nodes.Add(config);

                TreeNode oicc = new TreeNode("Power On ICC");
                TreeNode ficc = new TreeNode("Power Off ICC");
                TreeNode apdu = new TreeNode("Send APDU");
                TreeNode ept2 = new TreeNode("Enable ICC Passthrough");
                TreeNode dpt2 = new TreeNode("Disable ICC Passthrough");
                TreeNode[] iarray = new TreeNode[] { ept2, dpt2, oicc, ficc, apdu };
                TreeNode icc = new TreeNode("ICC", iarray);
                tvCommands.Nodes.Add(icc);

                TreeNode kv = new TreeNode("Start EMV Trans");
                TreeNode kv2 = new TreeNode("Authenticate EMV Trans");
                TreeNode kv3 = new TreeNode("Complete EMV Trans");
                TreeNode femv = new TreeNode("Last Trans FastEMV Data");
                TreeNode c21 = new TreeNode("Cancel EMV Trans");
                TreeNode e11 = new TreeNode("Kernel Version");

                TreeNode aa1e = new TreeNode("Retrieve AID");
                TreeNode aa2e = new TreeNode("Remove AID");
                TreeNode aa3e = new TreeNode("List AID");
                TreeNode aa4e = new TreeNode("Save AID");

                TreeNode[] aide = new TreeNode[] { aa1e, aa2e, aa3e, aa4e };
                TreeNode _aide = new TreeNode("AID", aide);

                TreeNode aa10 = new TreeNode("Retrieve CAPK");
                TreeNode aa11 = new TreeNode("Remove CAPK");
                TreeNode aa12 = new TreeNode("List CAPK");
                TreeNode aa13 = new TreeNode("Save CAPK");
                TreeNode aa14 = new TreeNode("Remove All CAPK");
                TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14 };
                TreeNode _capk = new TreeNode("CAPK", capk);

                TreeNode aa17 = new TreeNode("List CRL");
                TreeNode aa18 = new TreeNode("Save CRL");
                TreeNode aa18a = new TreeNode("Remove CRL");
                TreeNode aa19 = new TreeNode("Remove All CRL");
                TreeNode aa9b3r = new TreeNode("CRL Status");
                TreeNode[] crl = new TreeNode[] { aa17, aa18, aa18a, aa19, aa9b3r };
                TreeNode _crl = new TreeNode("CRL", crl);

                TreeNode aa17e = new TreeNode("List Exceptions");
                TreeNode aa18e = new TreeNode("Save Exception");
                TreeNode aa18ae = new TreeNode("Remove Exception");
                TreeNode aa19e = new TreeNode("Remove All Exceptions");
                TreeNode aa9b212 = new TreeNode("Exemption Log Status");
                TreeNode[] exp = new TreeNode[] { aa17e, aa18e, aa18ae, aa19e, aa9b212 };
                TreeNode _exception = new TreeNode("Exception List", exp);

                TreeNode tid1 = new TreeNode("Set Kernel Config");
                TreeNode ca7te = new TreeNode("Get Terminal Data");
                TreeNode ca8te = new TreeNode("Save Terminal Data");
                TreeNode aa9x = new TreeNode("Add Terminal Data");
                TreeNode remove = new TreeNode("Remove Terminal Data");


                TreeNode ca9tae = new TreeNode("Get Config Group ");
                TreeNode ca9te = new TreeNode("Get All Config Groups ");
                TreeNode ca44te = new TreeNode("Save Configuration Group");
                //TreeNode ca10tae = new TreeNode("Remove Config Group");
                TreeNode ca11tae = new TreeNode("Reset Config Group");

                TreeNode[] cterminale = new TreeNode[] { tid1, ca7te, ca8te, aa9x, remove, ca9tae, ca9te, ca44te, ca11tae };
                TreeNode _cterminale = new TreeNode("Terminal Config", cterminale);

                TreeNode aa9b1a = new TreeNode("Clear Transaction Log");
                TreeNode aa9b2a = new TreeNode("Transaction Log Status");
                TreeNode aa9b33a = new TreeNode("Get Transaction Record");
                TreeNode aa9b4a = new TreeNode("Remove Transaction Amount Log");
                TreeNode[] tLog = new TreeNode[] { aa9b1a, aa9b2a, aa9b33a, aa9b4a };
                TreeNode _tlog = new TreeNode("Transaction Log", tLog);

                TreeNode conv = new TreeNode("Convert Old to New");
                TreeNode[] tags = new TreeNode[] { conv };
                TreeNode _tags = new TreeNode("Tags", tags);


                TreeNode[] karray = new TreeNode[]
                    {kv, kv2, kv3, c21, e11,femv, _aide, _cterminale, _capk, _crl, _exception, _tlog, _tags};
                TreeNode emv = new TreeNode("EMV", karray);



                tvCommands.Nodes.Add(emv);

                TreeNode c1 = new TreeNode("Start CTLS Trans");
                TreeNode c1a = new TreeNode("Online Result:OK");
                TreeNode c1b = new TreeNode("Online Result:NOT OK");
                TreeNode c22 = new TreeNode("Cancel CTLS Trans");
                TreeNode activate = new TreeNode("Activate Transaction");

                TreeNode aa1ec = new TreeNode("Retrieve AID ");
                TreeNode aa2ec = new TreeNode("Remove AID ");
                TreeNode aa3ec = new TreeNode("List CTLS AID");
                TreeNode aa4ec = new TreeNode("Save AID ");
                TreeNode def = new TreeNode("Load Default Configuration ");

                TreeNode[] aidec = new TreeNode[] { aa1ec, aa2ec, aa3ec, aa4ec, def };
                TreeNode _aidec = new TreeNode("AID", aidec);

                TreeNode ca10 = new TreeNode("Retrieve CAPK ");
                TreeNode ca11 = new TreeNode("Remove CAPK ");
                TreeNode ca12 = new TreeNode("List CAPK ");
                TreeNode ca13 = new TreeNode("Save CAPK ");
                TreeNode ca14 = new TreeNode("Remove All CAPK ");
                TreeNode ca15 = new TreeNode("Load Default CAPK ");
                TreeNode ca16 = new TreeNode("Load CTLS CAPK From Disk ");
                TreeNode[] ccapk = new TreeNode[] { ca10, ca11, ca12, ca13, ca14, ca15, ca16 };
                TreeNode _ccapk = new TreeNode("CAPK", ccapk);

                TreeNode ca7tec = new TreeNode("Get Terminal Data ");
                TreeNode ca8tec = new TreeNode("Save Terminal Data "); TreeNode ca888tec = new TreeNode("Try Save Terminal Data ");
                TreeNode ca9taec = new TreeNode("Get Config Group ");
                TreeNode ca9tec = new TreeNode("Get All Config Groups ");
                TreeNode ca44tec = new TreeNode("Save Configuration Group");
                TreeNode ca10tae12 = new TreeNode("Remove Config Group ");
                TreeNode ca11tae12 = new TreeNode("Reset Config Group");
                TreeNode[] cterminalec = new TreeNode[] { ca7tec, ca8tec, ca888tec, ca9taec, ca9tec, ca44tec, ca10tae12, ca11tae12 };
                TreeNode _cterminalec = new TreeNode("Terminal Config", cterminalec);

                TreeNode[] ctarray = new TreeNode[] { c1, c1a, c1b, c22, activate, _aidec, _cterminalec, _ccapk };
                TreeNode ctls = new TreeNode("CTLS", ctarray);
                tvCommands.Nodes.Add(ctls);


                TreeNode cln = new TreeNode("Reset Initial State");
                TreeNode scs = new TreeNode("Start Custom Display Mode");
                TreeNode stcs = new TreeNode("Stop Custom Display Mode");
                TreeNode sc = new TreeNode("Set Colors");
                TreeNode ctd = new TreeNode("Clear Display ");
                TreeNode cap = new TreeNode("Capture Signature");
                TreeNode sss = new TreeNode("Start Slideshow");
                TreeNode ssss = new TreeNode("Start Default Slideshow");
                TreeNode di = new TreeNode("Display Image");
                TreeNode di1 = new TreeNode("Set Background");
                TreeNode di2 = new TreeNode("Remove Background");
                TreeNode di3 = new TreeNode("Set Default Background");
                TreeNode dtext = new TreeNode("Display Text");
                TreeNode dbutton = new TreeNode("Display Button");
                TreeNode getevent = new TreeNode("Get Input Event");
                TreeNode clearevent = new TreeNode("Clear Input Event");


                TreeNode[] lcdarray = new TreeNode[] { cln, dtext, dbutton, getevent, clearevent, scs, stcs, sc, ctd, cap, sss, ssss, di, di1, di2, di3 };
                TreeNode lcd = new TreeNode("LCD", lcdarray);
                tvCommands.Nodes.Add(lcd);

                TreeNode pnode1 = new TreeNode("Get Encrypted PIN");
                TreeNode pnode2 = new TreeNode("Get PAN");
                TreeNode pnode3 = new TreeNode("Prompt Debit/Credit");



                TreeNode[] parray = new TreeNode[] { pnode1, pnode2, pnode3 };
                TreeNode pin = new TreeNode("Pin", parray);
                tvCommands.Nodes.Add(pin);

                TreeNode felica1 = new TreeNode("FeliCa Authentication");
                TreeNode felica2 = new TreeNode("FeliCa Send Command");
                TreeNode felica3 = new TreeNode("FeliCa Read");
                TreeNode felica4 = new TreeNode("FeliCa Read w/Mac");
                TreeNode felica5 = new TreeNode("FeliCa Write");
                TreeNode felica6 = new TreeNode("FeliCa Write w/Mac");
                TreeNode felica7 = new TreeNode("FeliCa Request Service");

                TreeNode[] darray6 = new TreeNode[]
                {
                felica1, felica2, felica3, felica4, felica5, felica6, felica7
                };

                TreeNode felica = new TreeNode("FeliCa", darray6);
                tvCommands.Nodes.Add(felica);
                addVivoConfig();

            }




        }

        private void buildUniPayI_VTree()
        {
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode[] marray = new TreeNode[] { mnode1, mnode2 };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ept = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt = new TreeNode("Disable ICC Passthrough");
            TreeNode rki = new TreeNode("Execute RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode drs = new TreeNode("Get DRS");
            TreeNode sc = new TreeNode("Self Check");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode dnode11 = new TreeNode("Reboot Device");
            TreeNode kb = new TreeNode("USB KB Mode");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode ca7tec = new TreeNode("Get Terminal Data  ");
            TreeNode ca8tec = new TreeNode("Save Terminal Data  ");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode kbm = new TreeNode("KB Mode Status");

            TreeNode[] darray = null;
            //TTK
            IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_UNIPAYI_V,
                DEVICE_INTERFACE_Types.DEVICE_INTERFACE_USB);
            if (comm != null && (comm.isAlternate == 1))
                darray = new TreeNode[] { kbm, dnode1, dnode2, fw, sn, ping, ept, dpt, rki, rki01, rki02, rki03, rki04, drs, sc, ufw, dnode11, pae }; //TTK
            else if (comm != null && (comm.isAlternate == 2))
                darray = new TreeNode[]
                {
                    kbm,dnode1, dnode2, fw, sn, ping, ept, dpt, rki, ufw, dnode11, hid, bmop, bmof, ap, pd, ca7tec, ca8tec,pae
                };
            else
                darray = new TreeNode[]
                    {kbm,dnode1, dnode2, fw, sn, ping, ept, dpt, rki, ufw, dnode11, kb, bmop, bmof, ap, pd, ca7tec, ca8tec,pae};
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode apdu = new TreeNode("Send APDU");
            TreeNode ept2 = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt2 = new TreeNode("Disable ICC Passthrough");
            TreeNode grs = new TreeNode("Get ICC Reader Status");

            TreeNode[] iarray = new TreeNode[] { ept2, dpt2, oicc, ficc, apdu, grs };
            TreeNode icc = new TreeNode("ICC", iarray);
            tvCommands.Nodes.Add(icc);

            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);


            TreeNode e1 = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode ret = new TreeNode("Retrieve Tags");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode[] transaction = new TreeNode[] { e1, e2, e3, e4, ret, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);



            TreeNode tid1 = new TreeNode("Set Kernel Config");
            ;
            TreeNode tc = new TreeNode("Get Kernel Config");
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode remove = new TreeNode("Remove Terminal Data");
            TreeNode[] terminal = new TreeNode[] { tid1, tc, aa7, aa9, aa9z, aa9x, remove };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);


            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);

            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa18a = new TreeNode("Remove CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa17, aa18, aa18a, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);

            TreeNode[] karray = new TreeNode[] { _transaction, _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);
            tvCommands.Nodes.Add(emv);
            addVivoConfig();
        }

        private void buildVendiTree()
        {
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode[] marray = new TreeNode[] { mnode1, mnode2 };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ic = new TreeNode("Interface Control");
            TreeNode ept = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt = new TreeNode("Disable ICC Passthrough");
            TreeNode lOn = new TreeNode("LED On");
            TreeNode lOff = new TreeNode("LED OFF");
            TreeNode lBlink = new TreeNode("LED Blink");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode rki = new TreeNode("Execute RKI");
            TreeNode smr = new TreeNode("Set Merchant Record");
            TreeNode gmr = new TreeNode("Get Merchant Record");
            TreeNode d44 = new TreeNode("Get Transaction Results");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode ufw2 = new TreeNode("List ALL AIDs");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode sbr = new TreeNode("Set Baud");
            TreeNode[] darray = new TreeNode[]
            {
                dnode1, dnode2, fw, sn, ping, ic, ept, dpt, lOn, lOff, lBlink, bmop, bmof, ap, pd, rki,rki01,rki02,rki03,rki04, smr, gmr, d44,
                ufw, ufw2,pae,sbr
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c2 = new TreeNode("Cancel CTLS Trans");
            TreeNode activate = new TreeNode("Activate Transaction");
            TreeNode[] ctransaction = new TreeNode[] { c1, c2, activate };
            TreeNode _ctransaction = new TreeNode("Transaction", ctransaction);

            TreeNode ca1 = new TreeNode("Retrieve AID ");
            TreeNode ca2 = new TreeNode("Remove AID ");
            TreeNode ca3 = new TreeNode("List CTLS AID");
            TreeNode ca4 = new TreeNode("Save AID ");
            // TreeNode ca6 = new TreeNode("Load Default AID ");
            TreeNode[] caid = new TreeNode[] { ca1, ca2, ca3, ca4 };
            TreeNode _caid = new TreeNode("AID", caid);

            TreeNode ca7 = new TreeNode("Get Terminal Data ");
            TreeNode ca8 = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
            TreeNode ca9 = new TreeNode("Get All Config Groups ");
            TreeNode avt = new TreeNode("Show ApplePay VAS Tags");
            TreeNode ca44 = new TreeNode("Save Configuration Group");
            TreeNode def = new TreeNode("Load Default Configuration ");
            TreeNode[] cterminal = new TreeNode[] { ca7, ca8, ca888, ca9, avt, ca44, def };
            TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);



            TreeNode ca10 = new TreeNode("Retrieve CAPK ");
            TreeNode ca11 = new TreeNode("Remove CAPK ");
            TreeNode ca12 = new TreeNode("List CAPK ");
            TreeNode ca13 = new TreeNode("Save CAPK ");
            TreeNode ca14 = new TreeNode("Remove All CAPK ");
            TreeNode ca15 = new TreeNode("Load Default CAPK ");
            TreeNode ca16 = new TreeNode("Load CTLS CAPK From Disk ");

            TreeNode[] ccapk = new TreeNode[] { ca10, ca11, ca12, ca13, ca14, ca15, ca16 };
            TreeNode _ccapk = new TreeNode("CAPK", ccapk);

            TreeNode[] ctarray = new TreeNode[] { _ctransaction, _cterminal, _caid, _ccapk };
            TreeNode ctls = new TreeNode("CTLS", ctarray);
            tvCommands.Nodes.Add(ctls);
            addVivoConfig();
        }

        private void buildVendIIITree()
        {
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode[] marray = new TreeNode[] { mnode1, mnode2 };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ic = new TreeNode("Interface Control");
            TreeNode lOn = new TreeNode("LED On");
            TreeNode lOff = new TreeNode("LED OFF");
            TreeNode lBlink = new TreeNode("LED Blink");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode rki = new TreeNode("Execute RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode smr = new TreeNode("Set Merchant Record");
            TreeNode gmr = new TreeNode("Get Merchant Record");
            TreeNode d44 = new TreeNode("Get Transaction Results");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode ufw2 = new TreeNode("List ALL AIDs");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode sbr = new TreeNode("Set Baud");

            TreeNode[] darray = new TreeNode[]
            {
                dnode1, dnode2, fw, sn, ping, ic, lOn, lOff, lBlink, bmop, bmof, ap, pd, rki,rki01,rki02,rki03,rki04, smr, gmr, d44, ufw, ufw2,pae,sbr
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);


            TreeNode e1 = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode[] transaction = new TreeNode[] { e1, e2, e3, e4, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");
            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);

            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode[] terminal = new TreeNode[] { aa7, aa9, aa9z, aa9x };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);


            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);

            TreeNode[] karray = new TreeNode[] { _transaction, _terminal, _aid, _capk };
            TreeNode emv = new TreeNode("EMV", karray);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c2 = new TreeNode("Cancel CTLS Trans");
            TreeNode activate = new TreeNode("Activate Transaction");
            TreeNode[] ctransaction = new TreeNode[] { c1, c2, activate };
            TreeNode _ctransaction = new TreeNode("Transaction", ctransaction);

            TreeNode ca1 = new TreeNode("Retrieve AID ");
            TreeNode ca2 = new TreeNode("Remove AID ");
            TreeNode ca3 = new TreeNode("List CTLS AID");
            TreeNode ca4 = new TreeNode("Save AID ");
            // TreeNode ca6 = new TreeNode("Load Default AID ");
            TreeNode[] caid = new TreeNode[] { ca1, ca2, ca3, ca4 };
            TreeNode _caid = new TreeNode("AID", caid);

            TreeNode ca7 = new TreeNode("Get Terminal Data ");
            TreeNode ca8 = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
            TreeNode ca9 = new TreeNode("Get All Config Groups ");
            TreeNode avt = new TreeNode("Show ApplePay VAS Tags");
            TreeNode ca44 = new TreeNode("Save Configuration Group");
            TreeNode def = new TreeNode("Load Default Configuration ");
            TreeNode[] cterminal = new TreeNode[] { ca7, ca8, ca888, ca9, avt, ca44, def };
            TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);



            TreeNode ca10 = new TreeNode("Retrieve CAPK ");
            TreeNode ca11 = new TreeNode("Remove CAPK ");
            TreeNode ca12 = new TreeNode("List CAPK ");
            TreeNode ca13 = new TreeNode("Save CAPK ");
            TreeNode ca14 = new TreeNode("Remove All CAPK ");
            TreeNode ca15 = new TreeNode("Load Default CAPK ");
            TreeNode ca16 = new TreeNode("Load CTLS CAPK From Disk ");

            TreeNode[] ccapk = new TreeNode[] { ca10, ca11, ca12, ca13, ca14, ca15, ca16 };
            TreeNode _ccapk = new TreeNode("CAPK", ccapk);

            TreeNode[] ctarray = new TreeNode[] { _ctransaction, _cterminal, _caid, _ccapk };
            TreeNode ctls = new TreeNode("CTLS", ctarray);
            tvCommands.Nodes.Add(ctls);
            addVivoConfig();
        }

        private void buildKioskIIITree()
        {
            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ic = new TreeNode("Interface Control");
            TreeNode ept = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt = new TreeNode("Disable ICC Passthrough");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode rki = new TreeNode("Execute Legacy RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode smr = new TreeNode("Set Merchant Record");
            TreeNode gmr = new TreeNode("Get Merchant Record");
            TreeNode d44 = new TreeNode("Get Transaction Results");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode ufw2 = new TreeNode("List ALL AIDs");
            TreeNode ufw3 = new TreeNode("Poll For Token");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode sbr = new TreeNode("Set Baud");
            TreeNode kbm = new TreeNode("KB Mode Status");

            TreeNode[] darray = new TreeNode[]
            {
                kbm,dnode1, dnode2, fw, sn, ping, ic, ept, dpt, bmop, bmof, ap, pd, rki, rki01, rki02, rki03, rki04, url, smr, gmr, d44, ufw, ufw2,ufw3,pae,sbr
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c2 = new TreeNode("Cancel CTLS Trans");
            TreeNode c2222 = new TreeNode("Approve Online CTLS Trans");
            TreeNode activate = new TreeNode("Activate Transaction");

            TreeNode[] ctransaction = new TreeNode[] { c1, c2, c2222, activate };
            TreeNode _ctransaction = new TreeNode("Transaction", ctransaction);

            TreeNode ca1 = new TreeNode("Retrieve AID ");
            TreeNode ca2 = new TreeNode("Remove AID ");
            TreeNode ca3 = new TreeNode("List CTLS AID");
            TreeNode ca4 = new TreeNode("Save AID ");
            // TreeNode ca6 = new TreeNode("Load Default AID ");
            TreeNode[] caid = new TreeNode[] { ca1, ca2, ca3, ca4 };
            TreeNode _caid = new TreeNode("AID", caid);

            TreeNode ca7 = new TreeNode("Get Terminal Data ");
            TreeNode ca8 = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
            TreeNode ca9 = new TreeNode("Get All Config Groups ");
            TreeNode avt = new TreeNode("Show ApplePay VAS Tags");
            TreeNode ca44 = new TreeNode("Save Configuration Group");
            TreeNode def = new TreeNode("Load Default Configuration ");
            TreeNode[] cterminal = new TreeNode[] { ca7, ca8, ca888, ca9, avt, ca44, def };
            TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);



            TreeNode ca10 = new TreeNode("Retrieve CAPK ");
            TreeNode ca11 = new TreeNode("Remove CAPK ");
            TreeNode ca12 = new TreeNode("List CAPK ");
            TreeNode ca13 = new TreeNode("Save CAPK ");
            TreeNode ca14 = new TreeNode("Remove All CAPK ");
            TreeNode ca15 = new TreeNode("Load Default CAPK ");
            TreeNode ca16 = new TreeNode("Load CTLS CAPK From Disk ");

            TreeNode[] ccapk = new TreeNode[] { ca10, ca11, ca12, ca13, ca14, ca15, ca16 };
            TreeNode _ccapk = new TreeNode("CAPK", ccapk);

            TreeNode[] ctarray = new TreeNode[] { _ctransaction, _cterminal, _caid, _ccapk };
            TreeNode ctls = new TreeNode("CTLS", ctarray);
            tvCommands.Nodes.Add(ctls);

            TreeNode felica1 = new TreeNode("FeliCa Authentication");
            TreeNode felica2 = new TreeNode("FeliCa Send Command");
            TreeNode felica3 = new TreeNode("FeliCa Read");
            TreeNode felica4 = new TreeNode("FeliCa Read w/Mac");
            TreeNode felica5 = new TreeNode("FeliCa Write");
            TreeNode felica6 = new TreeNode("FeliCa Write w/Mac");
            TreeNode felica7 = new TreeNode("FeliCa Request Service");

            TreeNode[] darray6 = new TreeNode[]
            {
                felica1, felica2, felica3, felica4, felica5, felica6, felica7
            };

            TreeNode felica = new TreeNode("FeliCa", darray6);
            tvCommands.Nodes.Add(felica);
            addVivoConfig();
        }

        private void buildPIPTree()
        {
            TreeNode dnode1 = new TreeNode("Send NEO Command");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode ping = new TreeNode("Ping Device");
            TreeNode ic = new TreeNode("Interface Control");
            TreeNode ept = new TreeNode("Enable ICC Passthrough");
            TreeNode dpt = new TreeNode("Disable ICC Passthrough");
            TreeNode bmop = new TreeNode("Burst Mode On");
            TreeNode bmof = new TreeNode("Burst Mode Off");
            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode smr = new TreeNode("Set Merchant Record");
            TreeNode gmr = new TreeNode("Get Merchant Record");
            TreeNode d44 = new TreeNode("Get Transaction Results");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode ufw2 = new TreeNode("List ALL AIDs");
            TreeNode ufw3 = new TreeNode("Poll For Token");
            TreeNode spm = new TreeNode("Set Poll Mode");
            TreeNode gpm = new TreeNode("Get Poll Mode");

            TreeNode[] darray = new TreeNode[]
            {
                dnode1, dnode2, fw, sn, ping, ic, ept, dpt, bmop, bmof, ap, pd, smr, gmr, d44, ufw, ufw2,ufw3,spm,gpm
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c2 = new TreeNode("Cancel CTLS Trans");
            TreeNode c2222 = new TreeNode("Approve Online CTLS Trans");
            TreeNode activate = new TreeNode("Activate Transaction");

            TreeNode[] ctransaction = new TreeNode[] { activate };
            TreeNode _ctransaction = new TreeNode("Transaction", ctransaction);

            TreeNode ca1 = new TreeNode("Retrieve AID ");
            TreeNode ca2 = new TreeNode("Remove AID ");
            TreeNode ca3 = new TreeNode("List CTLS AID");
            TreeNode ca4 = new TreeNode("Save AID ");
            // TreeNode ca6 = new TreeNode("Load Default AID ");
            TreeNode[] caid = new TreeNode[] { ca1, ca2, ca3, ca4 };
            TreeNode _caid = new TreeNode("AID", caid);

            TreeNode ca7 = new TreeNode("Get Terminal Data ");
            TreeNode ca8 = new TreeNode("Save Terminal Data "); TreeNode ca888 = new TreeNode("Try Save Terminal Data ");
            TreeNode ca9 = new TreeNode("Get All Config Groups ");
            TreeNode avt = new TreeNode("Show ApplePay VAS Tags");
            TreeNode ca44 = new TreeNode("Save Configuration Group");
            TreeNode def = new TreeNode("Load Default Configuration ");
            TreeNode[] cterminal = new TreeNode[] { ca7, ca8, ca888, ca9, avt, ca44, def };
            TreeNode _cterminal = new TreeNode("Terminal Config", cterminal);




            TreeNode[] ctarray = new TreeNode[] { _ctransaction, _cterminal, _caid };
            TreeNode ctls = new TreeNode("CTLS", ctarray);
            tvCommands.Nodes.Add(ctls);
            addVivoConfig();
        }

        private void buildMiniSmartIITree()
        {
            TreeNode e11 = new TreeNode("Start Trans");
            TreeNode c22 = new TreeNode("Cancel Trans");
            TreeNode dnode1 = new TreeNode("Reboot Device");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode rki = new TreeNode("Execute Legacy RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode emv2 = new TreeNode("Use SecureHead for EMV");
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode setPin = new TreeNode("Set DUKPT Key Type");
            TreeNode getPin = new TreeNode("Get DUKPT Format Type");
            TreeNode setPan = new TreeNode("Set Pre/Post PAN Data Len");
            TreeNode getPan = new TreeNode("Get Pre/Post PAN Data Len");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode[] darray = new TreeNode[]
            {
                e11, c22, dnode1, dnode2, fw, gdt, sdt, rki, rki01, rki02, rki03, rki04, url, ufw, emv2, mnode1, mnode2, setPin, getPin,
                setPan, getPan,pae
            };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode[] carray = new TreeNode[] { sn, mn };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);

            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode apdu = new TreeNode("Send APDU");
            TreeNode ktype = new TreeNode("Get ICC DUKPT Key Type");
            TreeNode ftdes = new TreeNode("Set Format TDES");
            TreeNode faes = new TreeNode("Set Format AES");
            TreeNode iffc = new TreeNode("Get ICC DUKPT Format Type");
            TreeNode grs = new TreeNode("Get ICC Reader Status");
            TreeNode aksn = new TreeNode("Get APDU KSN");
            TreeNode non = new TreeNode("Notifications ON");
            TreeNode noff = new TreeNode("Notifications OFF");


            TreeNode[] iarray = new TreeNode[] { oicc, ficc, apdu, ktype, ftdes, faes, iffc, grs, aksn, non, noff };
            TreeNode icc = new TreeNode("ICC", iarray);
            tvCommands.Nodes.Add(icc);

            TreeNode e1 = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode ret = new TreeNode("Retrieve Tags");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode[] transaction = new TreeNode[] { e1, e2, e3, e4, ret, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);


            TreeNode tid1 = new TreeNode("Set Kernel Config");
            ;
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa8 = new TreeNode("Remove Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode[] terminal = new TreeNode[] { tid1, aa7, aa8, aa9, aa9z, aa9x };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);


            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);

            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);


            TreeNode aa16 = new TreeNode("Remove CRL");
            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa16, aa17, aa18, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);

            TreeNode[] karray = new TreeNode[] { _transaction, _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);
            tvCommands.Nodes.Add(emv);
            addVivoConfig();

        }

        private void buildAugustaTree()
        {
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode expon = new TreeNode("Exp. Mask ON");
            TreeNode expoff = new TreeNode("Exp. Mask OFF");
            TreeNode getexp = new TreeNode("Get Exp. Mask");
            TreeNode panclear = new TreeNode("Set PAN Clear Digits");
            TreeNode gpanclear = new TreeNode("Get PAN Clear Digits");
            TreeNode swforce = new TreeNode("Set Swipe Force Enc.");
            TreeNode gswforce = new TreeNode("Get Swipe Force Enc.");
            TreeNode swipeMask = new TreeNode("Set Swipe Mask");
            TreeNode gswipeMask = new TreeNode("Get Swipe Mask");
            TreeNode sMulti = new TreeNode("Set MSR Setting");
            TreeNode gMulti = new TreeNode("Get MSR Setting");
            TreeNode entb = new TreeNode("Enter Buffer Mode");
            TreeNode autm = new TreeNode("Enable Auto Mode");
            TreeNode dism = new TreeNode("Disable MSR");
            TreeNode wht = new TreeNode("Set White List");
            TreeNode whtbdk = new TreeNode("Set White List From BDK");
            TreeNode gwht = new TreeNode("Get White List");
            TreeNode fs = new TreeNode("Get MSR Function Status");

            TreeNode[] marray = new TreeNode[]
            {
                mnode1, mnode2, expon, expoff, getexp, panclear, gpanclear, swforce, gswforce, swipeMask, gswipeMask,
                sMulti, gMulti,
                entb, autm, dism, wht,whtbdk, gwht, fs
            };
            IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_AUGUSTA,
                DEVICE_INTERFACE_Types.DEVICE_INTERFACE_USB);

            if (comm != null && (comm.isAlternate == 1))
                marray = new TreeNode[]
                {
                    mnode1, mnode2, expon, expoff, getexp, panclear, gpanclear, swipeMask, gswipeMask, sMulti, gMulti,
                    entb, dism, fs
                };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);
            TreeNode e1 = new TreeNode("Start Trans");
            TreeNode c2 = new TreeNode("Cancel Trans");
            TreeNode dnode1 = new TreeNode("Reboot Device");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode beep = new TreeNode("Beep for 3 Seconds");
            TreeNode lOn = new TreeNode("LED On");
            TreeNode lOff = new TreeNode("LED OFF");
            TreeNode lBlink = new TreeNode("LED Blink");
            TreeNode ilon = new TreeNode("ICC LED On");
            TreeNode iloff = new TreeNode("ICC LED Off");
            TreeNode ilblink = new TreeNode("ICC LED Blink");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode gks = new TreeNode("Get Key Status");
            TreeNode kb = new TreeNode("USB KB Mode");
            TreeNode kb1 = new TreeNode("QuickChip Mode ON");
            TreeNode kb2 = new TreeNode("QuickChip Mode OFF");
            TreeNode kb3 = new TreeNode("Get QuickChip Mode");
            TreeNode bkdoor = new TreeNode("Verify Backdoor Key");
            TreeNode drs = new TreeNode("Get DRS");
            TreeNode sc = new TreeNode("Self Check");
            TreeNode rki = new TreeNode("Execute Legacy RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode ktype = new TreeNode("Get DUKPT Key Type");
            TreeNode ftdes = new TreeNode("Set Format TDES");
            TreeNode faes = new TreeNode("Set Format AES");
            TreeNode iffc = new TreeNode("Get DUKPT Format Type");
            TreeNode tid1a = new TreeNode("Get TransArmor ID");
            TreeNode tid2a = new TreeNode("Set TransArmor ID");
            TreeNode tid2e = new TreeNode("Set TransArmor Encryption");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode kbm = new TreeNode("KB Mode Status");


            TreeNode[] darray = null;
            //TTK
            if (comm != null && (comm.isAlternate == 1))
                darray = new TreeNode[]
                {
                    kbm,e1, c2, dnode1, dnode2, fw, beep, lOn, lOff, lBlink,
                    ilon, iloff, ilblink, gdt, gks, bkdoor, drs, sc, rki, rki01, rki02, rki03, rki04, url, ufw, ktype, ftdes, faes, iffc, tid1a, tid2a, tid2e,pae
                };
            else
                darray = new TreeNode[]
                {
                    kbm,e1, c2, dnode1, dnode2, fw, beep, lOn, lOff, lBlink,
                    ilon, iloff, ilblink, gdt, sdt, gks, kb, kb1, kb3, rki, rki01, rki02, rki03, rki04, url, ufw, ktype, ftdes, faes, iffc, tid1a, tid2a, tid2e,pae
                };

            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode cbs = new TreeNode("Control Beep SW");
            TreeNode cbf = new TreeNode("Control Beep FW");
            TreeNode lcbs = new TreeNode("Control LED SW");
            TreeNode lcbf = new TreeNode("Control LED FW");
            TreeNode setenc = new TreeNode("Set Enc. Control");
            TreeNode getenc = new TreeNode("Get Enc. Control");


            TreeNode[] carray = new TreeNode[] { sn, mn, cbs, cbf, lcbs, lcbf, setenc, getenc };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);

            TreeNode oicc = new TreeNode("Power On ICC");
            TreeNode ficc = new TreeNode("Power Off ICC");
            TreeNode apdu = new TreeNode("Send APDU");
            TreeNode apduE = new TreeNode("Send Encrypted APDU");

            TreeNode grs = new TreeNode("Get ICC Reader Status");
            TreeNode aksn = new TreeNode("Get APDU KSN");
            TreeNode eicc = new TreeNode("Enable ICC");
            TreeNode dicc = new TreeNode("Disable ICC");
            TreeNode fs2 = new TreeNode("Get Function Status");
            TreeNode sMulti2 = new TreeNode("Set ICC Setting");
            TreeNode gMulti2 = new TreeNode("Get ICC Setting");

            TreeNode[] iarray = new TreeNode[] { oicc, ficc, apdu, apduE, grs, aksn, eicc, dicc, fs2, sMulti2, gMulti2 };
            TreeNode icc = new TreeNode("ICC", iarray);
            tvCommands.Nodes.Add(icc);

            TreeNode e1b = new TreeNode("Start EMV Trans");
            TreeNode e2 = new TreeNode("Authenticate EMV Trans");
            TreeNode e3 = new TreeNode("Complete EMV Trans");
            TreeNode e4 = new TreeNode("Cancel EMV Trans");
            TreeNode ret = new TreeNode("Retrieve Tags");
            TreeNode femv = new TreeNode("Last Trans FastEMV Data");
            TreeNode[] transaction = new TreeNode[] { e1b, e2, e3, e4, ret, femv };
            TreeNode _transaction = new TreeNode("Transaction", transaction);

            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);


            TreeNode tid1 = new TreeNode("Set Kernel Config");
            TreeNode tc = new TreeNode("Get Kernel Config");
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa8 = new TreeNode("Remove Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode[] terminal = new TreeNode[] { tid1, tc, aa7, aa8, aa9, aa9z, aa9x };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);


            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);

            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);


            TreeNode aa16 = new TreeNode("Remove CRL");
            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa16, aa17, aa18, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);

            TreeNode[] karray = new TreeNode[] { _transaction, _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);
            tvCommands.Nodes.Add(emv);
            addVivoConfig();

        }

        private void addVivoConfig()
        {
            //  TreeNode lc = new TreeNode("Load Config From File");
            // TreeNode wc = new TreeNode("Write Config To Device");
            //  TreeNode rc = new TreeNode("Read Config From Device");
            //  TreeNode scc = new TreeNode("Write Config To File");
            //  TreeNode vc2 = new TreeNode("Verify Configuration");
            //  TreeNode co = new TreeNode("Cancel Operation");
            // TreeNode[] vivoconfig = new TreeNode[] { lc, wc, rc, scc, co };
            // TreeNode vc = new TreeNode("ViVOconfig", vivoconfig);
            TreeNode vc = new TreeNode("ViVOconfig");

            tvCommands.Nodes.Add(vc);
        }

        private void buildTMSTree()
        {


            TreeNode fw = new TreeNode("Send Data Command");
            TreeNode fw2 = new TreeNode("Terminal Info");
            TreeNode pae = new TreeNode("Send PAE Command");

            TreeNode[] darray = null;

            darray = new TreeNode[] { fw, fw2, pae };

            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

        }

        private void buildBTMagTree()
        {
            TreeNode mnode1 = new TreeNode("Start MSR");
            TreeNode mnode2 = new TreeNode("Cancel MSR");
            TreeNode mnode3 = new TreeNode("Auto Capture Swipe ON");
            TreeNode mnode4 = new TreeNode("Auto Capture Swipe OFF");
            TreeNode expon = new TreeNode("Exp. Mask ON");
            TreeNode expoff = new TreeNode("Exp. Mask OFF");
            TreeNode getexp = new TreeNode("Get Exp. Mask");
            TreeNode panclear = new TreeNode("Set PAN Clear Digits");
            TreeNode gpanclear = new TreeNode("Get PAN Clear Digits");
            TreeNode swforce = new TreeNode("Set Swipe Force Enc.");
            TreeNode gswforce = new TreeNode("Get Swipe Force Enc.");
            TreeNode swipeMask = new TreeNode("Set Swipe Mask");
            TreeNode gswipeMask = new TreeNode("Get Swipe Mask");
            TreeNode sMulti = new TreeNode("Set MSR Setting");
            TreeNode gMulti = new TreeNode("Get MSR Setting");
            TreeNode tdes = new TreeNode("Set Swipe TDES");
            TreeNode aes = new TreeNode("Set Swipe AES");
            TreeNode enc = new TreeNode("Get Swipe Encryption");
            TreeNode entb = new TreeNode("Enter Buffer Mode");
            TreeNode autm = new TreeNode("Enable Auto Mode");
            TreeNode dism = new TreeNode("Disable MSR");
            TreeNode wht = new TreeNode("Set White List");
            TreeNode gwht = new TreeNode("Get White List");
            TreeNode fs = new TreeNode("Get MSR Function Status");



            TreeNode[] marray = new TreeNode[]
            {
                mnode1, mnode2, mnode3, mnode4, expon, expoff, getexp, panclear, gpanclear, swforce, gswforce,
                swipeMask, gswipeMask, sMulti, gMulti, tdes, aes,
                enc, entb, autm, dism, wht, gwht, fs
            };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode[] carray = new TreeNode[] { sn };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);


            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode pae = new TreeNode("Send PAE Command");

            TreeNode[] darray = new TreeNode[] { dnode1, fw, hid, pae };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);
            addVivoConfig();

        }

        private void buildSecureKeyTree()
        {


            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("All Settings");
            TreeNode[] carray = new TreeNode[] { sn, mn };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);

            TreeNode e1 = new TreeNode("Start Trans");
            TreeNode c2 = new TreeNode("Cancel Trans  ");
            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode dnode2 = new TreeNode("Send NEO Command");
            TreeNode kbm = new TreeNode("KB Mode Status");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode rki2 = new TreeNode("Get PIN From Last 12");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode kb = new TreeNode("USB KB Mode");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode get1 = new TreeNode("Get Output Type Swipe");
            TreeNode out1 = new TreeNode("Set Original Output Type Swipe");
            TreeNode out2 = new TreeNode("Set Enhanced Output Type Swipe");
            TreeNode out3 = new TreeNode("Set XML Output Type Swipe/Manual");
            TreeNode get1a = new TreeNode("Get Output Type Manual");
            TreeNode out1a = new TreeNode("Set Original Output Type Manual");
            TreeNode out2a = new TreeNode("Set Enhanced Output Type Manual");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode[] darray = new TreeNode[] { kbm, e1, c2, dnode1, dnode2, fw, rki2, pae, kb, hid, get1, out1, out2, out3, get1a, out1a, out2a, rki01, rki02 };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);
            addVivoConfig();

        }

        private void buildSREDKey2Tree()
        {
            IDTechComm comm = Profile.getComm(IDT_Device.currentIdent());
            TreeNode sst = new TreeNode("Start Swipe Transaction");
            TreeNode sst2 = new TreeNode("Start Keyed Transaction");
            TreeNode a11 = new TreeNode("Cancel Swipe Transaction");
            TreeNode a12 = new TreeNode("Reset MSR Terminal Data");
            TreeNode a13 = new TreeNode("Set MSR Terminal Data");
            TreeNode a14 = new TreeNode("Get MSR Terminal Data");

            TreeNode ap = new TreeNode("Auto Poll");
            TreeNode pd = new TreeNode("Poll On Demand");
            TreeNode expon = new TreeNode("Exp. Mask ON");
            TreeNode expoff = new TreeNode("Exp. Mask OFF");
            TreeNode getexp = new TreeNode("Get Exp. Mask");
            TreeNode panclear = new TreeNode("Set PAN Clear Digits");
            TreeNode gpanclear = new TreeNode("Get PAN Clear Digits");
            TreeNode swforce = new TreeNode("Set Swipe Force Enc.");
            TreeNode gswforce = new TreeNode("Get Swipe Force Enc.");
            TreeNode swipeMask = new TreeNode("Set Swipe Mask");
            TreeNode gswipeMask = new TreeNode("Get Swipe Mask");
            TreeNode dism = new TreeNode("Disable MSR");
            TreeNode disma = new TreeNode("Enable MSR");
            TreeNode fs = new TreeNode("Get MSR Function Status ");
            TreeNode sMulti = new TreeNode("Set MSR Setting");
            TreeNode gMulti = new TreeNode("Get MSR Setting");
            TreeNode scon = new TreeNode("Set Configuration");
            TreeNode gcon = new TreeNode("Get Configuration");

            TreeNode[] marray = new TreeNode[]
            {
               sst,sst2,a11,a12,a13,a14, ap,pd, expon, expoff, getexp, panclear, gpanclear, swforce,
                gswforce, swipeMask, gswipeMask, dism,disma, fs, sMulti, gMulti, scon, gcon
            };
            if (comm != null && comm.isKB)
            {
                marray = new TreeNode[]
                            {
               a12,a13,a14,  expon, expoff, getexp, panclear, gpanclear, swforce,
                gswforce, swipeMask, gswipeMask, dism,disma, fs, sMulti, gMulti
                            };
            }

            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode[] carray = new TreeNode[] { sn, mn };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);
            TreeNode kbm = new TreeNode("KB Mode Status");
            TreeNode dnode1 = new TreeNode("Reboot Device");
            TreeNode dnode2 = new TreeNode("Send Data Command");
            TreeNode dnode1a = new TreeNode("Send NEO Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode gks = new TreeNode("Get Status All Key Slots");
            TreeNode dnode235 = new TreeNode("Execute RKI");
            TreeNode dnode235a = new TreeNode("Set RKI Comm Delay");


            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode ktype = new TreeNode("Get Swipe Encryption");

            TreeNode tid1a = new TreeNode("Get TransArmor ID");
            TreeNode tid2a = new TreeNode("Set TransArmor ID");
            TreeNode tid2e = new TreeNode("Set TransArmor Encryption");

            TreeNode adminkey1 = new TreeNode("Enable Admin Key");
            TreeNode adminkey2 = new TreeNode("Disable Admin Key");
            TreeNode lang1 = new TreeNode("Set English Language");
            TreeNode lang2 = new TreeNode("Set Japanese Language");
            TreeNode kb = new TreeNode("USB KB Mode");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode get1 = new TreeNode("Get Output Type Swipe");
            TreeNode out1 = new TreeNode("Set Original Output Type Swipe");
            TreeNode out2 = new TreeNode("Set Enhanced Output Type Swipe");
            TreeNode out3 = new TreeNode("Set XML Output Type Swipe/Manual");
            TreeNode get1a = new TreeNode("Get Output Type Manual");
            TreeNode out1a = new TreeNode("Set Original Output Type Manual");
            TreeNode out2a = new TreeNode("Set Enhanced Output Type Manual");


            TreeNode[] darray = null;


            darray = new TreeNode[]
            {
                kbm,dnode1, dnode1a, dnode2, fw, gks, ufw, ktype, lang1, lang2, kb, hid, tid1a, tid2a,tid2e, adminkey1, adminkey2,
                dnode235, dnode235a, get1, out1, out2, out3, get1a, out1a, out2a
            };

            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);
            addVivoConfig();

        }

        private void buildSecureMagTree()
        {
            TreeNode mnode1a = new TreeNode("Start MSR");
            TreeNode mnode2a = new TreeNode("Cancel MSR");
            TreeNode autm = new TreeNode("Auto Mode");
            TreeNode entb = new TreeNode("Buffer Mode");
            TreeNode entb1 = new TreeNode("Arm To Read");
            TreeNode entb2 = new TreeNode("Start Polling Data");
            TreeNode mnode2 = new TreeNode("Disable MSR");
            TreeNode expon = new TreeNode("Exp. Mask ON");
            TreeNode expoff = new TreeNode("Exp. Mask OFF");
            TreeNode getexp = new TreeNode("Get Exp. Mask");
            TreeNode panclear = new TreeNode("Set PAN Clear Digits");
            TreeNode gpanclear = new TreeNode("Get PAN Clear Digits");
            TreeNode swforce = new TreeNode("Set Swipe Force Enc.");
            TreeNode gswforce = new TreeNode("Get Swipe Force Enc.");
            TreeNode swipeMask = new TreeNode("Set Swipe Mask");
            TreeNode gswipeMask = new TreeNode("Get Swipe Mask");
            TreeNode tdes = new TreeNode("Set Swipe TDES");
            TreeNode aes = new TreeNode("Set Swipe AES");
            TreeNode enc = new TreeNode("Get Swipe Encryption");
            TreeNode sMulti = new TreeNode("Set MSR Setting");
            TreeNode gMulti = new TreeNode("Get MSR Setting");



            TreeNode[] marray = new TreeNode[]
            {
                mnode1a, mnode2a, autm, entb, entb1, entb2, mnode2, expon, expoff, getexp, panclear, gpanclear, swforce,
                gswforce, swipeMask, gswipeMask, tdes, aes,
                enc,sMulti,gMulti
            };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode wd = new TreeNode("Set Write Delay");
            TreeNode wkd = new TreeNode("Set Write Key Delay");
            TreeNode rd = new TreeNode("Set Read Delay");
            TreeNode mn = new TreeNode("All Settings");
            TreeNode[] carray = new TreeNode[] { sn, mn, wd, rd, wkd };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);

            TreeNode e1 = new TreeNode("Start Trans");
            TreeNode c2 = new TreeNode("Cancel Trans");
            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode dnode2 = new TreeNode("Send NEO Command");
            TreeNode kbm = new TreeNode("KB Mode Status");

            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode rki = new TreeNode("Execute Legacy RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode rki05 = new TreeNode("RKI Rev Z (DEMO)");
            TreeNode rki06 = new TreeNode("RKI Rev Z (PRODUCTION)");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode kb = new TreeNode("USB KB Mode");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode[] darray = new TreeNode[] { kbm, e1, c2, dnode1, fw, rki, rki01, rki02, rki03, rki04, rki05, rki06, url, kb, hid, pae };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);
            addVivoConfig();

        }

        private void buildSecureMagTree2()
        {
            TreeNode entb2 = new TreeNode("Stop Polling Data");
            tvCommands.Nodes.Add(entb2);
        }

        private void buildAugustaKBTree()
        {
            ;
            TreeNode mnode3 = new TreeNode("Auto Capture Swipe ON");
            TreeNode mnode4 = new TreeNode("Auto Capture Swipe OFF");
            TreeNode expon = new TreeNode("Exp. Mask ON");
            TreeNode expoff = new TreeNode("Exp. Mask OFF");
            TreeNode getexp = new TreeNode("Get Exp. Mask");
            TreeNode panclear = new TreeNode("Set PAN Clear Digits");
            TreeNode gpanclear = new TreeNode("Get PAN Clear Digits");
            TreeNode swforce = new TreeNode("Set Swipe Force Enc.");
            TreeNode gswforce = new TreeNode("Get Swipe Force Enc.");
            TreeNode swipeMask = new TreeNode("Set Swipe Mask");
            TreeNode gswipeMask = new TreeNode("Get Swipe Mask");
            TreeNode sMulti = new TreeNode("Set MSR Setting");
            TreeNode gMulti = new TreeNode("Get MSR Setting");
            TreeNode tdes = new TreeNode("Set Swipe TDES");
            TreeNode aes = new TreeNode("Set Swipe AES");
            TreeNode enc = new TreeNode("Get Swipe Encryption");
            TreeNode entb = new TreeNode("Enter Buffer Mode");
            TreeNode autm = new TreeNode("Enable Auto Mode");
            TreeNode dism = new TreeNode("Disable MSR");
            TreeNode wht = new TreeNode("Set White List");
            TreeNode gwht = new TreeNode("Get White List");
            TreeNode fs = new TreeNode("Get MSR Function Status");



            TreeNode[] marray = new TreeNode[]
            {
                 mnode3, mnode4, expon, expoff, getexp, panclear, gpanclear, swforce, gswforce,
                swipeMask, gswipeMask, sMulti, gMulti, tdes, aes,
                enc, entb, autm, dism, wht, gwht, fs
            };
            TreeNode msr = new TreeNode("MSR", marray);
            tvCommands.Nodes.Add(msr);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode[] carray = new TreeNode[] { sn, mn };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);

            TreeNode kbm = new TreeNode("KB Mode Status");

            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode hid = new TreeNode("USB HID Mode");
            TreeNode kb1 = new TreeNode("QuickChip Mode ON");
            TreeNode kb2 = new TreeNode("QuickChip Mode OFF");
            TreeNode kb3 = new TreeNode("Get QuickChip Mode");
            TreeNode pae = new TreeNode("Send PAE Command");

            TreeNode[] darray = new TreeNode[] { kbm, dnode1, fw, hid, kb2, kb3, pae };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);



            TreeNode kv = new TreeNode("Kernel Version");
            TreeNode kcs = new TreeNode("Kernel Checksum");
            TreeNode ccs = new TreeNode("Config Checksum");
            TreeNode[] kernel = new TreeNode[] { kv, kcs, ccs };
            TreeNode _kernel = new TreeNode("Kernel", kernel);


            TreeNode tid1 = new TreeNode("Set Kernel Config");
            TreeNode tc = new TreeNode("Get Kernel Config");
            TreeNode aa7 = new TreeNode("Get Terminal Data");
            TreeNode aa8 = new TreeNode("Remove Terminal Data");
            TreeNode aa9 = new TreeNode("Save Terminal Data"); TreeNode aa9z = new TreeNode("Try Save Terminal Data");
            TreeNode aa9x = new TreeNode("Add Terminal Data");
            TreeNode[] terminal = new TreeNode[] { tid1, tc, aa7, aa8, aa9, aa9z, aa9x };
            TreeNode _terminal = new TreeNode("Terminal Config", terminal);


            TreeNode aa1 = new TreeNode("Retrieve AID");
            TreeNode aa2 = new TreeNode("Remove AID");
            TreeNode aa3 = new TreeNode("List AID");
            TreeNode aa4 = new TreeNode("Save AID");
            TreeNode aa5 = new TreeNode("Remove All AID");
            TreeNode aa6 = new TreeNode("Load Default AID");

            TreeNode[] aid = new TreeNode[] { aa1, aa2, aa3, aa4, aa5, aa6 };
            TreeNode _aid = new TreeNode("AID", aid);

            TreeNode aa10 = new TreeNode("Retrieve CAPK");
            TreeNode aa11 = new TreeNode("Remove CAPK");
            TreeNode aa12 = new TreeNode("List CAPK");
            TreeNode aa13 = new TreeNode("Save CAPK");
            TreeNode aa14 = new TreeNode("Remove All CAPK");
            TreeNode aa15 = new TreeNode("Load Default CAPK");
            TreeNode a = new TreeNode("Load CAPK From Disk");
            TreeNode[] capk = new TreeNode[] { aa10, aa11, aa12, aa13, aa14, aa15, a };
            TreeNode _capk = new TreeNode("CAPK", capk);


            TreeNode aa16 = new TreeNode("Remove CRL");
            TreeNode aa17 = new TreeNode("List CRL");
            TreeNode aa18 = new TreeNode("Save CRL");
            TreeNode aa19 = new TreeNode("Remove All CRL");
            TreeNode[] crl = new TreeNode[] { aa16, aa17, aa18, aa19 };
            TreeNode _crl = new TreeNode("CRL", crl);

            TreeNode[] karray = new TreeNode[] { _kernel, _terminal, _aid, _capk, _crl };
            TreeNode emv = new TreeNode("EMV", karray);
            tvCommands.Nodes.Add(emv);

            addVivoConfig();

        }

        private void buildCM1000Tree()
        {
            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode beep = new TreeNode("Beep for 3 Seconds");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode pae = new TreeNode("Send PAE Command");
            TreeNode[] darray = new TreeNode[] { dnode1, fw, beep, sdt, pae };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode c1 = new TreeNode("Start CTLS Trans");
            TreeNode c2 = new TreeNode("Cancel CTLS Trans");
            TreeNode[] ctarray = new TreeNode[] { c1, c2 };
            TreeNode ctls = new TreeNode("CTLS", ctarray);
            tvCommands.Nodes.Add(ctls);
            addVivoConfig();
        }
        private void buildL80Tree()
        {
            IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_L80, IDT_Device.getConnectionType());

            if (comm == null)
            {
                comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_NEO2, IDT_Device.getConnectionType());
                if (comm == null) return;
                if (!comm.enablePassthroughl80) return;
                TreeNode dpt11a = new TreeNode("Disable L80 Passthrough");
                tvCommands.Nodes.Add(dpt11a);
            }


            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode rd = new TreeNode("Reboot Device");
            TreeNode gks = new TreeNode("Get Key Status");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode esm = new TreeNode("Enter Stop Mode");
            TreeNode ssm = new TreeNode("Set Sleep Mode");
            TreeNode rkiClient01 = new TreeNode("PKI RKI (Demo)");
            TreeNode rkiClient02 = new TreeNode("PKI RKI (Production)");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode pae2 = new TreeNode("Send PAE Command");

            TreeNode[] darray = new TreeNode[] { dnode1, fw, rd, gks, sdt, gdt, esm, ssm, rkiClient01, rkiClient02, url, ufw, pae2 };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode pnode1 = new TreeNode("Get Encrypted PIN ");
            TreeNode pke = new TreeNode("Prompt Key Entry");
            TreeNode pae = new TreeNode("Prompt Amt Entry");
            TreeNode ce = new TreeNode("Cancel PIN Entry");
            TreeNode getf = new TreeNode("Get Function Key");
            TreeNode beep = new TreeNode("Send Beep");

            TreeNode pan2 = new TreeNode("Get Pan ");
            TreeNode pan3 = new TreeNode("Key Values ON");
            TreeNode pan4 = new TreeNode("Key Values OFF");

            TreeNode[] parray = new TreeNode[] { pnode1, pke, pae, getf, ce, beep, pan2, pan3, pan4 };
            TreeNode pin = new TreeNode("Pin", parray);
            tvCommands.Nodes.Add(pin);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode sbr = new TreeNode("Set Baud");
            TreeNode gbr = new TreeNode("Get Baud");
            TreeNode[] carray = new TreeNode[] { sn, mn, sbr, gbr };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);


            TreeNode cln = new TreeNode("Clear Line #");
            TreeNode stp = new TreeNode("Save Prompt");
            TreeNode dtp = new TreeNode("Display Prompt");
            TreeNode dtm = new TreeNode("Display Message");
            TreeNode etb = new TreeNode("Enable Backlight");
            TreeNode disb = new TreeNode("Disable Backlight");
            TreeNode tbs = new TreeNode("Backlight Status");
            TreeNode ctd = new TreeNode("Clear Display");

            TreeNode[] lcdarray = new TreeNode[] { ctd, cln, stp, dtp, dtm, etb, disb, tbs };
            TreeNode lcd = new TreeNode("LCD", lcdarray);
            tvCommands.Nodes.Add(lcd);
            addVivoConfig();

        }

        private void buildL100Tree()
        {
            IDTechComm comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_L100, IDT_Device.getConnectionType());
            if (comm == null)
            {
                comm = Profile.getComm(IDT_DEVICE_Types.IDT_DEVICE_NEO2, IDT_Device.getConnectionType());
                if (comm == null) return;
                if (!comm.enablePassthrough) return;
                TreeNode dpt11a = new TreeNode("Disable L100 Passthrough");
                tvCommands.Nodes.Add(dpt11a);
            }



            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode rd = new TreeNode("Reboot Device");
            TreeNode gks = new TreeNode("Get Key Status");
            TreeNode sdt = new TreeNode("Set Date/Time");
            TreeNode gdt = new TreeNode("Get Date/Time");
            TreeNode esm = new TreeNode("Enter Stop Mode");
            TreeNode ssm = new TreeNode("Set Sleep Mode");
            TreeNode rki = new TreeNode("Execute Legacy RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rkiClient01 = new TreeNode("PKI RKI (Demo)");
            TreeNode rkiClient02 = new TreeNode("PKI RKI (Production)");
            TreeNode url = new TreeNode("Set RKI URL");
            TreeNode ufw = new TreeNode("Update Device Firmware");
            TreeNode pae2 = new TreeNode("Send PAE Command");

            TreeNode[] darray = new TreeNode[] { dnode1, fw, rd, gks, sdt, gdt, esm, ssm, rki01, rki02, rkiClient01, rkiClient02, url, ufw, pae2 };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode pnode1 = new TreeNode("Get Encrypted PIN ");
            TreeNode pke = new TreeNode("Prompt Key Entry");
            TreeNode pae = new TreeNode("Prompt Amt Entry");
            TreeNode ce = new TreeNode("Cancel PIN Entry");
            TreeNode getf = new TreeNode("Get Function Key");
            TreeNode beep = new TreeNode("Send Beep");

            TreeNode pan2 = new TreeNode("Get Pan ");
            TreeNode pan3 = new TreeNode("Key Values ON");
            TreeNode pan4 = new TreeNode("Key Values OFF");

            TreeNode[] parray = new TreeNode[] { pnode1, pke, pae, getf, ce, beep, pan2, pan3, pan4 };
            TreeNode pin = new TreeNode("Pin", parray);
            tvCommands.Nodes.Add(pin);

            TreeNode sn = new TreeNode("Get Serial Number");
            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode sbr = new TreeNode("Set Baud");
            TreeNode gbr = new TreeNode("Get Baud");
            TreeNode[] carray = new TreeNode[] { sn, mn, sbr, gbr };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);


            TreeNode cln = new TreeNode("Clear Line #");
            TreeNode stp = new TreeNode("Save Prompt");
            TreeNode dtp = new TreeNode("Display Prompt");
            TreeNode dtm = new TreeNode("Display Message");
            TreeNode etb = new TreeNode("Enable Backlight");
            TreeNode disb = new TreeNode("Disable Backlight");
            TreeNode tbs = new TreeNode("Backlight Status");
            TreeNode ctd = new TreeNode("Clear Display");

            TreeNode[] lcdarray = new TreeNode[] { ctd, cln, stp, dtp, dtm, etb, disb, tbs };
            TreeNode lcd = new TreeNode("LCD", lcdarray);
            tvCommands.Nodes.Add(lcd);
            addVivoConfig();

        }

        private void buildK100Tree()
        {
            TreeNode dnode1 = new TreeNode("Send Data Command");
            TreeNode fw = new TreeNode("Firmware Version");
            TreeNode rd = new TreeNode("Reboot Device");
            TreeNode gks = new TreeNode("Get Key Status");
            TreeNode gdt = new TreeNode("Get Date/Time String");
            TreeNode rki = new TreeNode("Execute Legacy RKI");
            TreeNode rki01 = new TreeNode("Symmetric RKI - DEMO");
            TreeNode rki02 = new TreeNode("Symmetric RKI - PROD");
            TreeNode rki03 = new TreeNode("PKI RKI - DEMO");
            TreeNode rki04 = new TreeNode("PKI RKI - PROD");
            TreeNode[] darray = new TreeNode[] { dnode1, fw, rd, gks, gdt, rki01, rki02 };
            TreeNode device = new TreeNode("Device", darray);
            tvCommands.Nodes.Add(device);

            TreeNode pnode1 = new TreeNode("Get Encrypted PIN ");
            TreeNode pke = new TreeNode("Enable Keypad");
            TreeNode ce = new TreeNode("Cancel PIN Entry");
            TreeNode getf = new TreeNode("Get Function Key");
            TreeNode beep = new TreeNode("Send Beep");



            TreeNode[] parray = new TreeNode[] { pnode1, pke, getf, ce, beep };
            TreeNode pin = new TreeNode("Pin", parray);
            tvCommands.Nodes.Add(pin);

            TreeNode mn = new TreeNode("Get Model Number");
            TreeNode sbr = new TreeNode("Set Baud");
            TreeNode gbr = new TreeNode("Get Baud");
            TreeNode[] carray = new TreeNode[] { mn, sbr, gbr };
            TreeNode config = new TreeNode("Config", carray);
            tvCommands.Nodes.Add(config);
            addVivoConfig();




        }

        private void clearPanels()
        {
            VivoConfigPanel.Visible = false;
            panelWhiteList.Visible = false;
            panelFelica.Visible = false;
            panelTA.Visible = false;
            neoPanel.Visible = false;
            ngaPanel.Visible = false;
            panelInterfaceControl.Visible = false;
            panelPANDigits.Visible = false;
            panelSwipeForce.Visible = false;
            panelSwipeMask.Visible = false;
            panelMSRMulti.Visible = false;
            panelEnterBufferMode.Visible = false;
            panelEncControl.Visible = false;
            panelAPDU.Visible = false;
            panelEnableICC.Visible = false;
            panelTrans.Visible = false;
            panelCTLS.Visible = false;
            panelKeyed.Visible = false;
            panelAID.Visible = false;
            panelPin.Visible = false;
            panelTerm.Visible = false;
            panelCAPK.Visible = false;
            panelCRL.Visible = false;
            panelBDK.Visible = false;
            panelUID.Visible = false;
            panelMacData.Visible = false;
            panelSleepMode.Visible = false;
            panelPINEntry.Visible = false;
            panelBeep.Visible = false;
            panelLCD.Visible = false;
            panelBaud.Visible = false;
            panelRetrieveTags.Visible = false;
            panel_VP8800.Visible = false;
            panelSSL.Visible = false;
            panelEthernet.Visible = false;
            panelNeoLCD.Visible = false;
            labell.Visible = false;
            labelt.Visible = false;
            buttonCB.Visible = false;
            objectIDl.Visible = false;
            objectIDt.Visible = false;
            screenIDl.Visible = false;
            screenIDT.Visible = false;
            fontidl.Visible = false;
            fontidt.Visible = false;
            xl.Visible = false;
            xt.Visible = false;
            yl.Visible = false;
            yt.Visible = false;
            newxl.Visible = false;
            newxt.Visible = false;
            newyl.Visible = false;
            newyt.Visible = false;
            widthl.Visible = false;
            widtht.Visible = false;
            heightl.Visible = false;
            heightt.Visible = false;
            colorl.Visible = false;
            colort.Visible = false;
            ledt.Visible = false;
            ledl.Visible = false;
            paePanel.Visible = false;
            panelActivate.Visible = false;
            //panelWifiConfig.Visible = false;

        }
        IDTTransactionData lastcData = null;
        private void FastEMV()
        {
            string ident = getIdentValue();
            bool success = IDT_Device.SharedController.createFastEMVData(ref lastcData);
            if (success && lastcData != null && lastcData.fastEMV != null && lastcData.fastEMV.Length > 0)
            {
                tbOutputAppendText("Fast EMV Data: \r\n", ident);
                tbOutputAppendText(lastcData.fastEMV, ident);
            }
            else
            {
                tbOutputAppendText("Error getting Fast EMV Data \r\n", ident);


            }
        }

        private void btnExecuteCommand_Click(object sender, EventArgs e)
        {


            string ident = getIdentValue();
            //if (tvCommands.SelectedNode == null) return;
            //string command = tvCommands.SelectedNode.Text;
            //configlabel.Visible = true;
            //comboBoxTermConfig.Visible = true;


            if (command.Equals("Last Trans FastEMV Data")) FastEMV();
            if (command.Equals("Start MSR")) btnTurnOnMSR_Click(null, null);
            if (command.Equals("Set Tracks")) setTracks();
            if (command.Equals("Get Tracks")) getTracks();



            if (command.Equals("Cancel MSR")) btnTurnOffMSR_Click(null, null);
            if (command.Equals("Reboot Device")) btnReboot_Click(null, null);
            if (command.Equals("Send NEO Command")) btnP2_Click(null, null);
            if (command.Equals("Send Data Command")) btnSendDataCommand_Click(null, null);
            if (command.Equals("Send Command")) btnSendMacDataCommand_Click(null, null);
            if (command.Equals("Battery Voltage")) btnBatteryVoltage_Click(null, null);
            if (command.Equals("Firmware Version")) btnFirmware_Click(null, null);
            if (command.Equals("Bootloader Version")) bootloader_Click(null, null);
            if (command.Equals("Get RT1050 Firmware Version")) btnRT1050Firmware_Click(null, null);
            if (command.Equals("Get Encrypted PIN")) btnEncryptedPIN_Click(null, null);
            if (command.Equals("Get Encrypted PIN ")) btnEncryptedPIN_Click2(null, null);

            if (command.Equals("Capture PIN")) btnEncryptedPIN2_Click(null, null);
            if (command.Equals("Capture PIN Extended")) btnEncryptedPIN3_Click(null, null);
            if (command.Equals("Get PIN from MSR")) btnEncryptedPIN_SP2_Click(null, null);
            if (command.Equals("Beep for 3 Seconds")) btnBeep_Click(null, null);
            if (command.Equals("Ping Device")) btnPingDevice_Click(null, null);
            if (command.Equals("Interface Control")) btnInterfaceControl_Click(null, null);
            if (command.Equals("Get Serial Number")) btnGetSerialNumber_Click(null, null);
            if (command.Equals("Get Model Number")) btnModelNumber_Click(null, null);
            if (command.Equals("Exp. Mask ON")) btnMaskExp_Click(null, null);
            if (command.Equals("Exp. Mask OFF")) btnUnmaskExp_Click(null, null);
            if (command.Equals("Get Exp. Mask")) btnGetExpirationMask_Click(null, null);
            if (command.Equals("Set PAN Clear Digits")) btnSetPAN_Click(null, null);
            if (command.Equals("Get PAN Clear Digits")) btnGetClearPAN_Click(null, null);
            if (command.Equals("Set Swipe Force Enc.")) btnSetSwipeForceEncryption_Click(null, null);
            if (command.Equals("Get Swipe Force Enc.")) btnGetSwipeForceEncryption_Click(null, null);
            if (command.Equals("Set Swipe Mask")) btnSetSwipeMaskOption_Click(null, null);
            if (command.Equals("Get Swipe Mask")) btnGetSwipeMaskOption_Click(null, null);
            if (command.Equals("Set MSR Setting")) btnSetMultiSetting_Click(null, null);
            if (command.Equals("Get MSR Setting")) btnGetMultiSetting_Click(null, null);
            if (command.Equals("Set ICC Setting")) btnSetMultiSettingICC_Click(null, null);
            if (command.Equals("Get ICC Setting")) btnGetMultiSettingICC_Click(null, null);
            if (command.Equals("Set Swipe TDES")) btnSwipeTDES_Click(null, null);
            if (command.Equals("Set Swipe AES")) btnSwipeAES_Click(null, null);
            if (command.Equals("Get Swipe Encryption")) btnSwipeEncryption_Click(null, null);
            if (command.Equals("Enter Buffer Mode")) btnBufferMode_Click(null, null);
            if (command.Equals("Enable Auto Mode")) btnAutoMode_Click(null, null);
            if (command.Equals("Buffer Mode")) btnBufferMode_Click(null, null);
            if (command.Equals("Auto Mode")) btnAutoMode_Click(null, null);
            if (command.Equals("Disable MSR")) btnDisableMSR_Click(null, null);
            if (command.Equals("Enable MSR")) btnEnableMSR_Click(null, null);
            if (command.Equals("Control Beep SW")) btnControBeepWithSW_Click(null, null);
            if (command.Equals("Control Beep FW")) btnControBeepWithFW_Click(null, null);
            if (command.Equals("Control LED SW")) btnControMSRLEDWithSW_Click(null, null);
            if (command.Equals("Control LED FW")) btnControMSRLEDWithFW_Click(null, null);
            if (command.Equals("USB KB Mode")) btnUSBKB_Click(null, null);
            if (command.Equals("Verify Backdoor Key")) btnVerifyBackdoorKey_Click(null, null);
            if (command.Equals("Get DRS")) btnGet_DRS_Click(null, null);
            if (command.Equals("Self Check")) btnSelfCheck_Click(null, null);
            if (command.Equals("USB HID Mode")) btnUSBHID_Click(null, null);
            if (command.Equals("Set White List From BDK")) btnSetMSRWhiteListFromBDK_Click(null, null);
            if (command.Equals("Set White List")) btnSetMSRWhiteList_Click(null, null);
            if (command.Equals("Get White List")) btnGetMSRWhiteList_Click(null, null);
            if (command.Equals("Set Enc. Control")) btnSetEncryptionControl_Click(null, null);
            if (command.Equals("Get Enc. Control")) btnGetEncryptionControl_Click(null, null);
            if (command.Equals("LED On")) btnLED_MSR_ON_Click(null, null);
            if (command.Equals("LED OFF")) btnLED_MSR_OFF_Click(null, null);
            if (command.Equals("LED Blink")) btnLED_MSR_BLINK_Click(null, null);
            if (command.Equals("Get MSR Function Status")) btnGetMSRFunctionStatus_Click(null, null);
            if (command.Equals("Get MSR Function Status ")) _btnGetMSRFunctionStatus_Click(null, null);
            if (command.Equals("Power On ICC")) btnPowerOnICC_Click(null, null);
            if (command.Equals("Power Off ICC")) btnPowerOffICC_Click(null, null);
            if (command.Equals("Send APDU")) btnSendAPDU_Click(null, null);
            if (command.Equals("Send Encrypted APDU")) btnSendAPDUEncrypted_Click(null, null);
            if (command.Equals("Kernel Version")) btnKernelVersion_Click(null, null);
            if (command.Equals("Kernel Checksum")) btnGetKernalCheckValue_Click(null, null);
            if (command.Equals("Config Checksum")) btnGetConfigurationCV_Click(null, null);
            if (command.Equals("ICC LED On")) btnLEDOn_Click(null, null);
            if (command.Equals("ICC LED Off")) btnLEDOff_Click(null, null);
            if (command.Equals("ICC LED Blink")) btnLEDBlink_Click(null, null);
            if (command.Equals("Enable ICC Passthrough")) btnEnablePassthrough_Click(null, null);
            if (command.Equals("Disable ICC Passthrough")) btnDisablePassthrough_Click(null, null);
            if (command.Equals("Enable L100 Passthrough"))
            {
                btnEnableL100Passthrough_Click(null, null);
                buildNEOTree();
            }

            if (command.Equals("Disable L100 Passthrough"))
            {
                btnDisableL100Passthrough_Click(null, null);
                buildNEOTree();
            }

            if (command.Equals("Enable L80 Passthrough"))
            {
                btnEnableL80Passthrough_Click(null, null);
                buildNEOTree();
            }

            if (command.Equals("Disable L80 Passthrough"))
            {
                btnDisableL80Passthrough_Click(null, null);
                buildNEOTree();
            }


            if (command.Equals("Get ICC DUKPT Key Type")) btnGetKeyTypeForICCDUKPTKey_Click(null, null);
            if (command.Equals("Get DUKPT Key Type")) btnGetKeyTypeForICCDUKPTKey_Click2(null, null);
            if (command.Equals("Get DUKPT Format Type")) btnGetKeyFormatForICCDUKPTKey_Click2(null, null);
            if (command.Equals("Set Format TDES")) btnTDES_Click(null, null);
            if (command.Equals("Set Format AES")) btnAES_Click(null, null);
            if (command.Equals("Get ICC DUKPT Format Type")) btnGetKeyFormatForICCDUKPTKey_Click(null, null);
            if (command.Equals("Get ICC Reader Status")) btnGetICCReaderStatus_Click(null, null);
            if (command.Equals("Get ICC Status")) btnGetICCStatus_Click(null, null);
            if (command.Equals("Get APDU KSN")) btnGetKSN_Click(null, null);
            if (command.Equals("Enable ICC")) btnEnableICC_Click(null, null);
            if (command.Equals("Disable ICC")) btnDisableICC_Click(null, null);
            if (command.Equals("Burst Mode On")) btnBurstModeOn_Click(null, null);
            if (command.Equals("Burst Mode Off")) btnBurstModeOff_Click(null, null);
            if (command.Equals("Auto Poll")) btnAutoPoll_Click(null, null);
            if (command.Equals("Set Poll Mode")) setPollMode(null, null);
            if (command.Equals("Get Poll Mode")) getPollMode(null, null);
            if (command.Equals("Poll On Demand")) btnPollOnDemand_Click(null, null);
            if (command.Equals("Get Function Status")) btnGetICCFunctionStatus_Click(null, null);
            if (command.Equals("Authenticate EMV Trans")) btnEMVAuthenticate_Click(null, null);
            if (command.Equals("Start EMV Trans")) btnEMVStart_Click(null, null);
            if (command.Equals("Set UID")) setUID(null, null);
            if (command.Equals("Get Light Sensor Value")) getLightSensorVal();
            if (command.Equals("Set Self-Check Time")) setSelfCheckTime();
            if (command.Equals("Get Self-Check Time")) getSelfCheckTime();
            if (command.Equals("Get Device Time")) getDeviceTime();

            if (command.Equals("Complete EMV Trans")) btnEMVComplete_Click(null, null);
            if (command.Equals("Cancel EMV Trans")) btnCancelTransaction_Click(null, null);
            if (command.Equals("Cancel Trans")) btnCancelTransaction_Click(null, null);
            if (command.Equals("Cancel Trans  ")) btnCancelTransactions_Click(null, null);


            if (command.Equals("Start Trans  ")) btnEMVStart_Click(null, null);
            if (command.Equals("Complete EMV Trans  ")) btnEMVComplete_Click(null, null);
            if (command.Equals("Cancel EMV Trans  ")) btnCancelTransaction_Click(null, null);




            if (command.Equals("Run Demo From Device"))
            {
                Task backgroundWorkTask = Task.Factory.StartNew(() => piscesMainMenu(), CancellationToken.None,
                    TaskCreationOptions.None, TaskScheduler.Default);

            }

            if (command.Equals("Poll For Token")) pollForToken();


            if (command.Equals("Start CTLS Trans")) btnStartCTLS_Click(null, null);
            if (command.Equals("Cancel CTLS Trans")) btnCancelCTLS_Click(null, null);
            if (command.Equals("Retrieve AID")) btnRetrieveAid_Click(null, null);
            if (command.Equals("Retrieve AID ")) btnRetrieveAidCTLS_Click(null, null);
            if (command.Equals("Remove AID")) btnRemoveAid_Click(null, null);
            if (command.Equals("Remove AID ")) btnRemoveAidCTLS_Click(null, null);
            if (command.Equals("List AID")) btnListAid_Click(null, null);
            if (command.Equals("List CTLS AID")) btnListAidCTLS_Click(null, null);
            if (command.Equals("List ALL AIDs")) btnListAidALL_Click(null, null);
            if (command.Equals("Save AID")) btnSaveAID_Click(null, null);
            if (command.Equals("Save AID ")) btnSaveAIDCTLS_Click(null, null);
            if (command.Equals("Remove All AID")) btnRemoveAids_Click(null, null);
            if (command.Equals("Load Default AID")) btnDefaultADI_Click(null, null);
            // if (command.Equals("Load Default AID ")) defaultAIDCTLS();
            if (command.Equals("Get Terminal Data")) btnRetriveTerm_Click(null, null);
            if (command.Equals("Terminal Info")) btnterminalinfo(null, null);
            if (command.Equals("Get Terminal Data ")) btnRetriveTermCTLS_Click(null, null);
            if (command.Equals("Get Terminal Data  ")) btnRetriveTermDEVICE_Click(null, null);
            if (command.Equals("Remove Terminal Data")) btnRemoveTerm_Click(null, null);
            if (command.Equals("Try Save Terminal Data")) btnSaveTerm2_Click(null, null);
            if (command.Equals("Save Terminal Data")) btnSaveTerm_Click(null, null);
            if (command.Equals("Add Terminal Data")) btnAddTerm_Click(null, null);
            if (command.Equals("Clear Transaction Log")) btnClearLog_Click(null, null);
            if (command.Equals("Transaction Log Status")) btnClearLogStatus_Click(null, null);
            if (command.Equals("Get Transaction Record")) btngetLogRecord_Click(null, null);
            if (command.Equals("Remove Transaction Amount Log")) btnRemoveTransactionAmountLog_Click(null, null);
            if (command.Equals("Exemption Log Status")) btnExemptionStatus_Click(null, null);
            if (command.Equals("CRL Status")) btnCRLStatus_Click(null, null);
            if (command.Equals("Set Major Term Config")) btnSaveMajorConfig_Click(null, null);
            if (command.Equals("Try Save Terminal Data ")) btnSaveTermCTLS2_Click(null, null);
            if (command.Equals("Save Terminal Data ")) btnSaveTermCTLS_Click(null, null);
            if (command.Equals("Save Terminal Data  ")) btnSaveTermDEVICE_Click(null, null);
            if (command.Equals("Get All Config Groups ")) btnGetAllConfigGroups_Click(null, null);
            if (command.Equals("Remove All Config Groups ")) btnRemoveAllConfigGroups_Click(null, null);
            if (command.Equals("Remove Config Group ")) btnRemoveConfigGroups_Click(null, null);
            if (command.Equals("Reset Config Group")) btnResetConfigGroups_Click(null, null);
            if (command.Equals("Get Config Group ")) btnGetConfigGroup_Click(null, null);
            if (command.Equals("Retrieve CAPK")) btnRetrieveCAPK_Click(null, null);
            if (command.Equals("Retrieve CAPK ")) btnRetrieveCAPKCTLS_Click(null, null);
            if (command.Equals("Remove CAPK")) btnRemoveCAPK_Click(null, null);
            if (command.Equals("Remove CAPK ")) btnRemoveCAPKCTLS_Click(null, null);
            if (command.Equals("List CAPK")) btnListCAPK_Click(null, null);
            if (command.Equals("List CAPK ")) btnListCAPKCTLS_Click(null, null);
            if (command.Equals("Save CAPK")) btnSaveCAPK_Click(null, null);
            if (command.Equals("Save CAPK ")) btnSaveCAPKCTLS_Click(null, null);
            if (command.Equals("Remove All CAPK")) btnRemoveAllCAPK_Click(null, null);
            if (command.Equals("Remove All CAPK ")) btnRemoveAllCAPKCTLS_Click(null, null);
            if (command.Equals("Load Default CAPK")) button1_Click(null, null);
            if (command.Equals("Load CAPK From Disk")) loadCAPKDisk();

            if (command.Equals("Set White List ")) setWhiteList();
            if (command.Equals("Get White List ")) getWhiteList();
            if (command.Equals("Load Default CAPK ")) loadCTLSCAPK();
            if (command.Equals("Load Default Configuration ")) loadCTLSDefault();

            if (command.Equals("FeliCa Authentication")) FeliCaAuthentication(null, null);
            if (command.Equals("FeliCa Send Command")) FeliCaSendCommand(null, null);
            if (command.Equals("FeliCa Read")) FeliCaRead(null, null);
            if (command.Equals("FeliCa Read w/Mac")) FeliCaReadwMac(null, null);
            if (command.Equals("FeliCa Write")) FeliCaWrite(null, null);
            if (command.Equals("FeliCa Write w/Mac")) FeliCaWritewMac(null, null);
            if (command.Equals("FeliCa Request Service")) FeliCaRequestService(null, null);


            if (command.Equals("Load CTLS CAPK From Disk ")) loadCTLSCAPKDisk();
            if (command.Equals("Remove CRL")) btnRemoveCRL_Click(null, null);
            if (command.Equals("Remove Exception")) btnRemoveExc_Click(null, null);
            if (command.Equals("Start Swipe Transaction")) startSwipeTransaction(null, null);
            if (command.Equals("Start Keyed Transaction")) startKeyedTransaction(null, null);
            if (command.Equals("Cancel Swipe Transaction")) cancelSwipeTransaction(null, null);

            if (command.Equals("Reset MSR Terminal Data")) resetMSRTerminalData(null, null);
            if (command.Equals("Set MSR Terminal Data")) setMSRTerminalData(null, null);
            if (command.Equals("Get MSR Terminal Data")) getMSRTerminalData(null, null);


            if (command.Equals("List Exceptions")) btnListExc_Click(null, null);
            if (command.Equals("List CRL")) btnListCRL_Click(null, null);
            if (command.Equals("Save CRL")) btnSaveCRL_Click(null, null);
            if (command.Equals("Save Exception")) btnSaveExc_Click(null, null);
            if (command.Equals("Remove All CRL")) btnRemoveAllCRL_Click(null, null);
            if (command.Equals("Remove All Exceptions")) btnRemoveAllExp_Click(null, null);
            if (command.Equals("Set BDK")) btnBDK_Click(null, null);
            //if (command.Equals("Set UID")) btnUID_Click(null, null);
            if (command.Equals("Get Key Status")) btnGetKeyStatus_Click(null, null);
            if (command.Equals("Set Date/Time")) btnsetDateTime_Click(null, null);
            if (command.Equals("Get Date/Time")) btngetDateTime_Click(null, null);
            if (command.Equals("Get Date/Time String")) dateTimeString(null, null);
            if (command.Equals("Enter Stop Mode")) btnenterSleepMode_Click(null, null);
            if (command.Equals("Set Sleep Mode")) btnsetSleepMode_Click(null, null);
            if (command.Equals("Prompt Key Entry")) btnpinKeyEntry_Click(null, null);
            if (command.Equals("Prompt Amt Entry")) btnpinAmountEntry_Click(null, null);
            if (command.Equals("Prompt Key Input")) btnpinKeyEntry2_Click(null, null);
            if (command.Equals("Prompt Amt Input")) btnpinAmountEntry2_Click(null, null);
            if (command.Equals("Cancel PIN Entry")) btnCancelPIN_Click(null, null);
            if (command.Equals("Get Function Key")) btngetFunctionKey_Click(null, null);
            if (command.Equals("Send Beep")) btnbeep_Click(null, null);
            if (command.Equals("Get Pan")) btnGetPan_Click(null, null);
            if (command.Equals("Get Pan ")) btnGetPan2_Click(null, null);
            if (command.Equals("Clear Line #")) btnclearLineNumber_Click(null, null);
            if (command.Equals("Save Prompt")) btnsavePrompt_Click(null, null);
            if (command.Equals("Display Prompt")) btndisplayPrompt_Click(null, null);
            if (command.Equals("Display Message")) btndisplayMessage_Click(null, null);
            if (command.Equals("Enable Backlight")) btnenableBacklight_Click(null, null);
            if (command.Equals("Disable Backlight")) btndisableBacklight_Click(null, null);
            if (command.Equals("Backlight Status")) btnbacklightStatus_Click(null, null);
            if (command.Equals("Set Baud")) btnSetBaud_Click(null, null);
            if (command.Equals("Get Baud")) btnGetBaud_Click(null, null);
            if (command.Equals("Clear Display")) btnclearDisplay_Click(null, null);
            if (command.Equals("Clear Display ")) btnclearDisplay_Click2(null, null);
            if (command.Equals("Clear Card Data")) btnclearMSRData(null, null);
            if (command.Equals("Get Card Data")) btngetMSRData(null, null);
            if (command.Equals("Retrieve Tags")) btnRetrieveTransactionResult_Click(null, null);
            if (command.Equals("Poll Card Reader")) btnpollCardReader_Click(null, null);
            if (command.Equals("Auto Capture Swipe ON")) btnAutoCaptureMSROn(null, null);
            if (command.Equals("Auto Capture Swipe OFF")) btnAutoCaptureMSROff(null, null);
            if (command.Equals("Device Info")) btnUniPayScript(null, null);
            if (command.Equals("DUKPT KSN KEK")) getDUKPT(0);
            if (command.Equals("DUKPT KSN DEK")) getDUKPT(2);
            if (command.Equals("DUKPT KSN MAK")) getDUKPT(5);
            if (command.Equals("DUKPT KSN REK")) getDUKPT(10);
            if (command.Equals("DUKPT KSN HSM")) getDUKPT(20);
            if (command.Equals("Get Terminal ID")) btnTID_Click(null, null);
            if (command.Equals("Get Kernel Config")) btnGetMajorConfig_Click(null, null);
            if (command.Equals("Set Kernel Config")) setConfig();
            if (command.Equals("Update Firmware")) btnUpdateFirmware_Click(null, null);
            if (command.Equals("Execute RKI")) btnStartRKI_Click(null, null);
            if (command.Equals("Execute Legacy RKI")) btnStartRKI_Click(null, null);
            if (command.Equals("Set RKI URL")) seturl();
            if (command.Equals("Continue Booting")) continueBooting();

            if (command.Equals("PKI RKI - DEMO")) PKIRKI(false);
            if (command.Equals("PKI RKI - PROD")) PKIRKI(true);

            if (command.Equals("RKI Rev Z (DEMO)")) SymmetricRKI(4);
            if (command.Equals("RKI Rev Z (PRODUCTION)")) SymmetricRKI(5);

            if (command.Equals("Symmetric RKI - DEMO")) SymmetricRKI(false);
            if (command.Equals("Symmetric RKI - PROD")) SymmetricRKI(true);


            if (command.Equals("Set Merchant Record")) btnsetMerchantRecord(null, null);
            if (command.Equals("Get Merchant Record")) btngetMerchantRecord(null, null);
            if (command.Equals("Save Configuration Group")) btnSaveConfiguration_Click(null, null);
            if (command.Equals("Activate Transaction")) activateTransaction();
            if (command.Equals("Established IP Sockets")) sockets(null, null);

            if (command.Equals("Show ApplePay VAS Tags"))
            {
                tbOutputAppendText("Send the following tags with startTranasction to utilize ApplePay VAS\r\n\r\n", ident);

                tbOutputAppendText("ApplePay VAS OR ApplePay\r\n", ident);
                tbOutputAppendText("FFEE06189F220201009F2604000000009F2B050100000000DF010101\r\n\r\n", ident);
                tbOutputAppendText("ApplePay VAS AND ApplePay\r\n", ident);
                tbOutputAppendText("FFEE06189F220201009F2604000000019F2B050100000000DF010101\r\n\r\n", ident);
                tbOutputAppendText("ApplePay VAS ONLY\r\n", ident);
                tbOutputAppendText("FFEE06189F220201009F2604000000029F2B050100000000DF010101\r\n\r\n", ident);
                tbOutputAppendText("ApplePay ONLY\r\n", ident);
                tbOutputAppendText("FFEE06189F220201009F2604000000039F2B050100000000DF010101\r\n\r\n", ident);

            }



            if (command.Equals("Notifications ON")) notifications(true);
            if (command.Equals("Notifications OFF")) notifications(false);

            if (command.Equals("Start Custom Display Mode")) customdisplay(true);
            if (command.Equals("Stop Custom Display Mode")) customdisplay(false);

            if (command.Equals("Start Slideshow")) startSlideShow(null, null);
            if (command.Equals("Start Default Slideshow"))
            {

                setDefaultSlideShow(null, null);
            }

            if (command.Equals("Display Image")) displayImage(null, null);

            if (command.Equals("Set Background")) setBackground(null, null);
            if (command.Equals("Remove Background")) removeBackground(null, null);

            if (command.Equals("Set Default Background")) setDefaultBackground(null, null);


            if (command.Equals("Get Transaction Results")) btngetTransResults(null, null);
            if (command.Equals("Start Trans")) btnStartAll_Click(null, null);


            if (command.Equals("Send NFC Command")) sendNFCCommand();
            if (command.Equals("Single Beep")) VP8800BeepLCD(01, 00, false);
            if (command.Equals("Double Beep")) VP8800BeepLCD(02, 00, false);
            if (command.Equals("Three Short Beeps")) VP8800BeepLCD(03, 00, false);
            if (command.Equals("Four Short Beeps")) VP8800BeepLCD(04, 00, false);
            if (command.Equals("200ms Beep")) VP8800BeepLCD(05, 00, false);
            if (command.Equals("400ms Beep")) VP8800BeepLCD(06, 00, false);
            if (command.Equals("600ms Beep")) VP8800BeepLCD(07, 00, false);
            if (command.Equals("800ms Beep")) VP8800BeepLCD(08, 00, false);

            if (command.Equals("LED 0 Off")) VP8800BeepLCD(00, 00, false);
            if (command.Equals("LED 0 On")) VP8800BeepLCD(00, 00, true);
            if (command.Equals("LED 1 Off")) VP8800BeepLCD(00, 01, false);
            if (command.Equals("LED 1 On")) VP8800BeepLCD(00, 01, true);
            if (command.Equals("LED 2 Off")) VP8800BeepLCD(00, 02, false);
            if (command.Equals("LED 2 On")) VP8800BeepLCD(00, 02, true);
            if (command.Equals("LED 3 Off")) VP8800BeepLCD(00, 03, false);
            if (command.Equals("LED 3 On")) VP8800BeepLCD(00, 03, true);
            if (command.Equals("All LED Off")) VP8800BeepLCD(00, 0xFF, false);
            if (command.Equals("All LED ON")) VP8800BeepLCD(00, 0xFF, true);

            if (command.Equals("ICC LED Off")) VP8800LED(00, false);
            if (command.Equals("ICC LED On")) VP8800LED(00, true);
            if (command.Equals("BLUE MSR LED Off")) VP8800LED(01, false);
            if (command.Equals("BLUE MSR LED On")) VP8800LED(01, true);
            if (command.Equals("RED MSR LED Off")) VP8800LED(02, false);
            if (command.Equals("RED MSR LED On")) VP8800LED(02, true);
            if (command.Equals("GREEN LED Off")) VP8800LED(03, false);
            if (command.Equals("GREEN LED On")) VP8800LED(03, true);
            if (command.Equals("Enable KIII"))
            {
                tbOutputAppendText("Enable KIII with Spectrum Pro\r\n", ident);
                IDT_Device.enableKIII = true;
            }

            if (command.Equals("Disable KIII"))
            {
                tbOutputAppendText("Disable KIII with Spectrum Pro\r\n", ident);
                IDT_Device.enableKIII = false;
            }


            if (command.Equals("All Settings")) AllSettings();
            if (command.Equals("Arm To Read")) ArmToRead();
            if (command.Equals("Start Polling Data")) StartPollingData();
            if (command.Equals("Stop Polling Data")) StopPollingData();



            if (command.Equals("Free Drive Space")) btnFreeSpace(null, null);
            if (command.Equals("List Directory")) btnListDirectory(null, null);
            if (command.Equals("Create Directory")) btnCreateDirectory(null, null);
            if (command.Equals("Delete Directory")) btnDeleteDirectory(null, null);
            if (command.Equals("Delete File")) btnDeleteFile(null, null);
            if (command.Equals("Transfer File")) TransferFile(null, null);
            if (command.Equals("Link MessageID to Screen")) LinkMessageID(null, null);


            if (command.Equals("Disable Blue LED Sequence")) disBlueLED();
            if (command.Equals("Enable Blue LED Sequence")) enaBlueLED();
            if (command.Equals("Turn Off Yellow LED")) offYellowLED();
            if (command.Equals("Turn On Yellow LED")) onYellowLED();
            if (command.Equals("Buzzer On/Off")) buzzerOnOff();
            if (command.Equals("Reset Initial State")) resetInitialState(null, null);
            if (command.Equals("Set Colors")) setColor(null, null);
            if (command.Equals("Capture Signature")) captureSig(null, null);



            if (command.Equals("Calibration")) ctlsDelay(null, null);
            if (command.Equals("Update Device Firmware")) btnUpdateFirmwareIDG_Click(null, null);
            if (command.Equals("Update Device K81 Firmware")) btnUpdateFirmwareIDG_Click(null, null);
            if (command.Equals("Update Firmware/Kernels")) btnUpdateFirmwareIDG1050_Click(null, null);
            if (command.Equals("Update All Kernels")) btnUpdateFirmwareIDG1050_Click2(null, null);
            if (command.Equals("Update Device Firmware IP")) btnUpdateFirmwareIP();
            if (command.Equals("Set DUKPT Key Type")) setKeyTypeforEncryptKey();
            if (command.Equals("Set Pre/Post PAN Data Len")) setPanLength();
            if (command.Equals("Get Pre/Post PAN Data Len")) getPanLength();

            if (command.Equals("Online Result:OK")) btnOnlineOK(null, null);
            if (command.Equals("Online Result:NOT OK")) btnOnlineNotOK(null, null);
            if (command.Equals("Get PAN")) btnGetPAN(null, null);


            if (command.Equals("Flush Track Data")) btnFlushTrackData(null, null);
            if (command.Equals("Prompt Debit/Credit")) btngetDebitCredit(null, null);


            if (command.Equals("Set Network")) setNetwork();
            if (command.Equals("Get Network")) getNetwork();
            if (command.Equals("Set Mac Address")) setMacAddress();
            if (command.Equals("Get Ethernet Mac Address")) getMacAddress(0);
            if (command.Equals("Get WiFi Mac Address")) getMacAddress(1);
            if (command.Equals("Get BLE Mac Address")) getMacAddress(2);
            if (command.Equals("Approve Online CTLS Trans")) approveOnline();


            if (command.Equals("Get Data Key Slot")) getDataKeySlot();
            if (command.Equals("Set Data Key Slot")) setDataKeySlot();
            if (command.Equals("Get PIN Key Slot")) getPINKeySlot();
            if (command.Equals("Set PIN Key Slot")) setPINKeySlot();
            if (command.Equals("Get Status All Key Slots")) getStatusAllKeySlots();
            if (command.Equals("Get Info Single Key Slot")) getInfoSingleKeySlot();
            if (command.Equals("Get Certificate Info")) getCertificateInfo();
            if (command.Equals("Start IP Connection Monitor")) startMonitor();
            if (command.Equals("Stop IP Connection Monitor")) stopMonitor();
            if (command.Equals("Get Versions")) getVersion();

            if (command.Equals("Show Screen")) showScreen();
            if (command.Equals("Get Button Event")) getButtonEvent();
            if (command.Equals("Add Button")) addButton();
            if (command.Equals("Add Text")) addText();
            if (command.Equals("Add Image")) addImage();
            if (command.Equals("Update Label")) updateTextLabel();
            if (command.Equals("Update Color")) updateTextColor();
            if (command.Equals("Update Position")) updateTextPosition();
            if (command.Equals("Remove Object")) removeObject();
            if (command.Equals("Set BLE Parameters")) setBLEParameters();
            if (command.Equals("Reset BLE Password")) resetBLEPassword();

            if (command.Equals("Set Swipe and Done")) setSwipeandDone();
            if (command.Equals("Get Swipe and Done")) getSwipeandDone();

            if (command.Equals("Create Screen")) createScreen();
            if (command.Equals("Destroy Screen")) destroyScreen();
            if (command.Equals("Get Active Screen")) getActiveScreen();

            if (command.Equals("Get TransArmor ID")) getTID();
            if (command.Equals("Set TransArmor ID")) setTID();
            if (command.Equals("Set TransArmor Encryption")) setEncryption();
            if (command.Equals("Add Ethernet")) addEthernet();
            if (command.Equals("Add LED")) addLED();
            if (command.Equals("Clone Screen")) cloneScreen();
            if (command.Equals("Enter Low Power Mode")) lowPowerMode();
            if (command.Equals("Standby Mode")) standby();

            if (command.Equals("Store Screen Info")) storeScreenInfo();
            if (command.Equals("Load Screen Info")) loadScreenInfo();
            if (command.Equals("Clear Screen Info")) clearScreenInfo();

            if (command.Equals("Get All Screens")) getAllScreens();
            if (command.Equals("Get All Objects on Screen")) getAllObjects();

            if (command.Equals("Query Screen by Name")) queryScreenbyName();
            if (command.Equals("Query Object by Name")) queryObjectbyName();
            if (command.Equals("Query Screen by ID")) queryScreenbyID();
            if (command.Equals("Query Object by ID")) queryObjectbyID();

            if (command.Equals("Set Backlight")) setBacklight();
            if (command.Equals("Use SecureHead for EMV")) useSecureHead();

            if (command.Equals("SDK Status")) sdk(null, null);
            if (command.Equals("Turn On Notifications")) notify(true);
            if (command.Equals("Turn Off Notifications")) notify(false);
            if (command.Equals("Start Screen Saver")) startScreenSaver();



            //Added because of ConfigUtility
            if (command.Equals("Get Product Type")) getProductType();
            if (command.Equals("Get Processor Type")) getProcessorType();
            if (command.Equals("Get Hardware Information")) getHardwareInfor();
            if (command.Equals("Get UID of MCU")) getUIDofMCU();
            if (command.Equals("Get Module Version Information")) getModuleVer();
            if (command.Equals("Get USB Boot Loader Information")) getUsbBootLoader();
            if (command.Equals("Get Remote Key Injection Timeout")) getRemoteKeyInjectionTO();
            if (command.Equals("Get Cash Transaction Reader Risk Parameters")) getCashTranRiskPara();
            if (command.Equals("Get DRL Reader Risk Parameters")) getDrlReaderRiskPara();
            if (command.Equals("Get MSR Secure Parameters")) getMsrSecurePar();
            if (command.Equals("Convert Old to New")) convertTags();
            if (command.Equals("Key Values ON")) keyOn(true);
            if (command.Equals("Key Values OFF")) keyOn(false);
            if (command.Equals("Get Key Values")) getkeyOn();
            if (command.Equals("Get PIN From Last 12")) getPIN();
            if (command.Equals("Set Write Delay")) writeDelay();
            if (command.Equals("Set Write Key Delay")) writeKeyDelay();
            if (command.Equals("Set Read Delay")) readDelay();




            if (command.Equals("Set Track Format")) setTrack();
            if (command.Equals("Get Track Format")) getTrack();
            if (command.Equals("Set Masking")) setMask();
            if (command.Equals("Get Masking")) getMask();

            if (command.Equals("Read Log")) readLog();
            if (command.Equals("Clear Log")) clearLog();
            if (command.Equals("Enable Log")) enableLog(true);
            if (command.Equals("Disable Log")) enableLog(false);
            if (command.Equals("Enable Extended Errors")) enableErrors(true);
            if (command.Equals("Disable Extended Errors")) enableErrors(false);

            if (command.Equals("Display Text")) displayText();
            if (command.Equals("Display Button")) displayButton();
            if (command.Equals("Get Input Event")) getInputEvent();
            if (command.Equals("Clear Input Event")) clearInputEvent();

            if (command.Equals("Start Listen Notifications")) startListen();
            if (command.Equals("Stop Listen Notifications")) stopListen();
            if (command.Equals("Set Date")) setDate();
            if (command.Equals("Get Date")) getDate();
            if (command.Equals("Set Time")) setTime();
            if (command.Equals("Get Time")) getTime();
            if (command.Equals("Set Configuration")) setConfiguration();
            if (command.Equals("Get Configuration")) getConfiguration();


            if (command.Equals("QuickChip Mode ON")) QCOn();

            if (command.Equals("QuickChip Mode OFF")) QCOff();
            if (command.Equals("Get QuickChip Mode")) GetQCMode();

            if (command.Equals("Set English Language")) setLanguage(0);
            if (command.Equals("Set Japanese Language")) setLanguage(1);


            if (command.Equals("Play Audio")) playAudio();
            if (command.Equals("Stop Audio")) stopAudio();
            if (command.Equals("Start QR Scan")) startQR();
            if (command.Equals("Stop QR Scan")) stopQR();
            if (command.Equals("Start Camera Capture")) startCamera();
            if (command.Equals("Stop Camera Capture")) stopCamera();

            if (command.Equals("Enable Admin Key")) EnableAdminKey(true);
            if (command.Equals("Disable Admin Key")) EnableAdminKey(false);

            if (command.Equals("PKI RKI (Demo)")) RKIPKI(true);
            if (command.Equals("PKI RKI (Production)")) RKIPKI(false);

            if (command.Equals("Set RKI Comm Delay")) setRKIDelay();
            if (command.Equals("Get Output Type Swipe")) getOutputType(true);

            if (command.Equals("Set Original Output Type Swipe")) setOutputType(true, 0);
            if (command.Equals("Set Enhanced Output Type Swipe")) setOutputType(true, 1);
            if (command.Equals("Set XML Output Type Swipe/Manual")) setOutputType(true, 2);

            if (command.Equals("Get Output Type Manual")) getOutputType(false);

            if (command.Equals("Set Original Output Type Manual")) setOutputType(false, 0);
            if (command.Equals("Set Enhanced Output Type Manual")) setOutputType(false, 1);
            if (command.Equals("Clear White List")) clearWhiteList();
            if (command.Equals("Enable Keypad")) enableKeypad();

            if (command.Equals("KB Mode Status"))
            {
                IDTechComm comm = Profile.getComm(ident);
                if (comm == null)
                {
                    tbOutputAppendText("No Device Detected \r\n", ident);
                    return;
                }





                if (comm.isKB)
                {
                    if (comm.isQCKB)
                    {
                        tbOutputAppendText("Device is in QuickChip KB mode. \r\n", ident);
                    }
                    else
                    {
                        tbOutputAppendText("Device is in KB mode. \r\n", ident);
                    }

                }
                else
                {
                    if (comm.isQCKB)
                    {
                        tbOutputAppendText("Device is in QuickChip HID mode. \r\n", ident);
                    }
                    else
                    {
                        tbOutputAppendText("Device is in HID mode. \r\n", ident);
                    }

                }
            }
        }

        private void enableKeypad()
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.pin_enableKeypad();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enable Keypad Success: \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Enable Keypad Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void clearWhiteList()
        {
            string ident = getIdentValue();
            if (Microsoft.VisualBasic.Interaction.MsgBox("Clear White List? Any entries on the current white list will output as encrypted data after removal.", MsgBoxStyle.YesNo) == MsgBoxResult.No) return;


            RETURN_CODE rt = IDT_Device.SharedController.device_clearWhiteList(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear White List Success: \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Clear White List Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void getOutputType(bool isSwipe)
        {
            string ident = getIdentValue();
            int value = 0;
            RETURN_CODE rt = IDT_Device.SharedController.device_getOutputType(isSwipe, ref value);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                string type = "Manual";
                if (isSwipe) type = "Swipe";
                if (value == 0)
                {
                    tbOutputAppendText("\r\nOriginal Output Type: " + type + "\r\n", ident);
                }
                else if (value == 1)
                {
                    tbOutputAppendText("\r\nEnhanced Output Type: " + type + "\r\n", ident);
                }
                else if (value == 2)
                {
                    tbOutputAppendText("\r\nXML Output Type: " + type + "\r\n", ident);
                }

                else
                {
                    tbOutputAppendText("\r\nUNKNOWN Output Type: " + type + "\r\n", ident);
                }


            }
            else
            {
                tbOutputAppendText("Get Output Type Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Type Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void setOutputType(bool isSwipe, int value)
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_setOutputType(isSwipe, value);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                string type = "Manual";
                if (isSwipe) type = "Swipe";
                if (value == 0)
                {
                    tbOutputAppendText("\r\nSet Original Output Type Successful: " + type + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("\nSet Original Type Successful: " + type + "\r\n", ident);
                }
                if (value == 1)
                {
                    tbOutputAppendText("\r\nSet Enhanced Output Type Successful: " + type + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("\nSet Enhanced Type Successful: " + type + "\r\n", ident);
                }
                if (value == 2)
                {
                    tbOutputAppendText("\r\nSet XML Output Type Successful: Swipe/Manual\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("\nSet XML Type Successful: Swipe/Manual\r\n", ident);
                }

            }
            else
            {
                tbOutputAppendText("Set Output Type Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Type Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void RKIPKI(bool isTest)
        {
            string ident = getIdentValue();
            tbOutputAppendText("\r\nStaring RKI Process.  Please Wait...\r\n", ident);
            System.Diagnostics.Debug.WriteLine("Staring RKI Process.  Please Wait... \r\n", ident);

            RETURN_CODE rt = IDT_Device.SharedController.device_startRKI(isTest, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRKI Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("RKI Successful \r\n", ident);

            }
            else
            {
                tbOutputAppendText("RKI Fail Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("RKI Fail Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void writeKeyDelay()
        {
            string ident = getIdentValue();
            int setValue = 0;
            IDTechComm comm = Profile.getComm(ident);
            if (comm == null)
            {
                tbOutputAppendText("No Device Found\r\n", ident);
                return;
            }
            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter the delay (in milliseconds) that must pass before reading response to 90-03 or 4932.",
                "Enter Write Key Delay", comm.delay9003Read.ToString(), -1, -1);
            try
            {
                setValue = Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid delay value\r\n", ident);
                return;
            }
            comm.delay9003Read = setValue;


            tbOutputAppendText("New Value For Write Key Delay: " + setValue.ToString() + "\r\n", ident);

        }

        private void writeDelay()
        {
            string ident = getIdentValue();
            int setValue = 0;
            IDTechComm comm = Profile.getComm(ident);
            if (comm == null)
            {
                tbOutputAppendText("No Device Found\r\n", ident);
                return;
            }
            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter the delay (in milliseconds) that must pass after the previous command response was received before the next command can be sent.",
                "Enter Write Delay", comm.delayWrite.ToString(), -1, -1);
            try
            {
                setValue = Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid delay value\r\n", ident);
                return;
            }
            comm.delayWrite = setValue;


            tbOutputAppendText("New Value For Write Delay: " + setValue.ToString() + "\r\n", ident);

        }

        private void readDelay()
        {
            string ident = getIdentValue();
            int setValue = 0;
            IDTechComm comm = Profile.getComm(ident);
            if (comm == null)
            {
                tbOutputAppendText("No Device Found\r\n", ident);
                return;
            }
            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter the delay (in milliseconds) that must pass after the command is sent before a read request can be executed.",
                "Enter Read Delay", comm.delayRead.ToString(), -1, -1);
            try
            {
                setValue = Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid delay value\r\n", ident);
                return;
            }
            comm.delayRead = setValue;


            tbOutputAppendText("New Value For Read Delay: " + setValue.ToString() + "\r\n", ident);

        }

        private void setRKIDelay()
        {
            string ident = getIdentValue();
            int setValue = 0;
            int getValue = 0;
            IDT_Device.SharedController.getRKIDelay(ref setValue, ref getValue);
            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter the delay (in milliseconds) to insert before executing a SetFeatureReport for command 90-03.",
                "Enter Delay", setValue.ToString(), -1, -1);
            try
            {
                setValue = Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid delay value for SetFeatureReport\r\n", ident);
            }

            response = Microsoft.VisualBasic.Interaction.InputBox(
               "Please enter the delay (in milliseconds) to insert before executing a GetFeatureReport in response to command 90-03.",
               "Enter Delay", getValue.ToString(), -1, -1);
            try
            {
                getValue = Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid delay value for GetFeatureReport\r\n", ident);
            }

            IDT_Device.SharedController.setRKIDelay(setValue, getValue);

            IDT_Device.SharedController.getRKIDelay(ref setValue, ref getValue);
            tbOutputAppendText("SetFeatureReport Delay: " + setValue.ToString() + "\r\n", ident);
            tbOutputAppendText("GetFeatureReport Delay: " + getValue.ToString() + "\r\n", ident);

        }

        private void startScreenSaver()
        {
            string ident = getIdentValue();

            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter name of video file located on SD card.",
                "Enter Name", "swipe1.avi", -1, -1);

            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_startScreenSaver(response, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start Screen Saver Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start Screen Saver Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void playAudio()
        {
            string ident = getIdentValue();

            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter name of audio file located on SD card.",
                "Enter Name", "audio.wav", -1, -1);

            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_playAudio(response, 1, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start Audio Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start Audio Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void stopAudio()
        {
            string ident = getIdentValue();


            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_stopAudio(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Stop Audio Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Stop Audio Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void startQR()
        {
            string ident = getIdentValue();



            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_startScanQR(30, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start QR Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start QR Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void stopQR()
        {
            string ident = getIdentValue();



            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_stopScanQR(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Stop QR Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Stop QR Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void startCamera()
        {
            string ident = getIdentValue();



            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_startCameraCapture(30, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start Camera Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start Camera Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void stopCamera()
        {
            string ident = getIdentValue();



            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_stopCameraCapture(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Stop Camera Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Stop Camera Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void setLanguage(int val)
        {
            string ident = getIdentValue();



            RETURN_CODE rt = IDT_Device.SharedController.device_setLanguage(val);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Language executed successfully.\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Set Language failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void setDate()
        {
            string ident = getIdentValue();
            string year =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Year (0-9999)", "Enter Year", "2019", -1,
                    -1);
            int yr = 0;
            try
            {
                yr = Convert.ToInt32(year);
            }
            catch
            {
                tbOutputAppendText("Invalid Year\r\n", ident);
                return;
            }

            if (yr < 0 || yr > 9999)
            {
                tbOutputAppendText("Invalid Year\r\n", ident);
                return;
            }

            string month =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Month (1-12)", "Enter Month", "01", -1,
                    -1);
            int mo = 0;
            try
            {
                mo = Convert.ToInt16(month);
            }
            catch
            {
                tbOutputAppendText("Invalid Month\r\n", ident);
                return;
            }

            if (mo < 1 || mo > 12)
            {
                tbOutputAppendText("Invalid Month\r\n", ident);
                return;
            }

            string day =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Day (1-31)", "Enter Day", "01", -1,
                    -1);
            int da = 0;
            try
            {
                da = Convert.ToInt16(day);
            }
            catch
            {
                tbOutputAppendText("Invalid Day\r\n", ident);
                return;
            }

            if (da < 1 || da > 31)
            {
                tbOutputAppendText("Invalid Day\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setDate(yr, mo, da);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Date executed successfully.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Date failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void getDate()
        {
            string ident = getIdentValue();


            int yr = 0;
            int mo = 0;
            int da = 0;
            RETURN_CODE rt = IDT_Device.SharedController.config_getDate(ref yr, ref mo, ref da);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Date executed successfully.\r\n", ident);
                tbOutputAppendText("Year=  " + yr.ToString() + "\r\n", ident);
                tbOutputAppendText("Month=  " + mo.ToString() + "\r\n", ident);
                tbOutputAppendText("Day=  " + da.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Date failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void setTime()
        {
            string ident = getIdentValue();
            string hour =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Hour (0-23)", "Enter Hour", "12", -1,
                    -1);
            int hr = 0;
            try
            {
                hr = Convert.ToInt32(hour);
            }
            catch
            {
                tbOutputAppendText("Invalid Hour\r\n", ident);
                return;
            }

            if (hr < 0 || hr > 23)
            {
                tbOutputAppendText("Invalid Hour\r\n", ident);
                return;
            }

            string minute =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Minute (0-59)", "Enter Minute", "00", -1,
                    -1);
            int min = 0;
            try
            {
                min = Convert.ToInt16(minute);
            }
            catch
            {
                tbOutputAppendText("Invalid Minute\r\n", ident);
                return;
            }

            if (min < 0 || min > 59)
            {
                tbOutputAppendText("Invalid Minute\r\n", ident);
                return;
            }



            RETURN_CODE rt = IDT_Device.SharedController.config_setTime(hr, min);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Time executed successfully.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Time failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void getTime()
        {
            string ident = getIdentValue();


            int hr = 0;
            int min = 0;
            RETURN_CODE rt = IDT_Device.SharedController.config_getTime(ref hr, ref min);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Time executed successfully.\r\n", ident);
                tbOutputAppendText("Hour=  " + hr.ToString() + "\r\n", ident);
                tbOutputAppendText("Minute=  " + min.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Time failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void startListen()
        {

            string ident = getIdentValue();

            IDT_Device.SharedController.device_listenForNotifications(true, ident);
            SetOutputText("Start listening for notifications ON-\r\n", ident);


        }

        private void stopListen()
        {

            string ident = getIdentValue();

            IDT_Device.SharedController.device_listenForNotifications(false, ident);
            SetOutputText("Start listening for notifications OFF-\r\n", ident);


        }
        private void clearInputEvent()
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.lcd_clearInputEvents();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear Input Events executed successfully.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Clear Input Events failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void getInputEvent()
        {
            string ident = getIdentValue();
            string response =
                Microsoft.VisualBasic.Interaction.InputBox("Enter timeout value", "Enter Timeout", "20", -1,
                    -1);
            byte timeout = 0;
            try
            {
                timeout = (byte)Convert.ToByte(response);
            }
            catch
            {
                tbOutputAppendText("Invalid Timeout Value Value\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_getInputEvent(timeout);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Input Event executed successfully. Awaiting event... successful.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Input Event failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void displayText()
        {
            string ident = getIdentValue();
            if (alignmentT.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0 ||
                fontidt.Text.Length == 0 || labelt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }
            byte[] identifier = null;

            RETURN_CODE rt = IDT_Device.SharedController.lcd_displayText(Convert.ToUInt16(xt.Text), Convert.ToUInt16(yt.Text),
               0, 0, 1, Convert.ToUInt16(fontidt.Text), Convert.ToUInt16(alignmentT.Text), labelt.Text, ref identifier);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Display text successful.  Assigned ID: " + Common.getHexStringFromBytes(identifier) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Display Text failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void QCOn()
        {

            if (MessageBox.Show("Enable QuickChip QB KB Mode and change terminal settings to 5C?", "Switch Mode?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
            {

                return;
            }
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.device_setQuickChipMode(true);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                ident = getIdentValue();
                tbOutputAppendText("Quickchip Mode On Successful.\r\n", ident);
                refreshDevices();
                buildTreeView();
            }
            else
            {
                ident = getIdentValue();
                tbOutputAppendText("Quickchip Mode On failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void QCOff()
        {

            if (MessageBox.Show("Disable QuickChip QB KB Mode, return to HID mode, and change terminal settings to 2C?", "Switch Mode?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
            {

                return;
            }

            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.device_setQuickChipMode(false);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                ident = getIdentValue();
                tbOutputAppendText("Quickchip Mode Off Successful.\r\n", ident);
                refreshDevices();
                buildTreeView();
            }
            else
            {
                ident = getIdentValue();
                tbOutputAppendText("Quickchip Mode Off failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void GetQCMode()
        {
            string ident = getIdentValue();

            bool val = false;
            RETURN_CODE rt = IDT_Device.SharedController.device_getQuickChipMode(ref val);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (val) tbOutputAppendText("Quickchip Mode Is On.\r\n", ident);
                else tbOutputAppendText("Quickchip Mode Is Off.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Quickchip Mode  failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void displayButton()
        {
            string ident = getIdentValue();
            if (alignmentT.Text.Length == 0 || widtht.Text.Length == 0 || heightt.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0 ||
                fontidt.Text.Length == 0 || labelt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }
            byte[] identifier = null;

            RETURN_CODE rt = IDT_Device.SharedController.lcd_displayButton(Convert.ToUInt16(xt.Text), Convert.ToUInt16(yt.Text),
                Convert.ToUInt16(widtht.Text), Convert.ToUInt16(heightt.Text), 1, Convert.ToUInt16(fontidt.Text), Convert.ToUInt16(alignmentT.Text), labelt.Text, ref identifier);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Display Button successful.  Assigned ID: " + Common.getHexStringFromBytes(identifier) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Display Button failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void logCallback(string log, string ip)
        {
            string ident = getIdentValue();

            SetOutputText(ip + ": " + log + "\r\n", ident);
        }

        private void readLog()
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_logRead(logCallback, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Read Log Successful-\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Read Log Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void clearLog()
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_logClear(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Clear Log Successful-\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Clear Log Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void loadCTLSDefault()
        {
            string ident = getIdentValue();


            RETURN_CODE rt = IDT_Device.SharedController.ctls_setDefaultConfiguration();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                SetOutputText("Default Configuration Successful-\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Default Configuration Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void enableErrors(bool val)
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_extendedErrorCondition(val, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (val)
                    SetOutputText("Enable Errors Successful-\r\n", ident);
                else SetOutputText("Disable Errors Successful-\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Enable/Disasble Errors Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void enableLog(bool val)
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_logEnable(val, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (val)
                    SetOutputText("Enable Log Successful-\r\n", ident);
                else SetOutputText("Disable Log Successful-\r\n", ident);

            }
            else
            {
                tbOutputAppendText("Enable/Disasble Log Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void setMask()
        {
            string ident = getIdentValue();

            string response =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Pre-Pan Clear Digits (0-6)", "Enter PrePan", "6", -1,
                    -1);
            byte prePan = 0;
            try
            {
                prePan = (byte)Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid PrePan Value\r\n", ident);
                return;
            }


            if (prePan < 0 || prePan > 6)
            {
                tbOutputAppendText("Invalid PrePan Value\r\n", ident);
                return;
            }

            response = Microsoft.VisualBasic.Interaction.InputBox("Enter Post-Pan Clear Digits (0-6)", "Enter PostPan",
                "4", -1, -1);
            byte postPan = 0;
            try
            {
                postPan = (byte)Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid PostPan Value\r\n", ident);
                return;
            }


            if (postPan < 0 || postPan > 6)
            {
                tbOutputAppendText("Invalid PostPan Value\r\n", ident);
                return;
            }

            response = Microsoft.VisualBasic.Interaction.InputBox("Enter Masking Character as Hex Value (0x20 - 0x7f)",
                "Enter Masking", "2A", -1, -1);

            byte masking = 0x2A;
            try
            {
                byte[] convert = Common.getByteArray(response);
                if (convert.Length != 1)
                {
                    tbOutputAppendText("Invalid Masking Value\r\n", ident);
                    return;
                }

                masking = convert[0];
            }
            catch
            {
                tbOutputAppendText("Invalid Masking Value\r\n", ident);
                return;
            }


            if (masking < 0x20 || masking > 0x7F)
            {
                tbOutputAppendText("Invalid Masking Value\r\n", ident);
                return;
            }

            response = Microsoft.VisualBasic.Interaction.InputBox("Enter Byte Masking as Hex Value (0x0A - 0x0F)",
                "Enter Byte Masking", "0C", -1, -1);

            byte bmasking = 0x2A;
            try
            {
                byte[] convert = Common.getByteArray(response);
                if (convert.Length != 1)
                {
                    tbOutputAppendText("Invalid Byte Masking Value\r\n", ident);
                    return;
                }

                bmasking = convert[0];
            }
            catch
            {
                tbOutputAppendText("Invalid Byte Masking Value\r\n", ident);
                return;
            }


            if (bmasking < 0x0A || bmasking > 0x0F)
            {
                tbOutputAppendText("Invalid Masking Value\r\n", ident);
                return;
            }


            response = Microsoft.VisualBasic.Interaction.InputBox("Mask Expiration Date? (YES/NO)", "Mask Expiration",
                "NO", -1, -1);

            bool maskexp = (response.ToUpper().Equals("YES"));





            RETURN_CODE rt =
                IDT_Device.SharedController.config_setMasking(prePan, postPan, masking, bmasking, maskexp, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Masking Options Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Masking Options Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void getMask()
        {

            string ident = getIdentValue();
            byte prePan = 0;
            byte postPan = 0;
            byte masking = 0;
            byte bmasking = 0;
            bool maskexp = false;

            RETURN_CODE rt = IDT_Device.SharedController.config_getMasking(ref prePan, ref postPan, ref masking,
                ref bmasking, ref maskexp, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRetrieve Masking Successful-\r\n", ident);
                tbOutputAppendText("PrePAN = " + prePan.ToString() + "\r\n", ident);
                tbOutputAppendText("PostPAN = " + postPan.ToString() + "\r\n", ident);
                tbOutputAppendText("ASCII Masking = " + Common.getHexStringFromBytes(new byte[] { masking }) + "\r\n", ident);
                tbOutputAppendText("Byte Masking = " + Common.getHexStringFromBytes(new byte[] { bmasking }) + "\r\n", ident);
                if (maskexp) tbOutputAppendText("Expiration Masking = TRUE\r\n\r\n", ident);
                else tbOutputAppendText("Expiration Masking = FALSE\r\n\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Track Options Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void pollForToken()
        {
            string ident = getIdentValue();

            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "How many seconds would you like to poll for token? You must be in passthrough mode for this to execute.",
                "Timeout", "15", -1, -1);


            if (response.Equals(""))
            {
                tbOutputAppendText("No Timeout Value Specified\r\n", ident);
                return;
            }

            int timeout = 10;

            try
            {
                timeout = Convert.ToInt32(response);
            }
            catch
            {
                tbOutputAppendText("Invalid timeout value\r\n", ident);
                return;
            }

            byte card = 0;
            byte[] serialNumber = null;
            tbOutputAppendText("Please tap card within the next " + timeout.ToString() + " seconds\r\n", ident);
            RETURN_CODE rt = IDT_Device.SharedController.device_pollForToken((byte)timeout, ref card, ref serialNumber);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Poll Token Successful\r\n", ident);
                switch (card)
                {
                    case 0:
                    tbOutputAppendText("No Card Found\r\n", ident);
                    break;
                    case 1:
                    tbOutputAppendText("ISO 14443 Type A, Supports 14443-4\r\n", ident);
                    break;
                    case 2:
                    tbOutputAppendText("ISO 14443 Type B, Supports 14443-4\r\n", ident);
                    break;
                    case 3:
                    tbOutputAppendText("Mifare Type A - Standard\r\n", ident);
                    break;
                    case 4:
                    tbOutputAppendText("Myfare Type A - Ultralight\r\n", ident);
                    break;
                    case 5:
                    tbOutputAppendText("ISO 14443 Type A, Does Not Support 14443-4\r\n", ident);
                    break;
                    case 6:
                    tbOutputAppendText("ISO 14443 Type B, Does Not Support 14443-4\r\n", ident);
                    break;
                    case 7:
                    tbOutputAppendText("14443 Type A and Mifare - NFC Phone\r\n", ident);
                    break;

                }
                tbOutputAppendText("Serial Number: " + Common.getHexStringFromBytes(serialNumber) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Poll for token  Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void setTrack()
        {
            string ident = getIdentValue();

            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Enter Format-\r\n0 = No Sentinels, No LRC\r\n1 = Include Sentinels, No LRC\r\n2 = Include Sentinels, Include LRC",
                "Enter Track Format", "1", -1, -1);


            if (!response.Equals("1") && !response.Equals("0") && !response.Equals("2"))
            {
                tbOutputAppendText("Incorrect Track Option\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setTrackFormat((byte)Convert.ToInt16(response), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Track Options Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Track Options Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void sendNFCCommand()
        {
            string ident = getIdentValue();

            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter a NFC command in hex format.  The device must be in pass through mode.",
                "Enter Command", "FF30", -1, -1);

            byte[] sendData = null;
            try
            {
                sendData = Common.getByteArray(response);
            }
            catch
            {
                tbOutputAppendText("Invalid Data\r\n", ident);
                return;
            }

            if (sendData == null || sendData.Length == 0)
            {
                tbOutputAppendText("Invalid Data\r\n", ident);
                return;
            }

            byte[] val = null;
            RETURN_CODE rt = IDT_Device.SharedController.ctls_nfcCommand(sendData, ref val, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Send NFC Command Success: " + Common.getHexStringFromBytes(val) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Send NFC Command Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void setConfiguration()
        {

            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.msr_setConfiguration(Common.getByteArray(tbInterfaceControl.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nSet Configuratiuon Successful-\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set Configuraiton Failed - Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void getConfiguration()
        {

            string ident = getIdentValue();
            byte[] option = null;

            RETURN_CODE rt = IDT_Device.SharedController.msr_getConfiguration(ref option, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nGet Configuratiuon Successful-\r\n", ident);
                if (option != null) tbOutputAppendText(Common.getHexStringFromBytes(option) + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Configuraiton Failed - Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void getTrack()
        {

            string ident = getIdentValue();
            byte option = 0;

            RETURN_CODE rt = IDT_Device.SharedController.config_getTrackFormat(ref option, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("\r\nRetrieve Track Options Successful-\r\n", ident);
                if (option == 0) tbOutputAppendText("Get Track Options Successful\r\nNo Sentinels, No LRC\r\n\r\n", ident);
                if (option == 1)
                    tbOutputAppendText("Get Track Options Successful\r\nInclude Sentinels, No LRC\r\n\r\n", ident);
                if (option == 2)
                    tbOutputAppendText("Get Track Options Successful\r\nInclude Sentinels, Include LRC\r\n\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Get Track Options Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void getPIN()
        {
            string ident = getIdentValue();


            string response =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Last 12 PAN.", "Enter PAN", "123412341234", -1, -1);


            if (response.Length != 12)
            {
                tbOutputAppendText("Correct PAN not specified\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_capturePINFromLast12(4, 8, 20, response);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Start getPAN Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Start getPAN Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }

        }

        private void getkeyOn()
        {
            string ident = getIdentValue();
            bool isOn = false;
            RETURN_CODE rt = IDT_Device.SharedController.pin_getKeypressCapture(ref isOn);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (isOn) tbOutputAppendText("Key Value Capture ON\r\n", ident);
                else tbOutputAppendText("Key Value Capture OFF\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Key Value Capture ERROR: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }

        }

        private void keyOn(bool isOn)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.pin_setKeypressCapture(isOn);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (isOn) tbOutputAppendText("Key Value Capture ON\r\n", ident);
                else tbOutputAppendText("Key Value Capture OFF\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Key Value Capture ERROR: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }

        }

        private void convertTags()
        {
            string ident = getIdentValue();


            string response =
                Microsoft.VisualBasic.Interaction.InputBox("Enter Old Format Tag List?", "Convert Tags", "", -1, -1);



            if (response.Length > 0)
            {
                tbOutputAppendText("Old Tags\r\n" + response + "\r\n", ident);



                byte[] newTags = Common.getByteArray(response);

                newTags = Common.updateTags_Old_To_New(newTags);

                tbOutputAppendText("New Tags\r\n" + Common.getHexStringFromBytes(newTags) + "\r\n", ident);
            }


        }

        private void sdk(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.checkSDKStatus(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("SDK Not Busy\r\n", ident);
            }
            else
            {
                tbOutputAppendText("SDK Busy: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }

        }

        private void notify(bool enable)
        {
            string ident = getIdentValue();


            string response =
                Microsoft.VisualBasic.Interaction.InputBox("Auto Capture MSR Data?", "Auto Capture", "YES", -1, -1);

            bool capture = (response.Equals("YES"));


            RETURN_CODE rt = IDT_Device.SharedController.device_cardNotification(enable, 2, capture);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (enable) tbOutputAppendText("Notifications Enabled\r\n", ident);
                else tbOutputAppendText("Notifications Disabled\r\n", ident);
            }
            else
            {
                if (enable)
                    tbOutputAppendText("Enable Notifications Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                else
                    tbOutputAppendText("Disable Notifications Error Code: " + "0x" +
                                        String.Format("{0:X}", (ushort)rt) + ": " +
                                        IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }


        }

        private void useSecureHead()
        {
            string ident = getIdentValue();

            RETURN_CODE rt = IDT_Device.SharedController.device_enableSecureHeadForMSII();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Enable Secure Head successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Enable Secure Head Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void lowPowerMode()
        {
            string ident = getIdentValue();

            string response = Microsoft.VisualBasic.Interaction.InputBox(
                "Stop Mode?  Enter YES for Stop Mode, or NO for Sleep Mode", "Low Power Mode", "YES", -1, -1);

            if (response.Length == 0)
            {
                tbOutputAppendText("No response specified.  \r\n", ident);

                return;
            }

            string response2 = Microsoft.VisualBasic.Interaction.InputBox(
                "Wake On Transaction?  Enter YES to wake from swipe/tap, or NO to ignore swipe/tap", "Wake Mode", "YES",
                -1, -1);

            if (response2.Length == 0)
            {
                tbOutputAppendText("No response specified.  \r\n", ident);

                return;
            }


            bool stopMode = false;
            if (response.ToUpper().Equals("YES")) stopMode = true;

            bool wakeMode = false;
            if (response2.ToUpper().Equals("YES")) wakeMode = true;

            RETURN_CODE rt = IDT_Device.SharedController.device_lowPowerMode(stopMode, wakeMode);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Low Power Mode Successful.\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Low Power Mode Successful");
            }
            else
            {
                tbOutputAppendText("Low Power Mode failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Low Power Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void cloneScreen()
        {
            string ident = getIdentValue();

            string screenName = Microsoft.VisualBasic.Interaction.InputBox("Please enter existing screen name to clone.", "Clone Screen", "0", -1, -1);

            if (screenName.Length == 0)
            {
                tbOutputAppendText("No Screen Name Specified.  \r\n", ident);

                return;
            }
            string cloneName = Microsoft.VisualBasic.Interaction.InputBox("Please enter name of clone screen.", "Clone Screen", "0", -1, -1);

            if (cloneName.Length == 0)
            {
                tbOutputAppendText("No Clone Name Specified.  \r\n", ident);

                return;
            }
            UInt16 cloneID = 0;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_cloneScreen(screenName, cloneName, ref cloneID, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clone Screen Successful.  Screen ID: " + cloneID.ToString() + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Create Screen Successful");
            }
            else
            {
                tbOutputAppendText("Clone Screen failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Create Screen failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void standby()
        {
            string ident = getIdentValue();



            RETURN_CODE rt = IDT_Device.SharedController.device_enterStandbyMode(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Standby Mode Successful.  \r\n", ident);
                System.Diagnostics.Debug.WriteLine("Standby Mode Successful");
            }
            else
            {
                tbOutputAppendText("Standby Mode failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Standby Mode failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void setWhiteList()
        {
            string ident = getIdentValue();

            string screenName =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter whitelist data.", "White List", "", -1, -1);

            if (screenName.Length == 0)
            {
                tbOutputAppendText("No Data Provided.  \r\n", ident);

                return;
            }

            string cloneName = screenName;
            RETURN_CODE rt = IDT_Device.SharedController.config_setWhiteList(Common.getByteArray(screenName), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set White List Successful.  \r\n", ident);
            }
            else
            {
                tbOutputAppendText("Set White List Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void getWhiteList()
        {
            string ident = getIdentValue();

            Dictionary<string, string> data = null;
            RETURN_CODE rt = IDT_Device.SharedController.config_getWhiteList(ref data, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("get White List Executed Successful.  \r\n", ident);
                if (data != null && data.Count > 0)
                {
                    foreach (KeyValuePair<string, string> entry in data)
                    {
                        tbOutputAppendText(entry.Key + "  :  " + entry.Value + "\r\n", ident);

                    }
                }



            }
            else
            {
                tbOutputAppendText("Get White List Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void addLED()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || alignmentT.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0 || ledt.Text.Length != 8)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }
            lcdItem returnItem = new lcdItem();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_addLED(screenIDT.Text, objectIDt.Text,
                Convert.ToByte(alignmentT.Text), Convert.ToUInt16(xt.Text), Convert.ToUInt16(yt.Text), ref returnItem,
                Common.getByteArray(ledt.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Create LED successful.  Assigned Screen: " + returnItem.screenID.ToString() +
                                    " / ID: " + returnItem.objectID.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Create  LED failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void addEthernet()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || alignmentT.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }
            lcdItem returnItem = new lcdItem();

            RETURN_CODE rt = IDT_Device.SharedController.lcd_addEthernet(screenIDT.Text, objectIDt.Text,
                Convert.ToByte(alignmentT.Text), Convert.ToUInt16(xt.Text), Convert.ToUInt16(yt.Text), ref returnItem,
                ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Add Ethernet successful.  Assigned Screen: " + returnItem.screenID.ToString() +
                                    " / ID: " + returnItem.objectID.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Add Ethernet  10-Key failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private string getIdentValue()
        {
            string str = IDT_Device.currentIdent();
            return str;
        }

        private void setEncryption()
        {
            string ident = getIdentValue();

            if (tbTA.Text.Length == 0)
            {
                tbOutputAppendText("No certificate entered.  \r\n", ident);

                return;
            }
            byte[] data = null;
            if (tbTA.Text.StartsWith("--"))
            {
                data = ASCIIEncoding.ASCII.GetBytes(tbTA.Text);
            }
            else
            {
                try
                {
                    data = Common.getByteArray(tbTA.Text);
                }
                catch
                {
                    tbOutputAppendText("Invalid .DER Hex Data Entered.  \r\n", ident);

                    return;
                }
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_setTransArmorEncryption(data);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set TransArmor Encryption Successful.\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set TransArmor Encryption Successful");
            }
            else
            {
                tbOutputAppendText("Set TransArmor Encryption failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set TransArmor Encryption failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void setTID()
        {
            string ident = getIdentValue();
            string tid = Microsoft.VisualBasic.Interaction.InputBox("Please enter TransArmor ID to set.",
                "Set TransArmor ID", "00000000", -1, -1);

            if (tid.Length != 8)
            {
                tbOutputAppendText("TID must be 8 digits.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_setTransArmorID(tid);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set TransArmor ID Successful.\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set TransArmor ID Successful");
            }
            else
            {
                tbOutputAppendText("Set TransArmor ID failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set TransArmor ID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void getTID()
        {
            string ident = getIdentValue();

            string tid = null;
            RETURN_CODE rt = IDT_Device.SharedController.device_getTransArmorID(ref tid);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get TransArmor ID Successful. ID: " + tid + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get TransArmor ID Successful");
            }
            else
            {
                tbOutputAppendText("Get TransArmor ID failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get TransArmor ID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void getActiveScreen()
        {
            string ident = getIdentValue();

            string screenName = "";
            RETURN_CODE rt = IDT_Device.SharedController.lcd_getActiveScreen(ref screenName, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Get Active Screen Successful.\r\n", ident);
                tbOutputAppendText("Screen Name: " + screenName + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Active Screen Successful");
            }
            else
            {
                tbOutputAppendText("Get Active Screen failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Active Screen failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void destroyScreen()
        {
            string ident = getIdentValue();

            string screen = Microsoft.VisualBasic.Interaction.InputBox("Please enter Screen name to Destroy.",
                "Destroy Screen", "0", -1, -1);

            if (screen.Length == 0)
            {
                tbOutputAppendText("No screen specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_destroyScreen(screen, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Destroy Screen Successful.\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Destroy Screen Successful");
            }
            else
            {
                tbOutputAppendText("Destroy Screen failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Destroy Screen failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void createScreen()
        {
            string ident = getIdentValue();

            //string theme = Microsoft.VisualBasic.Interaction.InputBox("Please enter theme ID for screen.", "Create Screen", "0", -1, -1);

            /**if (theme.Length == 0)
            {
                tbOutputAppendText("No theme specified.  \r\n", ident);

                return;
            }*/
            //string screenName = "";
            UInt16 screenID = 0;
            string screenName = Microsoft.VisualBasic.Interaction.InputBox("Please enter screen name for screen.",
                "Create Screen", "", -1, -1);
            if (screenName.Length == 0)
            {
                tbOutputAppendText("No screen name specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_createScreen(screenName, ref screenID, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Create Screen Successful.  Screen ID: " + screenID + "\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Create Screen Successful");
            }
            else
            {
                tbOutputAppendText("Create Screen failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Create Screen failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }



        }

        private void resetBLEPassword()
        {
            string ident = getIdentValue();
            string name = Microsoft.VisualBasic.Interaction.InputBox("Reset BLE Password to 123456?",
                "Please Confirm with YES", "YES", -1, -1);

            if (!name.Equals("YES"))
            {
                tbOutputAppendText("PW Reset Cancelled.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setBluetoothParameters(null, null, null);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("PW Reset Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("PW Reset Successful");
            }
            else
            {
                tbOutputAppendText("PW Reset failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set BLE Name Button failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void setBLEParameters()
        {
            string ident = getIdentValue();
            string name = Microsoft.VisualBasic.Interaction.InputBox("Please enter name for BLE to discover.",
                "Enter name", "", -1, -1);

            if (name.Length == 0)
            {
                tbOutputAppendText("No name specified.  \r\n", ident);

                return;
            }

            string oldPW = Microsoft.VisualBasic.Interaction.InputBox(
                "Please enter the current BLE password (6 digits).", "Enter Current Password", "", -1, -1);

            if (oldPW.Length != 6)
            {
                tbOutputAppendText("No 6 digit Password specified.  \r\n", ident);

                return;
            }

            string newPW = Microsoft.VisualBasic.Interaction.InputBox("Please enter the new BLE password (6 digits).",
                "Enter new Password", "", -1, -1);

            if (newPW.Length != 6)
            {
                tbOutputAppendText("No 6 digit Password specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.config_setBluetoothParameters(name, oldPW, newPW);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set BLE Name Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set BLE Name Successful");
            }
            else
            {
                tbOutputAppendText("Set BLE Name failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set BLE Name Button failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void setSwipeandDone()
        {
            string ident = getIdentValue();
            string value = Microsoft.VisualBasic.Interaction.InputBox(
                "Please set Swipe button value and Done button value (The value length are three bytes)",
                "Set Button Value", "000000", -1, -1);

            if (value.Length != 6)
            {
                tbOutputAppendText("No 6 digit Value specified.  \r\n", ident);

                return;
            }
            byte swipe = 0;
            byte done = 0;
            byte delay = 0;
            try
            {
                swipe = Convert.ToByte(value.Substring(0, 2));
                done = Convert.ToByte(value.Substring(2, 2));
                delay = Convert.ToByte(value.Substring(4, 2));
            }
            catch
            {
                tbOutputAppendText("Invalid Value specified.  \r\n", ident);

                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.config_setSwipeandDone(swipe, done, delay);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Swipe Switch and Done Switch Value Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Set Buttons' Value Successful");
            }
            else
            {
                tbOutputAppendText("Set Buttons' Value failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Buttons' Value failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void getSwipeandDone()
        {
            string ident = getIdentValue();
            byte swipeVal = 0;
            byte doneVal = 0;
            byte delay = 0;

            RETURN_CODE rt = IDT_Device.SharedController.config_getSwipeandDone(ref swipeVal, ref doneVal, ref delay);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (swipeVal == 0)
                {
                    tbOutputAppendText("the SWIPE switch is disabled\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("the SWIPE switch is enabled\r\n", ident);
                }

                if (doneVal == 0)
                {
                    tbOutputAppendText("the DONE switch is disabled\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("the DONE switch is enabled\r\n", ident);
                }

                tbOutputAppendText("The delay time is set to " + delay.ToString() + " seconds\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Get Buttons' Value Successful");
            }
            else
            {
                tbOutputAppendText("Get Buttons' Value failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get Buttons' Value failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void updateTextPosition()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || alignmentT.Text.Length == 0 ||
                newxt.Text.Length == 0 || newyt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);
                if (newxt.Text.Length > 0) Convert.ToByte(newxt.Text);
                if (newyt.Text.Length > 0) Convert.ToByte(newyt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_updatePosition(screenIDT.Text, objectIDt.Text,
                Convert.ToByte(alignmentT.Text), Convert.ToUInt16(newxt.Text), Convert.ToUInt16(newyt.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Update Position Successful.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Update Position Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void updateTextColor()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || colort.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_updateColor(screenIDT.Text, objectIDt.Text,
                Common.getByteArray(colort.Text), ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Update Color Successful.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Update Color Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void updateTextLabel()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || labelt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }

            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_updateLabel(screenIDT.Text, objectIDt.Text, labelt.Text, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Update Label successful.\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Update Label failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void addButton()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || alignmentT.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }

            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }

            lcdItem returnItem = new lcdItem();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_addButton(screenIDT.Text, objectIDt.Text,
                Convert.ToByte(buttonCB.SelectedIndex + 1), Convert.ToByte(alignmentT.Text), Convert.ToUInt16(xt.Text),
                Convert.ToUInt16(yt.Text), labelt.Text, ref returnItem, ButtonCallback, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Create button successful.  Assigned Screen: " + returnItem.screenID.ToString() +
                                    " / ID: " + returnItem.objectID.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Create  Button failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void addText()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || alignmentT.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0 || widtht.Text.Length == 0 || heightt.Text.Length == 0 ||
                fontidt.Text.Length == 0 || colort.Text.Length == 0 || labelt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }
            lcdItem returnItem = new lcdItem();

            RETURN_CODE rt = IDT_Device.SharedController.lcd_addText(screenIDT.Text, objectIDt.Text,
                Convert.ToByte(alignmentT.Text), Convert.ToUInt16(xt.Text), Convert.ToUInt16(yt.Text),
                Convert.ToUInt16(widtht.Text), Convert.ToUInt16(heightt.Text), Convert.ToByte(fontidt.Text),
                Common.getByteArray(colort.Text), labelt.Text, ref returnItem, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Create text successful.  Assigned Screen: " + returnItem.screenID.ToString() +
                                    " / ID: " + returnItem.objectID.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Create Text failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void addImage()
        {
            string ident = getIdentValue();
            if (screenIDT.Text.Length == 0 || objectIDt.Text.Length == 0 || alignmentT.Text.Length == 0 ||
                xt.Text.Length == 0 || yt.Text.Length == 0 || labelt.Text.Length == 0)
            {
                tbOutputAppendText("Parameters not valid.\r\n", ident);
                return;
            }
            try
            {
                if (alignmentT.Text.Length > 0) Convert.ToByte(alignmentT.Text);
                if (xt.Text.Length > 0) Convert.ToUInt16(xt.Text);
                if (yt.Text.Length > 0) Convert.ToUInt16(yt.Text);
                if (widtht.Text.Length > 0) Convert.ToUInt16(widtht.Text);
                if (heightt.Text.Length > 0) Convert.ToUInt16(heightt.Text);
                if (fontidt.Text.Length > 0) Convert.ToByte(fontidt.Text);

            }
            catch
            {
                tbOutputAppendText("Invalid Arguments.\r\n", ident);
                return;
            }
            lcdItem returnItem = new lcdItem();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_addImage(screenIDT.Text, objectIDt.Text,
                Convert.ToByte(alignmentT.Text), Convert.ToUInt16(xt.Text), Convert.ToUInt16(yt.Text), labelt.Text,
                ref returnItem, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Create Image successful.  Assigned Screen: " + returnItem.screenID.ToString() +
                                    " / ID: " + returnItem.objectID.ToString() + "\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Create Image failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }


        }

        private void getButtonEvent()
        {
            UInt16 ID = 0;
            UInt16 screenID = 0;
            string screenName = "";
            string objectName = "";
            string ident = getIdentValue();
            bool isLongPress = false;
            RETURN_CODE rt = IDT_Device.SharedController.lcd_getButtonEvent(ref screenID, ref ID, ref screenName,
                ref objectName, ref isLongPress, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (screenName == "")
                {
                    tbOutputAppendText("No Button Clicked" + "\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Last Clicked Screen ID: " + screenID.ToString() + "\r\n", ident);
                    tbOutputAppendText("Last Clicked Button ID: " + ID.ToString() + "\r\n", ident);
                    tbOutputAppendText("Last Clicked Screen Name: " + screenName + "\r\n", ident);
                    tbOutputAppendText("Last Clicked Button Name: " + objectName + "\r\n", ident);
                    if (isLongPress) tbOutputAppendText("Button Pressed, is LongPress: TRUE\n", ident);
                    else tbOutputAppendText("Button Pressed, is LongPress: FALSE\n", ident);
                }
            }
            else
            {
                tbOutputAppendText("Last Clicked Button failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
            }

        }

        private void btnSaveTermCTLS2_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            byte[] rejectedTLV = null;
            byte[] convertedTLV = null;
            byte[] term = Common.getByteArray(tbTerm.Text);
            RETURN_CODE rt = IDT_Device.SharedController.ctls_trySetTerminalData(term, ref rejectedTLV, ref convertedTLV, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {

                tbOutputAppendText("Set Terminal Successful:" + "  \r\n", ident);
                if (rejectedTLV != null && rejectedTLV.Length > 0)
                {
                    tbOutputAppendText("The following TLV were rejected by firmware: " + Common.getHexStringFromBytes(rejectedTLV) + "  \r\n", ident);
                }
                if (convertedTLV != null && convertedTLV.Length > 0)
                {
                    tbOutputAppendText("The following TLV are the updated values from a previous format: " + Common.getHexStringFromBytes(convertedTLV) + "  \r\n", ident);
                }

                System.Diagnostics.Debug.WriteLine("Save Terminal Successful");

            }
            else
            {
                tbOutputAppendText("Save Terminal failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Save Terminal failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void showScreen()
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter screen name to display.",
                "Display Screen", "", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No screen specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_showScreen(input, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Show Screen Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Show Screen Successful");
            }
            else
            {
                tbOutputAppendText("Show Screen failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Show Screen failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void storeScreenInfo()
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_storeScreenInfo(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Store Screen Info Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Store Screen Info Successful");
            }
            else
            {
                tbOutputAppendText("Store Screen Info failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Store Screen Info failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void loadScreenInfo()
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_loadScreenInfo(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Load Screen Info Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Load Screen Info Successful");
            }
            else
            {
                tbOutputAppendText("Load Screen Info failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Load Screen Info failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }
        }

        private void clearScreenInfo()
        {
            string ident = getIdentValue();
            RETURN_CODE rt = IDT_Device.SharedController.lcd_clearScreenInfo(ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Clear Screen Info Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Clear Screen Info Successful");
            }
            else
            {
                tbOutputAppendText("Clear Screen Info failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Clear Screen Info failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void removeObject()
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter screen name", "Remove Object", "0", -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No Screen Name Specified.  \r\n", ident);

                return;
            }

            string input2 =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter object name", "Remove Object", "0", -1, -1);

            if (input2.Length == 0)
            {
                tbOutputAppendText("No Object Name Specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.lcd_removeItem(input, input2, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Remove Item Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Remove Text Successful");
            }
            else
            {
                tbOutputAppendText("Remove Item failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Remove Text failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void getAllScreens()
        {
            string ident = getIdentValue();
            byte screenNumbers = 0;
            Dictionary<ushort, string> returnScreens = new Dictionary<ushort, string>();

            RETURN_CODE rt = IDT_Device.SharedController.lcd_getAllScreens(ref screenNumbers, ref returnScreens, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Number of Screens: " + screenNumbers.ToString() + "\r\n", ident);
                if (screenNumbers != 0)
                {
                    foreach (KeyValuePair<ushort, string> entry in returnScreens)
                    {
                        tbOutputAppendText("Screen ID: " + entry.Key.ToString() + "  Screen Name: " + entry.Value +
                                            "\r\n", ident);

                    }

                    System.Diagnostics.Debug.WriteLine("Get All Screens Successful");
                }
                else
                {
                    tbOutputAppendText("No Screen to List\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Detect No Screen exist");
                }

            }
            else
            {
                tbOutputAppendText("Get All Screens failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get All Screens failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void getAllObjects()
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter screen name to get all its objects.",
                    "Get Objects", "", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No Screen Name Specified.  \r\n", ident);

                return;
            }

            Dictionary<ushort, string> returnObjects = new Dictionary<ushort, string>();
            byte objectNumbers = 0;

            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_getAllObjects(input, ref objectNumbers, ref returnObjects, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (objectNumbers != 0)
                {
                    tbOutputAppendText("Number of objects exist on Screen " + input + ": " + objectNumbers.ToString() +
                                        "\r\n", ident);

                    foreach (KeyValuePair<ushort, string> entry in returnObjects)
                    {
                        tbOutputAppendText("Object ID: " + entry.Key.ToString() + "  Object Name: " + entry.Value +
                                            "\r\n", ident);

                    }

                    System.Diagnostics.Debug.WriteLine("Get All Objects Successful");
                }
                else
                {
                    tbOutputAppendText("No object exist on " + input + "\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("Detect No Object Exist");
                }

            }
            else
            {
                tbOutputAppendText("Get All Objects Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Get All Objects Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void queryScreenbyName()
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter screen name", "Query Screens by Name", "", -1,
                    -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No Screen Name Specified.  \r\n", ident);

                return;
            }

            byte result = 0;

            RETURN_CODE rt = IDT_Device.SharedController.lcd_queryScreenbyName(input, ref result, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (result == 1)
                {
                    tbOutputAppendText("Screen " + input + " exists\r\n", ident);
                }
                else
                {
                    tbOutputAppendText(input + " does not exist\r\n", ident);
                }

                System.Diagnostics.Debug.WriteLine("Query Screen by Name Successful");
            }
            else
            {
                tbOutputAppendText("Query Screen by Name Successful failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Query Screen by Name Successful failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }


        }

        private void queryObjectbyName()
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter object name", "Query Object by Name", "", -1,
                    -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No Object Name Specified.  \r\n", ident);

                return;
            }

            byte objectNumbers = 0;
            List<string> returnItems = new List<string>();

            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_queryObjectbyName(input, ref objectNumbers, ref returnItems, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (objectNumbers != 0)
                {
                    tbOutputAppendText(
                        "Number of Object " + input + " existing: " + objectNumbers.ToString() + " \r\n", ident);
                    foreach (string str in returnItems)
                    {
                        tbOutputAppendText("Screen " + str + "\r\n", ident);

                    }

                    System.Diagnostics.Debug.WriteLine("Query Objects by Object Name Successful");
                }
                else
                {
                    tbOutputAppendText("Object " + input + " does not exist\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("The Object Queried by Object Name Dose Not Exist");
                }

            }
            else
            {
                tbOutputAppendText("Query Object by Name failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Query Object by Name failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void queryScreenbyID()
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter screen ID", "Query Screens by ID", "", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No Screen ID Specified.  \r\n", ident);

                return;
            }

            byte result = 0;
            string screenName = "";
            UInt16 val = 0;
            try
            {
                val = Convert.ToUInt16(input);
            }
            catch
            {
                tbOutputAppendText("No Valid Screen ID Specified.  \r\n", ident);

                return;
            }
            RETURN_CODE rt =
                IDT_Device.SharedController.lcd_queryScreenbyID(val, ref result, ref screenName,
                    ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (result == 1)
                {
                    tbOutputAppendText("Screen ID: " + input + "  Screen Name: " + screenName + " exists\r\n", ident);
                }
                else
                {
                    tbOutputAppendText("Screen ID: " + input + " does not exist\r\n", ident);
                }

                System.Diagnostics.Debug.WriteLine("Query Screen by ID Successful");
            }
            else
            {
                tbOutputAppendText("Query Screen by ID failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Query Screen by ID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void queryObjectbyID()
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("Please enter object ID", "Query Object by ID", "", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No Object ID Specified.  \r\n", ident);

                return;
            }

            byte objectNumbers = 0;
            List<string> returnItems = new List<string>();
            UInt16 val = 0;
            try
            {
                val = Convert.ToUInt16(input);
            }
            catch
            {
                tbOutputAppendText("No Valid Object ID Specified.  \r\n", ident);

                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.lcd_queryObjectbyID(val, ref objectNumbers,
                ref returnItems, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                if (objectNumbers != 0)
                {
                    tbOutputAppendText("Number of Object ID " + input + " existing: " + objectNumbers.ToString() +
                                        " \r\n", ident);
                    tbOutputAppendText("Screens containing Object ID " + input + ":\r\n", ident);
                    foreach (string str in returnItems)
                    {
                        tbOutputAppendText("Screen " + str + "\r\n", ident);
                    }

                    System.Diagnostics.Debug.WriteLine("Query Object by Object ID Successful");
                }
                else
                {
                    tbOutputAppendText("Object ID: " + input + " does not exist\r\n", ident);
                    System.Diagnostics.Debug.WriteLine("The Object Queried by Object ID Dose Not Exist");
                }

            }
            else
            {
                tbOutputAppendText("Query Object by ID failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Query Object by ID failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private void setBacklight()
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("Please enter backlight percentage (range 0-100)", "Set Backlight", "", -1, -1);
            if (input.Length == 0)
            {
                tbOutputAppendText("No Value Specified.  \r\n", ident);

                return;
            }
            byte num = 0;
            try
            {
                num = Convert.ToByte(input);
            }
            catch
            {
                tbOutputAppendText("Invalid value specified.  \r\n", ident);

                return;
            }
            if (num < 0 || num > 100)
            {
                tbOutputAppendText("Invalid value specified. Must be a value between 0 and 100  \r\n", ident);

                return;
            }
            RETURN_CODE rt = IDT_Device.SharedController.lcd_setBacklight(num, ident);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Set Backlight Successful\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Query Screen by Name Successful");
            }
            else
            {
                tbOutputAppendText("Set Backlight Failed Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) +
                                    ": " + IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Set Backlight Failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
            }

        }

        private string command = "";

        private void tvCommands_AfterSelect(object sender, TreeViewEventArgs e)
        {
            string group = "ffe4";
            string partial = "ffe1";
            string appFlow = "ffe2";
            string selectfeature = "ffe3";
            string maxAidLen = "ffe5";

            tbAid.Visible = true;
            aidLabel.Visible = true;
            tbAidData.Visible = true;
            aidDataLabel.Visible = true;
            command = e.Node.Text;

            if (command.StartsWith("Retrieve AID") || command.StartsWith("Remove AID"))
            {
                tbAidData.Visible = false;
                aidDataLabel.Visible = false;
            }
            if (isVP8800())
            {
                group = "dfee2d";
                partial = "dfee4b";
                appFlow = "dfee4c";
                selectfeature = "dfee4d";
                maxAidLen = "dfee2e";

            }
            else
            {
                tbAid.Enabled = true;
                tbAid.Text = "a0000000031010";
                tbAidData.Text =
                    "9f01065649534130305f5701005f2a0208409f090200965f3601029f1b0400003a98df25039f3704df28039f0802dfee150101df13050000000000df14050000000000df15050000000000df180100df170400002710df190100";

            }

            comboBoxTermConfig.Enabled = true;
            comboBoxTermConfig_SelectedIndexChanged(null, null);
            if ((connectedDevicesList.SelectedItem != null && connectedDevicesList.SelectedItem.Equals("Kiosk III/IV")))
            {

                tbAid.Text = "";
                tbAid.Enabled = true;
                tbAidData.Text = group + "01029f0607a0000000051010" + partial + "0101" + maxAidLen + "0110" +
                                 selectfeature + "0114" + appFlow + "0106";
                comboBoxTermConfig.Enabled = false;
                tbTerm.Text =
                    group +
                    "0100df7c0100df7d0100df7503003000df6a01019f5801039f5903dc80009f5a01009f5e02e0009f5f060000000080009f5d06000000005000df2a06000000005000df2b0132df2c010adf630100df640100df650100df660100fff003020000fff30207fffff90103fffa020000df5101809f0106000000000000df680100df7f0100df2601019c01005f2a0208405f3601029f090200029f1a0208409f1b04000017709f33030008e89f3501229f400560000030009f660480004000fff106000000010000fff403000601fff506000000008000fff80100fffb0100fffc0101fffd05f850acf800fffe05f850aca000ffff0500000000009f15020000df28030008e8df29030068e89f6d0200019f7c140000000000000000000000000000000000000000fff20830303030303030309f4e1e0000000000000000000000000000000000000000000000000000000000009f5301009f03060000000000009f02060000000000019f1c0800000000000000009f160f000000000000000000000000000000ffee1d0404042a0cffee1e01019f410400000000df891b0101fff701009a031608129f21030339139700";
            }
            if ((connectedDevicesList.SelectedItem != null && connectedDevicesList.SelectedItem.Equals("PIP")))
            {


                if (command.StartsWith("Save AID"))
                {
                    tbAidData.Text = "ffe4018e9f0609a000000476d0000111dfee4b0100dfee2e0110dfee530104";
                    tbAid.Visible = false;
                    aidLabel.Visible = false;
                }

                if (command.StartsWith("Save Configuration Group"))
                    tbAidData.Text = "ffe4018edfee3c00dfee3d00dfef2500dfed0100dfed02050000000001dfed030101dfed040101dfed050101dfed060100dfed070100dfed27010ddfef770100dfee3b0400bc614e";
                comboBoxTermConfig.Enabled = false;
                tbTerm.Text =

                    "9f33036028c89f3501219f4005f000f0a001df110100df260101df270100dfee1e08d0dc20d0c41e16005f3601029f1a0208409f1e085465726d696e616c9f150212349f160f3030303030303030303030303030309f1c0838373635343332319f4e2231303732312057616c6b65722053742e20437970726573732c204341202c5553412edfee150101dfee160100dfee170105dfee180180dfee1f0180dfee1b083030303135313030dfee2203323c3cdf1008656e667265737a68";
            }

            clearPanels();

            if (command.Equals("Add Button"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                labell.Visible = true;
                labelt.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
                buttonCB.Visible = true;
            }

            if (command.Equals("Add Ethernet"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }

            if (command.Equals("Add LED"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                ledl.Visible = true;
                ledt.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }

            if (command.Equals("Add Text"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                labell.Visible = true;
                labelt.Visible = true;
                widthl.Visible = true;
                widtht.Visible = true;
                heightl.Visible = true;
                heightt.Visible = true;
                fontidl.Visible = true;
                fontidt.Visible = true;
                colorl.Visible = true;
                colort.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }


            if (command.Equals("Display Text"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                labell.Visible = true;
                labelt.Visible = true;
                fontidl.Visible = true;
                fontidt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }

            if (command.Equals("Display Button"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                labell.Visible = true;
                labelt.Visible = true;
                widthl.Visible = true;
                widtht.Visible = true;
                heightl.Visible = true;
                heightt.Visible = true;
                fontidl.Visible = true;
                fontidt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }


            if (command.Equals("Add Image"))
            {
                panelNeoLCD.Visible = true;
                xl.Visible = true;
                xt.Visible = true;
                yl.Visible = true;
                yt.Visible = true;
                labell.Visible = true;
                labelt.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }

            if (command.Equals("Update Label"))
            {
                panelNeoLCD.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;

                labell.Visible = true;
                labelt.Visible = true;
                alignmentL.Visible = false;
                alignmentT.Visible = false;
            }

            if (command.Equals("Update Color"))
            {
                panelNeoLCD.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                colorl.Visible = true;
                colort.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                alignmentL.Visible = false;
                alignmentT.Visible = false;
            }

            if (command.Equals("Update Position"))
            {
                panelNeoLCD.Visible = true;
                objectIDl.Visible = true;
                objectIDt.Visible = true;
                newxl.Visible = true;
                newxt.Visible = true;
                newyl.Visible = true;
                newyt.Visible = true;
                screenIDT.Visible = true;
                screenIDl.Visible = true;
                alignmentL.Visible = true;
                alignmentT.Visible = true;
            }

            if (command.Equals("ViVOconfig")) VivoConfigPanel.Visible = true;
            if (command.Equals("Set White List")) panelWhiteList.Visible = true;
            {
                mactb.Text = "";
            }
            if (command.Equals("Set White List From BDK"))
            {
                mactb.Text = "0123456789abcdeffedcba9876543210";
                panelWhiteList.Visible = true;
            }
            if (command.Equals("Retrieve Tags")) panelRetrieveTags.Visible = true;
            if (command.Equals("Send NEO Command")) neoPanel.Visible = true;
            if (command.Equals("Send Data Command")) ngaPanel.Visible = true;
            if (command.Equals("Interface Control")) panelInterfaceControl.Visible = true;
            if (command.Equals("Set Configuration")) panelInterfaceControl.Visible = true;
            if (command.Equals("Set PAN Clear Digits")) panelPANDigits.Visible = true;
            if (command.Equals("Set Swipe Force Enc.")) panelSwipeForce.Visible = true;
            if (command.Equals("Set Swipe Mask")) panelSwipeMask.Visible = true;
            if (command.Equals("Set MSR Setting") || command.Equals("Set ICC Setting"))
            {
                panelMSRMulti.Visible = true;
                valLab.Visible = true;
                textBoxMSRSetting.Visible = true;
            }

            if (command.Equals("Get MSR Setting") || command.Equals("Get ICC Setting"))
            {
                panelMSRMulti.Visible = true;
                valLab.Visible = false;
                textBoxMSRSetting.Visible = false;
            }

            configlabel.Visible = true;
            comboBoxTermConfig.Visible = true;
            if (command.Equals("Save Terminal Data ") || command.Equals("Try Save Terminal Data "))
            {
                configlabel.Visible = false;
                comboBoxTermConfig.Visible = false;
                btnSaveTermCTLS_Click(null, null);
            }


            if (command.Equals("Capture PIN Extended")) panelPin.Visible = true;

            if (command.Equals("Set TransArmor Encryption")) panelTA.Visible = true;
            if (command.Equals("Enter Buffer Mode")) panelEnterBufferMode.Visible = true;
            if (command.Equals("Set Enc. Control")) panelEncControl.Visible = true;
            if (command.Equals("Get Enc. Control")) panelEncControl.Visible = true;
            if (command.Equals("Send APDU")) panelAPDU.Visible = true;
            if (command.Equals("Send Encrypted APDU")) panelAPDU.Visible = true;
            if (command.Equals("Enable ICC")) panelEnableICC.Visible = true;
            if (command.Equals("Start EMV Trans")) panelTrans.Visible = true;
            if (command.Equals("Start Trans")) panelTrans.Visible = true;
            if (command.Equals("Authenticate EMV Trans")) panelTrans.Visible = true;
            if (command.Equals("Complete EMV Trans")) panelTrans.Visible = true;
            if (command.Equals("Cancel EMV Trans")) panelTrans.Visible = true;
            if (command.Equals("Cancel Trans")) panelTrans.Visible = true;
            if (command.Equals("Start CTLS Trans")) panelCTLS.Visible = true;
            if (command.Equals("Cancel CTLS Trans")) panelCTLS.Visible = true;
            if (command.StartsWith("Retrieve AID")) panelAID.Visible = true;

            if (command.StartsWith("FeliCa "))
            {
                f_numBlocks.Visible = false;
                f_numBlocks_tb.Visible = false;
                f_command.Visible = false;
                f_command_tb.Visible = false;
                f_block.Visible = false;
                f_block_tb.Visible = false;
                f_blockCount.Visible = false;
                f_blockCount_tb.Visible = false;
                f_blockList.Visible = false;
                f_blockList_tb.Visible = false;
                f_blockNumber.Visible = false;
                f_blockNumber_tb.Visible = false;
                f_command.Visible = false;
                f_command_tb.Visible = false;
                panelFelica.Visible = true;

                if (command.Equals("FeliCa Authentication"))
                {
                    f_command_tb.Text = "Key";

                    f_command.Visible = true;
                    f_command_tb.Visible = true;
                }
                if (command.Equals("FeliCa Send Command"))
                {
                    f_command_tb.Text = "Command";

                    f_command.Visible = true;
                    f_command_tb.Visible = true;
                }
                if (command.Equals("FeliCa Request Service"))
                {
                    f_command_tb.Text = "Node Code";

                    f_command.Visible = true;
                    f_command_tb.Visible = true;
                }
                if (command.Equals("FeliCa Read"))
                {
                    f_command_tb.Text = "Service Code";
                    f_command.Visible = true;
                    f_command_tb.Visible = true;
                    f_numBlocks.Visible = true;
                    f_numBlocks_tb.Visible = true;
                    f_blockList.Visible = true;
                    f_blockList_tb.Visible = true;
                }
                if (command.Equals("FeliCa Read w/Mac"))
                {

                    f_numBlocks.Visible = true;
                    f_numBlocks_tb.Visible = true;
                    f_blockList.Visible = true;
                    f_blockList_tb.Visible = true;
                }
                if (command.Equals("FeliCa Write"))
                {
                    f_command_tb.Text = "Service Code";
                    f_command.Visible = true;
                    f_command_tb.Visible = true;
                    f_blockList.Visible = true;
                    f_blockList_tb.Visible = true;
                    f_blockCount.Visible = true;
                    f_blockCount_tb.Visible = true;
                    f_block.Visible = true;
                    f_block_tb.Visible = true;

                }
                if (command.Equals("FeliCa Write w/Mac"))
                {
                    f_blockNumber.Visible = true;
                    f_blockNumber_tb.Visible = true;
                    f_block.Visible = true;
                    f_block_tb.Visible = true;

                }
            }

            if (command.StartsWith("Remove AID")) panelAID.Visible = true;


            if (command.Equals("Save AID ")) panelAID.Visible = true;
            if (command.Equals("Save Configuration Group"))
            {
                panelAID.Visible = true;
                tbAid.Visible = false;
                aidLabel.Visible = false;


            }

            if (command.Equals("Save AID")) panelAID.Visible = true;

            if (command.Equals("Activate Transaction")) panelActivate.Visible = true;
            if (command.Equals("Remove All AID")) panelAID.Visible = true;
            if (command.Equals("Load Default AID")) panelAID.Visible = true;
            if (command.Equals("Load Default AID ")) panelAID.Visible = true;
            if (command.EndsWith("Save Terminal Data")) panelTerm.Visible = true;
            if (command.Equals("Add Terminal Data")) panelTerm.Visible = true;
            if (command.Equals("Set Major Term Config")) panelTerm.Visible = true;
            if (command.Equals("Save Terminal Data ")) panelTerm.Visible = true;
            if (command.Equals("Try Save Terminal Data ")) panelTerm.Visible = true;
            if (command.Equals("Save Terminal Data  ")) panelTerm.Visible = true;
            if (command.Equals("Retrieve CAPK")) panelCAPK.Visible = true;
            if (command.Equals("Retrieve CAPK ")) panelCAPK.Visible = true;
            if (command.Equals("Remove CAPK")) panelCAPK.Visible = true;
            if (command.Equals("Remove CAPK ")) panelCAPK.Visible = true;
            if (command.Equals("List CAPK")) panelCAPK.Visible = true;
            if (command.Equals("List CAPK ")) panelCAPK.Visible = true;
            if (command.Equals("Save CAPK")) panelCAPK.Visible = true;
            if (command.Equals("Save CAPK ")) panelCAPK.Visible = true;
            if (command.Equals("Remove All CAPK")) panelCAPK.Visible = true;
            if (command.Equals("Remove All CAPK ")) panelCAPK.Visible = true;
            if (command.Equals("Load Default CAPK")) panelCAPK.Visible = true;
            if (command.Equals("Load Default CAPK ")) panelCAPK.Visible = true;
            if (command.Equals("Save CRL")) panelCRL.Visible = true;
            if (command.Equals("Remove CRL")) panelCRL.Visible = true;
            if (command.Equals("Start Swipe Transaction")) panelCRL.Visible = true;
            if (command.Equals("Start Keyed Transaction")) panelKeyed.Visible = true;
            if (command.Equals("Set MSR Terminal Data")) panelCRL.Visible = true;
            if (command.Equals("Save Exception")) panelCRL.Visible = true;
            if (command.Equals("Remove Exception")) panelCRL.Visible = true;
            if (command.Equals("Set BDK")) panelBDK.Visible = true;
            //if (command.Equals("Set UID")) panelUID.Visible = true;
            if (command.Equals("Send Command")) panelMacData.Visible = true;
            if (command.Equals("Set Sleep Mode")) panelSleepMode.Visible = true;
            //if (command.Equals("Prompt Key Entry")) panelPINEntry.Visible = true;
            //if (command.Equals("Prompt Amt Entry")) panelPINEntry.Visible = true;
            if (command.Equals("Send Beep") && !isVP8800()) panelBeep.Visible = true;
            if (command.Equals("Clear Line #")) panelLCD.Visible = true;
            if (command.Equals("Save Prompt")) panelLCD.Visible = true;
            if (command.Equals("Display Prompt")) panelLCD.Visible = true;
            if (command.Equals("Display Message")) panelLCD.Visible = true;
            if (command.Equals("Set Baud")) panelBaud.Visible = true;
            if (command.Equals("Set Network")) panelEthernet.Visible = true;
            if (command.Equals("Send PAE Command")) paePanel.Visible = true;





        }

        private void UniversalSDKDemo_HelpRequested(object sender, HelpEventArgs hlpevent)
        {

        }

        private void button4_Click(object sender, EventArgs e)
        {
            CAPKForm form = new CAPKForm(ref tbCAPKData);
            form.ShowDialog();
        }

        private int currentPiscesMenu = 0; //tells internal demo which menu to return to after displaying results on results/paragraph screen

        //0 = Main Menu piscesMainMenu()
        //1 = Main Menu piscesDevuceMenu()
        //
        private void piscesMainMenu()
        {
            currentPiscesMenu = 0;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                IDT_Device.SharedController.lcd_resetInitialState();
                return;
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display VP8800 Demo text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("300031350000003100390030005650383830302044656d6f00"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Exit Demo + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20457869742044656d6f00312e310000000001"), ref response);

            // Device Functions
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204465766963652046756e6374696f6e7300312e320000000000"),
                ref response);

            // CTLS Functions
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e2043544c532046756e6374696f6e7300312e330000000000"),
                ref response);

            // MSR Functions
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204d53522046756e6374696f6e7300312e340000000000"),
                ref response);

            // EMV Functions
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20454d562046756e6374696f6e7300312e350000000000"),
                ref response);

            // LCD Functions
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204C43442046756e6374696f6e7300312e360000000000"),
                ref response);

            // PIN Functions
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e2050494E2046756e6374696f6e7300312e370000000000"),
                ref response);

            // Get SDK Version
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204765742053444b2056657273696f6e00312e380000000000"),
                ref response);

            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);
            bool stayInLoop = true;
            while (stayInLoop)
            {
                byte[] keypress = null;
                RETURN_CODE rt2 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                        ref keypress);

                if (keypress == null)
                {
                    Thread.Sleep(1000); //nothing detected
                }
                else if (keypress.Length == 11)
                {
                    //possible keypad input
                    if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                    {
                        //enter was pressed, so process selection and exit loop
                        stayInLoop = false;
                    }
                    else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                    {
                        //back/clear  was pressed, since no previous menu,  treat as exit
                        //exit app
                        //exit custom display mode
                        rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                        //reset device to initial state
                        IDT_Device.SharedController.lcd_resetInitialState();
                        return;
                    }
                    else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                    {
                        //cancel  was pressed,  exit app
                        //exit app
                        //exit custom display mode
                        rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                        //reset device to initial state
                        IDT_Device.SharedController.lcd_resetInitialState();
                        return;
                    }
                }
                else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                {
                    if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                        keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                    {
                        //button pressed, so process selection and exit loop
                        stayInLoop = false;
                    }
                }


            }

            byte[] selectedListItem = null;
            RETURN_CODE rt3 =
                IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
            if (selectedListItem != null)
            {
                int lineNum = 0;
                //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                if (selectedListItem.Length == 4)
                    lineNum = (selectedListItem[2] - 0x30);
                if (selectedListItem.Length == 5)
                    lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                switch (lineNum)
                {
                    case 1: //Exit Demo
                    rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                    IDT_Device.SharedController.lcd_resetInitialState();
                    break;
                    case 2: // Device Functions
                    piscesDeviceMenu();
                    break;
                    case 3: // CTLS Functions
                    piscesCTLSMenu();
                    break;
                    case 4: // MSR Functions
                    piscesMSRMenu();
                    break;
                    case 5: // ICC Functions
                    piscesEMVMenu();
                    break;
                    case 6: // LCD Functions
                    piscesLCDMenu();
                    break;
                    case 7: // PIN Functions
                    piscesPINMenu();
                    break;
                    case 8: //getSDKVersion
                    string ver = IDT_Device.SDK_Version();
                    showPiscesResults("SDK Version: " + ver);
                    break;
                }


            }


        }

        void displayPreviousMenu()
        {
            switch (currentPiscesMenu)
            {
                case 0:
                piscesMainMenu();
                break;
                case 1:
                piscesDeviceMenu();
                break;
                case 2:
                piscesCTLSMenu();
                break;
                case 3:
                piscesMSRMenu();
                break;
                case 4:
                piscesEMVMenu();
                break;
                case 5:
                piscesLCDMenu();
                break;
                case 6:
                piscesPINMenu();
                break;

            }
        }

        private void piscesMSRMenu()
        {
            currentPiscesMenu = 3;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                piscesDeviceMenu();
                //tbOutputAppendText("Could not put device into custom display mode  \r\n", ident);
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display MSR Menu text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("300031350000003100390030004d5352204d656e7500"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Back To Main Menu + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204261636b20546f204d61696e204d656e7500342e310000000001"),
                ref response);

            // Start MSR Transaction
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(
                    itemListIDStr + "3e3e205374617274204d5352205472616e73616374696f6e00342e320000000000"),
                ref response);



            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            bool stayInMenu = true;
            while (stayInMenu)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);



                bool stayInLoop = true;
                while (stayInLoop)
                {
                    byte[] keypress = null;
                    RETURN_CODE rt2 =
                        IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                            ref keypress);

                    if (keypress == null)
                    {
                        Thread.Sleep(1000); //nothing detected
                    }
                    else if (keypress.Length == 11)
                    {
                        //possible keypad input
                        if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                        {
                            //enter was pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                        {
                            //back/clear  was pressed, go to previous menu
                            piscesMainMenu();
                            return;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                        {
                            //cancel  was pressed,  exit app
                            //exit app
                            //exit custom display mode
                            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                            //reset device to initial state
                            IDT_Device.SharedController.lcd_resetInitialState();
                            return;
                        }
                    }
                    else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                    {
                        if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                            keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                        {
                            //button pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                    }


                }

                byte[] selectedListItem = null;
                RETURN_CODE rt3 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
                if (selectedListItem != null)
                {
                    int lineNum = 0;
                    //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                    if (selectedListItem.Length == 4)
                        lineNum = (selectedListItem[2] - 0x30);
                    if (selectedListItem.Length == 5)
                        lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                    switch (lineNum)
                    {
                        case 1: //Back to Main Manu
                        stayInMenu = false;
                        piscesMainMenu();
                        break;
                        case 2: // Start MSR Transaction
                        stayInMenu = false;
                        showPiscesResults("TODO MSR->Start MSR Transaction");
                        break;

                    }


                }

            }





        }

        private void piscesCTLSMenu()
        {
            currentPiscesMenu = 2;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                piscesDeviceMenu();
                //tbOutputAppendText("Could not put device into custom display mode  \r\n", ident);
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display CTLS Menu text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("3000313500000031003900300043544c53204d656e7500"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Back To Main Menu + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204261636b20546f204d61696e204d656e7500332e310000000001"),
                ref response);

            // Start CTLS Transaction
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr +
                                    "3e3e2053746172742043544c53205472616e73616374696f6e00332e320000000000"),
                ref response);
            // List AIDs
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c697374204149447300332e330000000000"), ref response);
            // List Terminal Data
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c697374205465726d696e616c204461746100332e340000000000"),
                ref response);
            // List CAPK
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c697374204341504b00332e350000000000"), ref response);



            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            bool stayInMenu = true;
            while (stayInMenu)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);



                bool stayInLoop = true;
                while (stayInLoop)
                {
                    byte[] keypress = null;
                    RETURN_CODE rt2 =
                        IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                            ref keypress);

                    if (keypress == null)
                    {
                        Thread.Sleep(1000); //nothing detected
                    }
                    else if (keypress.Length == 11)
                    {
                        //possible keypad input
                        if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                        {
                            //enter was pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                        {
                            //back/clear  was pressed, go to previous menu
                            piscesMainMenu();
                            return;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                        {
                            //cancel  was pressed,  exit app
                            //exit app
                            //exit custom display mode
                            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                            //reset device to initial state
                            IDT_Device.SharedController.lcd_resetInitialState();
                            return;
                        }
                    }
                    else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                    {
                        if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                            keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                        {
                            //button pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                    }


                }

                byte[] selectedListItem = null;
                RETURN_CODE rt3 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
                if (selectedListItem != null)
                {
                    int lineNum = 0;
                    //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                    if (selectedListItem.Length == 4)
                        lineNum = (selectedListItem[2] - 0x30);
                    if (selectedListItem.Length == 5)
                        lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                    switch (lineNum)
                    {
                        case 1: //Back to Main Manu
                        stayInMenu = false;
                        piscesMainMenu();
                        break;
                        case 2: // Start CTLS Transaction
                        stayInMenu = false;
                        showPiscesResults("TODO CTLS->Start CTLS Transaction");
                        break;
                        case 3: // List AIDs
                        stayInMenu = false;
                        byte[][] aids = null;
                        rt = IDT_Device.SharedController.ctls_retrieveAIDList(ref aids);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            StringBuilder sb = new StringBuilder();
                            sb.Append("List AID Successful");
                            sb.Append("\r");

                            System.Diagnostics.Debug.WriteLine("List AID Successful");
                            if (aids.Count() > 0)
                            {
                                foreach (byte[] b in aids)
                                {
                                    sb.Append(convertAidResponse(b));
                                    sb.Append("\r");
                                }
                            }
                            else
                            {
                                sb.Append("No Aid Files loaded");
                            }

                            showPiscesResults(sb.ToString());
                        }
                        else
                        {
                            showPiscesResults("List AID failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 4: // List Terminal Data
                        stayInMenu = false;
                        byte[] tlv = null;
                        rt = IDT_Device.SharedController.ctls_retrieveTerminalData(ref tlv);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {

                            showPiscesResults("Retrieve Terminal Successful- TLV: " + tlvToValues(tlv));


                        }
                        else
                        {
                            showPiscesResults("Retrieve Terminal failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 5: // List CAPK
                        stayInMenu = false;
                        byte[] capk = null;
                        rt = IDT_Device.SharedController.ctls_retrieveCAPKList(ref capk);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            StringBuilder sb = new StringBuilder();

                            sb.Append("List CAPK Command Successful");
                            sb.Append("\r");
                            if (capk.Length > 0)
                            {
                                for (int x = 0; x < capk.Length; x = x + 6)
                                {
                                    byte[] thecapk = new byte[]
                                        {capk[x], capk[x + 1], capk[x + 2], capk[x + 3], capk[x + 4], capk[x + 5]};
                                    sb.Append(Common.getHexStringFromBytes(thecapk));
                                    sb.Append("\r");
                                }


                            }
                            else
                            {
                                sb.Append("No CAPK loaded");
                            }

                            showPiscesResults(sb.ToString());
                        }
                        else
                        {
                            showPiscesResults("List CAPK failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;

                    }


                }

            }





        }

        private void piscesDeviceMenu()
        {
            string ident = getIdentValue();
            currentPiscesMenu = 1;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                piscesDeviceMenu();
                //tbOutputAppendText("Could not put device into custom display mode  \r\n", ident);
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display Device Menu text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("30003135000000310039003000446576696365204d656e7500"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Back To Main Menu + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204261636b20546f204d61696e204d656e7500322e310000000001"),
                ref response);

            // Start Transaction
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e205374617274205472616e73616374696f6e00322e320000000000"),
                ref response);
            // Get Firmware Version
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20476574204669726d776172652056657273696f6e00322e330000000000"),
                ref response);
            // Get Serial Number
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204765742053657269616c204e756d62657200322e340000000000"),
                ref response);
            // Ping Device
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e2050696e672044657669636500322e350000000000"), ref response);
            // 4 UInt16 beeps
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20342073686f727420626565707300322e360000000000"),
                ref response);
            // ICC LED On
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20494343204c4544204f6e00322e370000000000"), ref response);
            // ICC LED Off
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20494343204c4544204f666600322e380000000000"), ref response);
            // Blue MSR LED On
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20426c7565204d5352204c4544204f6e00322e390000000000"),
                ref response);
            // Blue MSR LED Off
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20426c7565204d5352204c4544204f666600322e31300000000000"),
                ref response);


            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            bool stayInMenu = true;
            while (stayInMenu)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);



                bool stayInLoop = true;
                while (stayInLoop)
                {
                    byte[] keypress = null;
                    RETURN_CODE rt2 =
                        IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                            ref keypress);

                    if (keypress == null)
                    {
                        Thread.Sleep(1000); //nothing detected
                    }
                    else if (keypress.Length == 11)
                    {
                        //possible keypad input
                        if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                        {
                            //enter was pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                        {
                            //back/clear  was pressed, go to previous menu
                            piscesMainMenu();
                            return;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                        {
                            //cancel  was pressed,  exit app
                            //exit app
                            //exit custom display mode
                            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                            //reset device to initial state
                            IDT_Device.SharedController.lcd_resetInitialState();
                            return;
                        }
                    }
                    else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                    {
                        if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                            keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                        {
                            //button pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                    }


                }

                byte[] selectedListItem = null;
                RETURN_CODE rt3 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
                if (selectedListItem != null)
                {
                    int lineNum = 0;
                    //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                    if (selectedListItem.Length == 4)
                        lineNum = (selectedListItem[2] - 0x30);
                    if (selectedListItem.Length == 5)
                        lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                    switch (lineNum)
                    {
                        case 1: //Back to Main Manu
                        stayInMenu = false;
                        piscesMainMenu();
                        break;
                        case 2: // Start Transaction
                        stayInMenu = false;
                        showPiscesResults("TODO Device->Start Transaction");
                        break;
                        case 3: // Get Firmware Version
                        stayInMenu = false;
                        string firmwareVersion = "";
                        rt = IDT_Device.SharedController.device_getFirmwareVersion(ref firmwareVersion);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            showPiscesResults("Firmware Ver: " + firmwareVersion);
                        }
                        else
                        {
                            showPiscesResults("Get Firmware Fail Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 4: // Get Serial Number
                        stayInMenu = false;
                        string sNumber = "";
                        rt = IDT_Device.SharedController.config_getSerialNumber(ref sNumber);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            showPiscesResults("Serial Number: " + sNumber);
                        }
                        else
                        {
                            showPiscesResults("Get Serial Number Fail Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 5: // Ping Device
                        stayInMenu = false;
                        rt = IDT_Device.SharedController.device_pingDevice();
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {

                            showPiscesResults("Ping Device successful");
                        }
                        else
                        {
                            showPiscesResults("Ping Device failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 6: // 4 UInt16 beeps
                        stayInMenu = true;
                        rt = IDT_Device.SharedController.device_setBuzzerLED(04, 00, false);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            stayInMenu = false;
                            showPiscesResults("4 UInt16 beeps failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt) + ": " +
                                              IDTechSDK.errorCode.getErrorString(rt) + "\r\n");
                            checkLastExtendedErrorCode(ident);

                        }

                        break;
                        case 7: // ICC LED On
                        stayInMenu = true;
                        rt = IDT_Device.SharedController.device_controlIndicator(00, true);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            stayInMenu = false;
                            showPiscesResults("ICC LED ON failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt) + ": " +
                                              IDTechSDK.errorCode.getErrorString(rt) + "\r\n");
                            checkLastExtendedErrorCode(ident);

                        }

                        break;
                        case 8: // ICC LED Off
                        stayInMenu = true;
                        rt = IDT_Device.SharedController.device_controlIndicator(00, false);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            stayInMenu = false;
                            showPiscesResults("ICC LED Off failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt) + ": " +
                                              IDTechSDK.errorCode.getErrorString(rt) + "\r\n");
                            checkLastExtendedErrorCode(ident);

                        }

                        break;
                        case 9: //Blue MSR LED On
                        stayInMenu = true;
                        rt = IDT_Device.SharedController.device_controlIndicator(01, true);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            stayInMenu = false;
                            showPiscesResults("Blue MSR LED On failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt) + ": " +
                                              IDTechSDK.errorCode.getErrorString(rt) + "\r\n");
                            checkLastExtendedErrorCode(ident);

                        }

                        break;
                        case 10: //Blue MSR LED Off
                        stayInMenu = true;
                        rt = IDT_Device.SharedController.device_controlIndicator(01, false);
                        if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            stayInMenu = false;
                            showPiscesResults("Blue MSR LED On failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt) + ": " +
                                              IDTechSDK.errorCode.getErrorString(rt) + "\r\n");
                            checkLastExtendedErrorCode(ident);

                        }

                        break;
                    }


                }

            }





        }

        private void piscesEMVMenu()
        {
            currentPiscesMenu = 4;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                piscesDeviceMenu();
                //tbOutputAppendText("Could not put device into custom display mode  \r\n", ident);
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display EMV Menu text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("30003135000000310039003000454d56204d656e7500"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Back To Main Menu + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204261636b20546f204d61696e204d656e7500342e310000000001"),
                ref response);

            // Start EMV Transaction
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(
                    itemListIDStr + "3e3e20537461727420454d56205472616e73616374696f6e00342e320000000000"),
                ref response);
            // Kernel Version
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204b65726e656c2056657273696f6e00342e330000000000"),
                ref response);
            // Kernel Checksum
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204b65726e656c20436865636b73756d00342e340000000000"),
                ref response);
            // Config Checksum
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20436f6e66696720436865636b73756d00342e350000000000"),
                ref response);
            // List AID
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c6973742041494400342e360000000000"), ref response);
            // List Terminal Data
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c697374205465726d696e616c204461746100342e370000000000"),
                ref response);
            // List CAPK
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c697374204341504b00342e380000000000"), ref response);
            // List CRL
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204c6973742043524c00342e390000000000"), ref response);


            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            bool stayInMenu = true;
            while (stayInMenu)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);



                bool stayInLoop = true;
                while (stayInLoop)
                {
                    byte[] keypress = null;
                    RETURN_CODE rt2 =
                        IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                            ref keypress);

                    if (keypress == null)
                    {
                        Thread.Sleep(1000); //nothing detected
                    }
                    else if (keypress.Length == 11)
                    {
                        //possible keypad input
                        if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                        {
                            //enter was pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                        {
                            //back/clear  was pressed, go to previous menu
                            piscesMainMenu();
                            return;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                        {
                            //cancel  was pressed,  exit app
                            //exit app
                            //exit custom display mode
                            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                            //reset device to initial state
                            IDT_Device.SharedController.lcd_resetInitialState();
                            return;
                        }
                    }
                    else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                    {
                        if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                            keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                        {
                            //button pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                    }


                }

                byte[] selectedListItem = null;
                RETURN_CODE rt3 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
                if (selectedListItem != null)
                {

                    int lineNum = 0;
                    //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                    if (selectedListItem.Length == 4)
                        lineNum = (selectedListItem[2] - 0x30);
                    if (selectedListItem.Length == 5)
                        lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                    switch (lineNum)
                    {
                        case 1: //Back to Main Manu
                        stayInMenu = false;
                        piscesMainMenu();
                        break;
                        case 2: // Start EMV Transaction
                        stayInMenu = false;
                        showPiscesResults("TODO EMV->Start EMV Transaction");
                        break;
                        case 3: // Kernel Version
                        stayInMenu = false;
                        String ver = "";
                        rt = IDT_Device.SharedController.emv_getEMVKernelVersion(ref ver);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            showPiscesResults("EMV Kernel Version: " + ver);
                        }
                        else
                        {
                            showPiscesResults("EMV Kernel Version failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 4: // Kernel Checksum
                        stayInMenu = false;
                        ver = "";
                        rt = IDT_Device.SharedController.emv_getEMVKernelCheckValue(ref ver);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            showPiscesResults("EMV Kernel Check Value: " + ver);
                        }
                        else
                        {
                            showPiscesResults("EMV Kernel Check Value failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 5: // Config Checksum
                        stayInMenu = false;
                        ver = "";
                        rt = IDT_Device.SharedController.emv_getEMVConfigurationCheckValue(ref ver);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            showPiscesResults("EMV Configuration Check Value: " + ver);
                        }
                        else
                        {
                            showPiscesResults("EMV Configuration Check Value failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 6: // List AID
                        stayInMenu = false;
                        byte[][] aids = null;
                        rt = IDT_Device.SharedController.emv_retrieveAIDList(ref aids);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            StringBuilder sb = new StringBuilder();

                            sb.Append("List AID Successful");
                            sb.Append("\r");
                            if (aids.Count() > 0)
                            {
                                foreach (byte[] b in aids)
                                {
                                    sb.Append(convertAidResponse(b));
                                    sb.Append("\r");
                                }
                            }
                            else
                            {
                                sb.Append("No AID files available");
                                sb.Append("\r");
                            }

                            showPiscesResults(sb.ToString());
                        }
                        else
                        {
                            showPiscesResults("List AID failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 7: // List Terminal Data
                        stayInMenu = false;
                        byte[] tlv = null;
                        rt = IDT_Device.SharedController.emv_retrieveTerminalData(ref tlv);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {

                            showPiscesResults("Retrieve Terminal Successful- TLV: " + tlvToValues(tlv));
                        }
                        else
                        {
                            showPiscesResults("Retrieve Terminal failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 8: // List CAPK
                        stayInMenu = false;
                        byte[] capk = null;
                        rt = IDT_Device.SharedController.emv_retrieveCAPKList(ref capk);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            StringBuilder sb = new StringBuilder();
                            sb.Append("List CAPK Command Successful");
                            sb.Append("\r");

                            if (capk.Length > 0)
                            {
                                for (int x = 0; x < capk.Length; x = x + 6)
                                {
                                    byte[] thecapk = new byte[]
                                        {capk[x], capk[x + 1], capk[x + 2], capk[x + 3], capk[x + 4], capk[x + 5]};
                                    sb.Append(Common.getHexStringFromBytes(thecapk));
                                    sb.Append("\r");
                                }


                            }
                            else
                            {
                                sb.Append("No CAPK's Loaded");
                                sb.Append("\r");
                            }

                            showPiscesResults(sb.ToString());
                        }
                        else
                        {
                            showPiscesResults("List CAPK failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;
                        case 9: //List CRL
                        stayInMenu = false;
                        byte[] crl = null;
                        rt = IDT_Device.SharedController.emv_retrieveCRLList(ref crl);
                        if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                        {
                            StringBuilder sb = new StringBuilder();

                            sb.Append("List CRL Successful");
                            sb.Append("\r");
                            if (crl != null && crl.Length > 0)
                            {
                                for (int x = 0; x < crl.Length; x = x + 9)
                                {
                                    byte[] thecrl = new byte[]
                                    {
                                            crl[x], crl[x + 1], crl[x + 2], crl[x + 3], crl[x + 4], crl[x + 5],
                                            crl[x + 6], crl[x + 7], crl[x + 8]
                                    };
                                    sb.Append(Common.getHexStringFromBytes(thecrl));
                                    sb.Append("\r");
                                }


                            }
                            else
                            {
                                sb.Append("No CRL Loaded");
                                sb.Append("\r");
                            }

                            showPiscesResults(sb.ToString());
                        }
                        else
                        {
                            showPiscesResults("List CRL failed Error Code: " + "0x" +
                                              String.Format("{0:X}", (ushort)rt));
                        }

                        break;

                    }


                }

            }





        }

        private void piscesLCDMenu()
        {
            currentPiscesMenu = 5;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                piscesDeviceMenu();
                //tbOutputAppendText("Could not put device into custom display mode  \r\n", ident);
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display EMV Menu text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("300031350000003100390030004c4344204d656e7500"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Back To Main Menu + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204261636b20546f204d61696e204d656e7500352e310000000001"),
                ref response);

            // Capture Signature
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e2043617074757265205369676e617475726500352e320000000000"),
                ref response);
            // Start Default Slideshow
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr +
                                    "3e3e2053746172742044656661756c7420536c69646573686f7700352e330000000000"),
                ref response);


            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            bool stayInMenu = true;
            while (stayInMenu)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);



                bool stayInLoop = true;
                while (stayInLoop)
                {
                    byte[] keypress = null;
                    RETURN_CODE rt2 =
                        IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                            ref keypress);

                    if (keypress == null)
                    {
                        Thread.Sleep(1000); //nothing detected
                    }
                    else if (keypress.Length == 11)
                    {
                        //possible keypad input
                        if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                        {
                            //enter was pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                        {
                            //back/clear  was pressed, go to previous menu
                            piscesMainMenu();
                            return;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                        {
                            //cancel  was pressed,  exit app
                            //exit app
                            //exit custom display mode
                            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                            //reset device to initial state
                            IDT_Device.SharedController.lcd_resetInitialState();
                            return;
                        }
                    }
                    else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                    {
                        if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                            keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                        {
                            //button pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                    }


                }

                byte[] selectedListItem = null;
                RETURN_CODE rt3 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
                if (selectedListItem != null)
                {

                    int lineNum = 0;
                    //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                    if (selectedListItem.Length == 4)
                        lineNum = (selectedListItem[2] - 0x30);
                    if (selectedListItem.Length == 5)
                        lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                    switch (lineNum)
                    {
                        case 1: //Back to Main Manu
                        stayInMenu = false;
                        piscesMainMenu();
                        break;
                        case 2: // Capture Signature
                        stayInMenu = false;
                        showPiscesResults("TODO LCD->Capture Signature");
                        break;
                        case 3: // Start Default Slideshow
                        stayInMenu = false;
                        showPiscesResults("TODO LCD->Start Default Slideshow");
                        break;

                    }


                }

            }





        }

        private void piscesPINMenu()
        {
            currentPiscesMenu = 6;
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                piscesDeviceMenu();
                //tbOutputAppendText("Could not put device into custom display mode  \r\n", ident);
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display PIN Menu text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("3000313500000031003900300050494E204d656e7500"), ref response);

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("3000313500000031003900300050494E204d656e7500"), ref response);

            //display ExecuteButton at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004578656375746500FFFFFF0000000000"), ref buttonID);

            //display item list
            byte[] itemListID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x10,
                Common.getByteArray("313100353500313700313100310034000000001F"), ref itemListID);

            string itemListIDStr = Common.getHexStringFromBytes(itemListID);

            //Add Display List Items, with string ID's 1.1 - 1.9  (menu # . Line Number)
            // Back To Main Menu + highlight this line
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e204261636b20546f204d61696e204d656e7500362e310000000001"),
                ref response);

            // Capture PIN
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e20436170747572652050494e00362e320000000000"), ref response);
            // Prompt Credit/Debit
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x11,
                Common.getByteArray(itemListIDStr + "3e3e2050726f6d7074204372656469742f446562697400362e330000000000"),
                ref response);


            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            bool stayInMenu = true;
            while (stayInMenu)
            {
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);



                bool stayInLoop = true;
                while (stayInLoop)
                {
                    byte[] keypress = null;
                    RETURN_CODE rt2 =
                        IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                            ref keypress);

                    if (keypress == null)
                    {
                        Thread.Sleep(1000); //nothing detected
                    }
                    else if (keypress.Length == 11)
                    {
                        //possible keypad input
                        if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                        {
                            //enter was pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                        {
                            //back/clear  was pressed, go to previous menu
                            piscesMainMenu();
                            return;
                        }
                        else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                        {
                            //cancel  was pressed,  exit app
                            //exit app
                            //exit custom display mode
                            rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                            //reset device to initial state
                            IDT_Device.SharedController.lcd_resetInitialState();
                            return;
                        }
                    }
                    else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                    {
                        if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                            keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                        {
                            //button pressed, so process selection and exit loop
                            stayInLoop = false;
                        }
                    }


                }

                byte[] selectedListItem = null;
                RETURN_CODE rt3 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x15, itemListID, ref selectedListItem);
                if (selectedListItem != null)
                {

                    int lineNum = 0;
                    //the items should have ID's of <Menu ID>.<Line Num>, where MenuID = 1-9, and LineNum = 1-99;
                    if (selectedListItem.Length == 4)
                        lineNum = (selectedListItem[2] - 0x30);
                    if (selectedListItem.Length == 5)
                        lineNum = ((selectedListItem[2] - 0x30) * 10) + (selectedListItem[3] - 0x30);
                    switch (lineNum)
                    {
                        case 1: //Back to Main Manu
                        stayInMenu = false;
                        piscesMainMenu();
                        break;
                        case 2: // Capture PIN
                        stayInMenu = false;
                        showPiscesResults("TODO PIN->Capture PIN");
                        break;
                        case 3: // Prompt Credit/Debit
                        stayInMenu = false;
                        stayInMenu = false;
                        showPiscesResults("TODO PIN->Prompt Credit/Debit");
                        break;


                    }


                }

            }





        }

        void showPiscesResults(string results)
        {
            if (results == null) results = "";

            char[] trim = new char[] { (char)0x00 };
            results = results.Trim(trim);
            //put device into custom display mode (cycle it to clear)
            RETURN_CODE rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
            rt = IDT_Device.SharedController.lcd_customDisplayMode(true);

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                displayPreviousMenu();
            }

            //clear screen, twice due to background screen redraw issue
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);
            rt = IDT_Device.SharedController.lcd_clearDisplay(1);

            //display Results text at top of screen
            byte[] response = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x03,
                Common.getByteArray("30003135000000310039003000526573706f6e736500"), ref response);

            //display Back Button at bottom
            byte[] buttonID = null;
            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x05,
                Common.getByteArray("30003335300000003100390030004261636b00FFFFFF0000000000"), ref buttonID);


            byte[] strData = Encoding.ASCII.GetBytes(results);

            //Bug with paragraph display.  Does not know how to break up continuous text, we we have to insert spaces before maximimum line width is met.
            byte[] buffer = new byte[strData.Length * 2];
            int pos = 0;
            int spaceCounter = 0;
            int maxCharsPerLine = 20;
            for (int x = 0; x < strData.Length; x++)
            {
                spaceCounter++;
                if (spaceCounter > maxCharsPerLine)
                {
                    buffer[pos++] = 0x20;
                    spaceCounter = 0;
                }

                byte b = strData[x];
                //change CR/LF into spaces because paragraph control has issue with too many of those, and combination of those
                if (b == 0x0a || b == 0x0d)
                {
                    b = 0x20;
                    buffer[pos++] = b; //add an extra space for lf/cr
                }

                buffer[pos++] = b;
                //reset space counter if one is found in text
                if (b == 0x20) spaceCounter = 0;
            }

            //we cannot have text longer than 3999 chars
            if (pos > 3999) pos = 3999;
            byte[] newArray = new byte[pos];
            Array.Copy(buffer, newArray, pos);


            string str = Common.getHexStringFromBytes(newArray);
            if (str.Length > 0)
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x28,
                    Common.getByteArray("37003535003330340032393200310034003200" + str + "00"), ref response);
            else
                rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x28,
                    Common.getByteArray("370035350033303400323932003100340032004e6f204461746120417661696c61626c6500"),
                    ref response); //No Data Available

            if (rt != RETURN_CODE.RETURN_CODE_DO_SUCCESS)
                IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x28,
                    Common.getByteArray(
                        "3700353500333034003239320031003400320043616e6e6f7420646973706c617920737472696e672e20556e657870656374656420666f726d61742e00"),
                    ref response); //Cannot display string. Unexpected format.
            //enable input (no timeout value)

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                ref response);

            //clear input queue

            rt = IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x0C, null, ref response);
            bool stayInLoop = true;
            while (stayInLoop)
            {
                byte[] keypress = null;
                RETURN_CODE rt2 =
                    IDT_Device.SharedController.device_sendVivoCommandP2(0x83, 0x06, Common.getByteArray("00"),
                        ref keypress);

                if (keypress == null)
                {
                    Thread.Sleep(1000); //nothing detected
                }
                else if (keypress.Length == 11)
                {
                    //possible keypad input
                    if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x0d)
                    {
                        //enter was pressed, so process selection and exit loop
                        stayInLoop = false;
                    }
                    else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x08)
                    {
                        //back pressed. Go to previous menu
                        stayInLoop = false;
                    }
                    else if (keypress[1] == 0x03 && keypress[3] == 0x03 && keypress[10] == 0x1B)
                    {
                        //cancel  was pressed,  exit app
                        //exit app
                        //exit custom display mode
                        rt = IDT_Device.SharedController.lcd_customDisplayMode(false);
                        //reset device to initial state
                        IDT_Device.SharedController.lcd_resetInitialState();
                        return;
                    }
                }
                else if (keypress.Length > 16 && buttonID != null && buttonID.Length == 4)
                {
                    if (keypress[1] == 0x03 && keypress[4] == buttonID[0] && keypress[5] == buttonID[1] &&
                        keypress[6] == buttonID[2] && keypress[7] == buttonID[3])
                    {
                        //button pressed, so process selection and exit loop
                        stayInLoop = false;
                    }
                }


            }

            displayPreviousMenu();


        }

        private void btnStatic_CheckedChanged(object sender, EventArgs e)
        {
            tbNetworkAddress.Enabled = btnStatic.Checked;
            tbNetworkDNS.Enabled = btnStatic.Checked;
            tbNetworkGateway.Enabled = btnStatic.Checked;
            tbNetworkSubnet.Enabled = btnStatic.Checked;
        }

        string currentIPAddress = "";

        private void button5_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string address = currentIPAddress;
            if (currentIPAddress == null || currentIPAddress.Length == 0) address = "10.12.32.98";
            string input = Microsoft.VisualBasic.Interaction.InputBox(
                "What IP Address Is NEO 2 Device To Close Located At?", "Close IP Address", address, -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No IP Address specified.  \r\n", ident);

                return;
            }

            IDT_Device.ip_closeSocket(input);
            refreshDevices();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            if (MessageBox.Show("Would you like to scan for IP devices as listed in NEO2_Devices.xml?",
                    "Scan for devices", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                tbOutputAppendText("Scan started....\r\n", ident);
                IDT_Device.SharedController.ip_autoConnectToSocket();

                tbOutputAppendText("Scan finished....\r\n", ident);
            }
        }

        private bool suppressConnectNotification = false;

        private void button8_Click(object sender, EventArgs e)
        {

            string ident = getIdentValue();
            if (ident.Length == 0) return;
            bool connected = IDT_Device.ip_isConnected(ident, 10);
            if (connected)
            {
                tbOutputAppendText("Device Connected\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Device Connected");
            }
            else
            {
                tbOutputAppendText("Device Not Connected\r\n", ident);
                System.Diagnostics.Debug.WriteLine("Device Not Connected");

            }

            RETURN_CODE rt = IDT_Device.SharedController.checkSDKStatus(ident);
            tbOutputAppendText("Check SDK Status: " +
                                IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
        }

        private void button9_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string address = currentIPAddress;
            if (currentIPAddress == null || currentIPAddress.Length == 0) address = "10.12.32.98";
            string input = Microsoft.VisualBasic.Interaction.InputBox(
                "What IP Address Is NEO 2 Device To Put Into Standby Located At?", "Close IP Address", address, -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No IP Address specified.  \r\n", ident);

                return;
            }

            RETURN_CODE rt = IDT_Device.SharedController.device_enterStandbyMode(input);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Standby Mode Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Standby Mode Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void button10_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input = Microsoft.VisualBasic.Interaction.InputBox("What MAC Address To Wake?", "MAC Address",
                "782079001028", -1, -1);

            if (input.Length != 12)
            {
                tbOutputAppendText("Invalid MAC address.  \r\n", ident);
                return;
            }

            RETURN_CODE rt = IDT_Device.device_wakeDevice(input);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Wake Executed Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Wake  Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void button11_Click(object sender, EventArgs e)
        {
            string ident = getIdentValue();
            string input =
                Microsoft.VisualBasic.Interaction.InputBox("What IP Address To Wake?", "IP Address", "10.12.34.42", -1,
                    -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("Invalid IP address.  \r\n", ident);
                return;
            }



            RETURN_CODE rt = IDT_Device.device_wakeDevice("", input);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Wake Executed Successful\r\n", ident);
            }
            else
            {
                tbOutputAppendText("Wake  Error Code: " + "0x" + String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);

            }
        }

        private void button12_Click(object sender, EventArgs e)
        {

            if (Microsoft.VisualBasic.Interaction.MsgBox("Open ID Tech Parsomatic in Web Browser?",
                 MsgBoxStyle.OkCancel, "Parsomatic") == MsgBoxResult.Ok)
            {
                System.Diagnostics.Process.Start("https://www.idtechproducts.com/hosted-files/tools/parsomatic.html");
            }
        }

        private void button13_Click(object sender, EventArgs e)
        {
            string path = Settings.Default.LogFilePath;
            if (path == null || path.Length < 5)
            {
                path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\LogFiles";
                if (!Directory.Exists(path)) Directory.CreateDirectory(path);
                Settings.Default.LogFilePath = path;
                Settings.Default.Save();
            }
            Process.Start("explorer.exe", path);
        }

        private void sendPAE(string command)
        {
            string ident = getIdentValue();
            string ip = theCurrentIP;
            string response = "";
            RETURN_CODE rt = IDT_Device.SharedController.device_sendPAE(command, ref response, 8000, currentIPAddress);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                tbOutputAppendText("Send PAE Successful\r\n", ident);
                tbOutputAppendText(response, ident);

                System.Diagnostics.Debug.WriteLine("Send PAE Successful");
            }
            else
            {
                tbOutputAppendText("Send PAE failed Error Code: " + "0x" +
                                    String.Format("{0:X}", (ushort)rt) + ": " +
                                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", ident);
                checkLastExtendedErrorCode(ident);
                System.Diagnostics.Debug.WriteLine("Send PAE failed Error Code: " + "0x" +
                                                   String.Format("{0:X}", (ushort)rt));
                if (response != null && response.Length > 0) tbOutputAppendText(response, ident);
            }

        }

        private void pae1b_Click(object sender, EventArgs e)
        {
            sendPAE(pae1t.Text);
        }

        private void pae2b_Click(object sender, EventArgs e)
        {
            sendPAE(pae2t.Text);
        }

        private void pae3b_Click(object sender, EventArgs e)
        {
            sendPAE(pae3t.Text);
        }

        private void pae4b_Click(object sender, EventArgs e)
        {
            sendPAE(pae4t.Text);
        }

        private void pae5b_Click(object sender, EventArgs e)
        {
            sendPAE(pae5t.Text);
        }

        private void pae6b_Click(object sender, EventArgs e)
        {
            sendPAE(pae6t.Text);
        }

        private void pae7b_Click(object sender, EventArgs e)
        {
            sendPAE(pae7t.Text);
        }

        private void pae8b_Click(object sender, EventArgs e)
        {
            sendPAE(pae8t.Text);
        }

        private void pae1_TextChanged(object sender, EventArgs e)
        {
            saveSettings();
        }

        private void button15_Click_1(object sender, EventArgs e)
        {
            Profile.closeAllDevices();
        }

        private string encToBin(string val, bool isReversed)
        {
            if (val == null || val.Length < 2) return "";
            StringBuilder sb = new StringBuilder();
            int match = 1;
            if (isReversed) match = 0;
            for (int x = 0; x < val.Length - 8; x += 8)
            {
                if (((x + 7) % 2 == match)) { sb.Append(val.Substring(x + 7, 1)); }
                if (((x + 6) % 2 == match)) { sb.Append(val.Substring(x + 6, 1)); }
                if (((x + 5) % 2 == match)) { sb.Append(val.Substring(x + 5, 1)); }
                if (((x + 4) % 2 == match)) { sb.Append(val.Substring(x + 4, 1)); }
                if (((x + 3) % 2 == match)) { sb.Append(val.Substring(x + 3, 1)); }
                if (((x + 2) % 2 == match)) { sb.Append(val.Substring(x + 2, 1)); }
                if (((x + 1) % 2 == match)) { sb.Append(val.Substring(x + 1, 1)); }
                if (((x + 0) % 2 == match)) { sb.Append(val.Substring(x + 0, 1)); }

            }
            return sb.ToString();
        }

        private String BinStrtoHexStr(String strBin)
        {
            int len = strBin.Length / 4;
            uint temp = 0;
            String res = "";
            for (int i = 0; i < len; i++)
            {
                temp = System.Convert.ToUInt32(strBin.Substring(i * 4, 4), 2);
                res += String.Format("{0:X000}", temp);
            }

            return res;
        }

        private void button17_Click(object sender, EventArgs e)
        {
            IDT_Device.stopUSBMonitoring();
            openFW.Filter = "Wave Files|*.wav";
            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();
                byte[] file = File.ReadAllBytes(openFW.FileName);


                StringBuilder sb = new StringBuilder();
                StringBuilder final = new StringBuilder();
                //lets find data start
                int startPos = 0;
                int HighValue = 5000;
                int LowValue = -5000;
                for (int x = 100; x < file.Length - 60; x += 2)
                {
                    short val1 = BitConverter.ToInt16(file, x);
                    short val2 = BitConverter.ToInt16(file, x + (5 * 2));
                    short val3 = BitConverter.ToInt16(file, x + (10 * 2));
                    short val4 = BitConverter.ToInt16(file, x + (15 * 2));
                    short val5 = BitConverter.ToInt16(file, x + (20 * 2));

                    if (val1 > HighValue && val2 > HighValue && val3 < LowValue && val4 > HighValue && val5 < LowValue)
                    {
                        startPos = x + (20 * 2);   //was 20

                        break;
                    }

                }
                bool lowFlag = true;
                int delta = startPos;
                if (startPos > 0)
                {

                    for (int x = startPos; x < file.Length - 100; x += 2)
                    {

                        if (lowFlag)
                        {
                            if (BitConverter.ToInt16(file, x) > 0)
                            {
                                lowFlag = false;
                                if (x - delta <= 12) sb.Append("0");
                                else if (x - delta <= 24) sb.Append("00");
                                else break;
                                delta = x;
                            }
                        }
                        else
                        {
                            if (BitConverter.ToInt16(file, x) < 0)
                            {
                                lowFlag = true;
                                if (x - delta <= 12) sb.Append("1");
                                else if (x - delta <= 24) sb.Append("11");
                                else break;
                                delta = x;
                            }
                        }

                        if (x - delta > 40) break;


                    }



                    string strVal = sb.ToString();
                    System.Diagnostics.Debug.WriteLine(strVal);
                    sb = new StringBuilder();
                    int pos1 = strVal.IndexOf("0011001101001100110101001011010100101101");
                    int pos2 = strVal.IndexOf("1100110010110011001010110100101011010010");

                    bool reversedString = false;
                    int startingPosition = -1;
                    if (pos1 == -1 && pos2 >= 0)
                    {
                        reversedString = true;
                        startingPosition = pos2;
                    }
                    else if (pos2 == -1 && pos1 >= 0)
                    {
                        startingPosition = pos1;
                        reversedString = false;
                    }
                    else if (pos2 >= 0 && pos1 >= 0 && pos1 < pos2)
                    {
                        startingPosition = pos1;
                        reversedString = false;
                    }
                    else if (pos2 >= 0 && pos1 >= 0 && pos2 < pos1)
                    {
                        startingPosition = pos2;
                        reversedString = true;
                    }


                    if (pos1 >= 0)
                    {
                        int origStringLength = strVal.Length;
                        for (int x = pos1 + 40; x < strVal.Length - 10; x += 10)
                        {
                            sb.Append(strVal.Substring(x + 1, 8));

                        }




                        if (sb != null && sb.ToString().Length >= 0)
                        {
                            System.Diagnostics.Debug.WriteLine(sb.ToString());
                            string binaryOutput = encToBin(sb.ToString(), reversedString);
                            string hexOut = BinStrtoHexStr(binaryOutput);
                            System.Diagnostics.Debug.WriteLine(hexOut);
                            return;
                        }


                    }




                }


            }

        }

        private void button17_Click_orig(object sender, EventArgs e)
        {
            IDT_Device.stopUSBMonitoring();
            openFW.Filter = "Wave Files|*.wav";

            loadSettings();
            openFW.InitialDirectory = _lastFW;
            if (openFW.ShowDialog() == DialogResult.OK)
            {
                _lastFW = openFW.InitialDirectory;
                saveSettings();

                byte[] file = File.ReadAllBytes(openFW.FileName);


                StringBuilder sb = new StringBuilder();
                //lets find data start
                int startPos = 0;
                int HighValue = 2000;
                int LowValue = -2000;
                for (int x = 100; x < file.Length - 60; x += 2)
                {
                    short val1 = BitConverter.ToInt16(file, x);
                    short val2 = BitConverter.ToInt16(file, x + (5 * 2));
                    short val3 = BitConverter.ToInt16(file, x + (10 * 2));
                    short val4 = BitConverter.ToInt16(file, x + (15 * 2));
                    short val5 = BitConverter.ToInt16(file, x + (20 * 2));

                    if (val1 > HighValue && val2 > HighValue && val3 < LowValue && val4 > HighValue && val5 < LowValue)
                    {
                        startPos = x + (20 * 2);
                        break;
                    }

                }

                if (startPos > 0)
                {

                    string tempString = "";
                    int updatedPosition = 0;
                    sb.Append("0");
                    bool isLow = true;
                    int loopCounter = 0;
                    while (true)
                    {

                        if ((startPos - 20 + updatedPosition) > file.Length) break;
                        if (loopCounter == 4)
                        {
                            //resync data and skip over sync byte
                            short val2 = BitConverter.ToInt16(file, startPos + updatedPosition + (9 * 2));
                            short val3 = BitConverter.ToInt16(file, startPos + updatedPosition + (10 * 2));
                            short val4 = BitConverter.ToInt16(file, startPos + updatedPosition + (11 * 2));
                            if (val2 < val3 && val2 < val4)
                            {
                                startPos = startPos + updatedPosition + (9 * 2);
                                updatedPosition = 0;
                                loopCounter = 0;
                            }
                            if (val3 < val2 && val3 < val4)
                            {
                                startPos = startPos + updatedPosition + (10 * 2);
                                updatedPosition = 0;
                                loopCounter = 0;
                            }
                            if (val4 < val2 && val4 < val3)
                            {
                                startPos = startPos + updatedPosition + (11 * 2);
                                updatedPosition = 0;
                                loopCounter = 0;
                            }
                        }


                        if (isLow)
                        {
                            if (BitConverter.ToInt16(file, startPos + (7 * 2) + updatedPosition) > (HighValue / 2))
                            {
                                if (tempString.Length == 0)
                                {
                                    tempString = "0";
                                }
                                else
                                {
                                    sb.Append("0");
                                }

                                short val2 = BitConverter.ToInt16(file, startPos + updatedPosition + (4 * 2));
                                short val3 = BitConverter.ToInt16(file, startPos + updatedPosition + (5 * 2));
                                short val4 = BitConverter.ToInt16(file, startPos + updatedPosition + (6 * 2));
                                short val5 = BitConverter.ToInt16(file, startPos + updatedPosition + (7 * 2));
                                if (val2 > val3 && val2 > val4 && val2 > val5) updatedPosition += 8;
                                else if (val3 > val2 && val3 > val4 && val3 > val5) updatedPosition += 10;
                                else if (val4 > val3 && val4 > val3 && val4 > val5) updatedPosition += 12;
                                else if (val5 > val2 && val5 > val3 && val5 > val4) updatedPosition += 14;
                                loopCounter++;
                                isLow = false;
                            }
                            else if (BitConverter.ToInt16(file, startPos + (7 * 2) + updatedPosition) < (LowValue / 2))
                            {
                                tempString = "0";
                                sb.Append("0");
                                short val2 = BitConverter.ToInt16(file, startPos + updatedPosition + (9 * 2));
                                short val3 = BitConverter.ToInt16(file, startPos + updatedPosition + (10 * 2));
                                short val4 = BitConverter.ToInt16(file, startPos + updatedPosition + (11 * 2));
                                short val5 = BitConverter.ToInt16(file, startPos + updatedPosition + (12 * 2));
                                if (val2 > val3 && val2 > val4 && val2 > val5) updatedPosition += 18;
                                else if (val3 > val2 && val3 > val4 && val3 > val5) updatedPosition += 20;
                                else if (val4 > val3 && val4 > val3 && val4 > val5) updatedPosition += 22;
                                else if (val5 > val2 && val5 > val3 && val5 > val4) updatedPosition += 24;
                                loopCounter++;
                                isLow = false;
                            }
                            else break;
                        }
                        else
                        {
                            if (BitConverter.ToInt16(file, startPos + (7 * 2) + updatedPosition) > (HighValue / 2))
                            {

                                tempString = "1";
                                sb.Append("1");


                                short val2 = BitConverter.ToInt16(file, startPos + updatedPosition + (9 * 2));
                                short val3 = BitConverter.ToInt16(file, startPos + updatedPosition + (10 * 2));
                                short val4 = BitConverter.ToInt16(file, startPos + updatedPosition + (11 * 2));
                                short val5 = BitConverter.ToInt16(file, startPos + updatedPosition + (12 * 2));
                                if (val2 < val3 && val2 < val4 && val2 < val5) updatedPosition += 18;
                                else if (val3 < val2 && val3 < val4 && val3 < val5) updatedPosition += 20;
                                else if (val4 < val3 && val4 < val3 && val4 < val5) updatedPosition += 22;
                                else if (val5 < val2 && val5 < val3 && val5 < val4) updatedPosition += 24;
                                loopCounter++;
                                isLow = true;
                            }
                            else if (BitConverter.ToInt16(file, startPos + (7 * 2) + updatedPosition) < (LowValue / 2))
                            {
                                if (tempString.Length == 0)
                                {
                                    tempString = "1";
                                }
                                else
                                {
                                    sb.Append("1");
                                }
                                short val2 = BitConverter.ToInt16(file, startPos + updatedPosition + (4 * 2));
                                short val3 = BitConverter.ToInt16(file, startPos + updatedPosition + (5 * 2));
                                short val4 = BitConverter.ToInt16(file, startPos + updatedPosition + (6 * 2));
                                short val5 = BitConverter.ToInt16(file, startPos + updatedPosition + (7 * 2));
                                if (val2 < val3 && val2 < val4 && val2 < val5) updatedPosition += 8;
                                else if (val3 < val2 && val3 < val4 && val3 < val5) updatedPosition += 10;
                                else if (val4 < val3 && val4 < val3 && val4 < val5) updatedPosition += 12;
                                else if (val5 < val2 && val5 < val3 && val5 < val4) updatedPosition += 17;
                                loopCounter++;
                                isLow = true;
                            }
                            else break;
                        }


                    }
                }



            }
        }

        private void tbAuthenticate_TextChanged(object sender, EventArgs e)
        {
            byte[] additionalTags = Common.getByteArray(tbAuthenticate.Text);
            IDT_Device.emv_autoAuthenticateTags(cbAutoAuthenticate.Checked, additionalTags);
        }

        private void cbAllowFallback_CheckedChanged(object sender, EventArgs e)
        {
            IDT_Device.emv_allowFallback(cbAllowFallback.Checked);
        }

        private void cbForceOnline_CheckedChanged(object sender, EventArgs e)
        {
            IDT_Device.emv_forceOnline(cbForceOnline.Checked);
        }

        private int baud = 0;
        private List<int> getavailablePorts()
        {
            List<int> ports = new List<int>();

            string[] std = SerialPort.GetPortNames();
            if (std != null && std.Length > 0)
            {
                foreach (string str in std)
                {
                    if (str != null && str.StartsWith("COM"))
                    {

                        int port = 0;
                        try
                        {
                            port = Convert.ToInt32(str.Substring(3));
                            if (connectedDevicesList.Items.Count > 0)
                            {
                                foreach (string device in connectedDevicesList.Items)
                                {
                                    if (device.EndsWith(str)) port = 0;

                                }
                            }
                            if (port > 0) ports.Add(port);
                        }
                        catch
                        {

                        }

                    }
                }

            }

            return ports;
        }

        void selectTab(string name)
        {
            foreach (TabPage page in Devices.TabPages)
            {
                if (page.Text.Equals(name))
                {
                    Devices.SelectedTab = page;
                    return;
                }
            }
        }

        private void rescanForDevicesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Profile.discoverDevice();
        }

        private void bTMagToolStripMenuItem_Click(object sender, EventArgs e)
        {
            List<int> availablePorts = getavailablePorts();
            if (availablePorts == null || (availablePorts != null && availablePorts.Count == 0))
            {
                MessageBox.Show("No available COM ports to open", "No COM Ports", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            ToolStripMenuItem item = (ToolStripMenuItem)sender;


            IDT_DEVICE_Types type = Profile.deviceTypeFromName(item.Text.Trim());
            int port = availablePorts[0];

            if (availablePorts.Count > 1)
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("Please choose from the following COM ports:");
                foreach (int val in availablePorts)
                {
                    sb.Append(val.ToString() + "   ");
                }
                sb.AppendLine("");
                string input2 =
                                Microsoft.VisualBasic.Interaction.InputBox(sb.ToString(), "Data",
                                    availablePorts[0].ToString(), -1, -1);

                int selectedPort = 0;
                try
                {
                    selectedPort = Convert.ToInt32(input2);
                }
                catch
                {

                }
                if (selectedPort > 0) port = selectedPort;
            }


            bool isConnected = false;
            if (baud == 0)
            {
                isConnected = IDT_Device.useSerialPort(type,
                     port);
            }
            else
            {
                isConnected = IDT_Device.useSerialPort(type,
                    port, baud);
            }


            if (!isConnected)
            {

                tbOutputAppendText("Failed to locate device on specified COM port", getIdentValue());
                return;
            }

            IDT_Device.setDeviceType(type, DEVICE_INTERFACE_Types.DEVICE_INTERFACE_SERIAL);
            buildTreeView();
        }

        private void bDefault_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem)sender;
            bDefault.Checked = false;
            b2400.Checked = false;
            b4800.Checked = false;
            b9600.Checked = false;
            b19200.Checked = false;
            b38400.Checked = false;
            b57600.Checked = false;
            b115200.Checked = false;
            item.Checked = true;
            if (item.Name.Equals("bDefault")) baud = 0;
            else baud = Convert.ToInt32(item.Text);


        }

        private void connectIP(bool useTLS)
        {
            string ident = getIdentValue();



            string input = Microsoft.VisualBasic.Interaction.InputBox("What IP Address Is The VP6800 Located At?",
                "IP Address", _lastIP, -1, -1);

            if (input.Length == 0)
            {
                tbOutputAppendText("No IP Address specified.  \r\n", ident);
                return;
            }

            //IDT_Device.SharedController.ip_monitorSocketConnectionStatus(true, false, 10, 0);
            if (!IDT_Device.SharedController.ip_connectToSocket(input, useTLS))
            {
                tbOutputAppendText("Attempted connection to \"" + input + "\" failed.  \r\n", ident);
                return;
            }

            _lastIP = input;
            saveSettings();
            refreshDevices();
        }

        private void resc(object sender, EventArgs e)
        {
            Profile.discoverDevice();
        }
        private string sel = "";
        private void connectedDevicesList_SelectedIndexChanged(object sender, EventArgs e)
        {
            sel = (string)connectedDevicesList.SelectedItem;
            if (sel != null)
            {
                TabPage pg = getLogTab(sel);
                if (pg != null) Devices.SelectedTab = pg;
                IDT_Device.setDeviceType(sel);
            }
            else sel = "";


        }

        private void connectUsingTLS12ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            connectIP(true);
        }

        private void connectWithoutTLS12ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            connectIP(false);
        }

        Dictionary<string, string> fwList = new Dictionary<string, string>();
        Dictionary<string, string> snList = new Dictionary<string, string>();

        private void DisableButtons()
        {

        }

        private void EnableButtons()
        {

        }

        public string currentlySelected
        {
            get
            {
                if (connectedDevicesList.SelectedItem != null) return (string)connectedDevicesList.SelectedItem;
                return "";
            } // Getter
        }

        public Config currentlySelectedConfig
        {
            get
            {
                if (connectedDevicesList.SelectedItem != null)
                {
                    return getConfig((string)connectedDevicesList.SelectedItem);
                }
                return null;
            } // Getter
        }

        private Config getConfig(string ident)
        {
            if (ident == null || ident.Length == 0)
            {
                ident = currentlySelected;
                if (ident.Length == 0) return null;
            }
            if (config.ContainsKey(ident)) return config[ident];
            return null;
        }

        private void LoadConfigBtn_Click(object sender, EventArgs e)
        {
            openJSONFileDialog.InitialDirectory = Properties.Settings.Default.s_openLocation;

            Config cConfig = getConfig(currentlySelected);
            if (cConfig == null) return;

            DisableButtons();



            if (openJSONFileDialog.ShowDialog() == DialogResult.OK)
            {

                cConfig.InputConfig = null;
                configPath.Text = "";
                Properties.Settings.Default.s_openLocation = openJSONFileDialog.InitialDirectory;
                saveSettings();

                int verify = Config.VerifyHashData(openJSONFileDialog.FileName);
                if (verify == -1)
                {
                    SetOutputText("Could not load file \r\n");
                    EnableButtons();
                    return;

                }
                if (verify == 0)
                {
                    SetOutputText("File Checksum Validates \r\n");
                    if (cConfig.UpdateConfig(openJSONFileDialog.FileName, IDT_Device._path))
                        configPath.Text = openJSONFileDialog.FileName;
                    EnableButtons();
                    return;
                }


                if (verify == 2 || verify == 1)
                {
                    if (abortOpen.Checked)
                    {
                        SetOutputText("File Checksum Incorrect or Missing: Loading Cancelled. \r\n");
                        EnableButtons();
                        return;
                    }
                    else if (openFile.Checked)
                    {
                        SetOutputText("File Checksum Incorrect or Missing: IGNORED. Loading will be attempted.. \r\n");
                        if (cConfig.UpdateConfig(openJSONFileDialog.FileName, IDT_Device._path))
                            configPath.Text = openJSONFileDialog.FileName;
                        EnableButtons();
                        return;
                    }
                    else if (fixFile.Checked)
                    {
                        verify = Config.VerifyHashData(openJSONFileDialog.FileName, true);
                        if (verify == 3)
                        {
                            SetOutputText("File Checksum Incorrect or Missing: FILE REPAIRED. Loading will be attempted.. \r\n");
                            if (cConfig.UpdateConfig(openJSONFileDialog.FileName, IDT_Device._path))
                                configPath.Text = openJSONFileDialog.FileName;
                            EnableButtons();
                            return;
                        }
                        else
                        {
                            SetOutputText("Could not update hash and load profile \r\n");
                            EnableButtons();
                            return;
                        }
                    }


                }


            }







            if (cConfig.UpdateConfig(openJSONFileDialog.FileName, currentlySelected))
                configPath.Text = openJSONFileDialog.FileName;

            EnableButtons();
        }

        private void configPath_TextChanged(object sender, EventArgs e)
        {

        }

        private void unloadConfigBtn_Click(object sender, EventArgs e)
        {
            Config cConfig = getConfig(currentlySelected);
            if (cConfig == null)
            {
                SetOutputText("ERROR: There is no device connected");
                return;
            }
            DisableButtons();
            cConfig.InputConfig = null;
            configPath.Text = "";
            EnableButtons();
        }

        private void WriteToDeviceBtn_Click(object sender, EventArgs e)
        {
            Config cConfig = getConfig(currentlySelected);
            if (cConfig == null)
            {
                SetOutputText("ERROR: There is no device connected");
                return;
            }
            configPath.Text = cConfig.filepath;
            if (configPath.Text.Length == 0)
            {
                SetOutputText("ERROR: There is no configuration file loaded");
                return;
            }
            if (abortFirmware.Checked)
            {
                string currentFirmware = "";
                IDT_Device.SharedController.device_getFirmwareVersion(ref currentFirmware, currentlySelected);

                if (!cConfig.VerifyFWMach(configPath.Text, currentFirmware))
                {
                    SetOutputText("ERROR: Device FW version does not match profile FW version \r\n", currentlySelected);
                    return;
                }
                else
                {
                    SetOutputText("Firmware Version Validates", currentlySelected);
                }
            }
            if (!BackgroudWorkersAreBusy())
            {
                if (MessageBox.Show("Write configuration to device?", "Write Configuration?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    DisableButtons();
                    LoadProfileBackgroundWorker.RunWorkerAsync(argument: currentlySelected);
                }


            }
        }
        private bool BackgroudWorkersAreBusy()
        {
            return LoadProfileBackgroundWorker.IsBusy || CaptureProfileBackgroundWorker.IsBusy;
        }

        private void abortFirmware_CheckedChanged(object sender, EventArgs e)
        {
            if (loadingSettings) return;
            saveSettings();
        }

        private void ReadFromDevice(string ident)
        {
            if (!BackgroudWorkersAreBusy())
            {
                memo = "";
                rules = new InstallRules();
                ConfigSettings con = new ConfigSettings(this, ident);
                con.ShowDialog();

            }
        }

        public void executeRead(string ident)
        {
            DisableButtons();

            CaptureProfileBackgroundWorker.RunWorkerAsync(argument: ident);
        }
        private void ReadFromDeviceBtn_Click(object sender, EventArgs e)
        {
            ReadFromDevice(currentlySelected);
        }

        private void addMemoCB_CheckedChanged(object sender, EventArgs e)
        {
            if (loadingSettings) return;
            saveSettings();
        }

        private void tbMemo_TextChanged(object sender, EventArgs e)
        {
            if (loadingSettings) return;
            saveSettings();
        }

        private void LoadProfileBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {

            string ident = (string)e.Argument;

            Config cConfig = getConfig(ident);
            if (cConfig == null) return;


            cConfig.pLoadConfigToDevice(ident, configPath.Text);
        }

        private void LoadProfileBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            EnableButtons();
        }
        public string memo = null;
        public InstallRules rules = null;
        public List<DeviceCommand> cmds = null;

        private void CaptureProfileBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {

            string ident = (string)e.Argument;

            Config cConfig = getConfig(ident);
            if (cConfig == null) return;

            cConfig._CaptureConfigFromDevice(ident, memo, rules, cmds);
        }

        private void CaptureProfileBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

            EnableButtons();
        }
        private void captureComplete(string ident)
        {
            Config cConfig = getConfig(ident);
            if (cConfig == null) return;
            string json = cConfig.OutputJSON;
            if (json == null || json.Length < 10)
            {
                SetOutputText(IDTechSDK.Constants.APP_LOG_PREFIX + "profile not loaded from device");
                MessageBox.Show("There was a problem reading your configuration file", "Error Saving File", MessageBoxButtons.OK, MessageBoxIcon.Error);

                EnableButtons();
                return;
            }
            else
            {
                SaveFileDialog2(json, ident);

            }

            EnableButtons();
        }
        delegate void config2(string text, string ident);

        public void SaveFileDialog2(string output, string ident)
        {
            if (configPath.InvokeRequired)
            {
                config2 d = new config2(SaveFileDialog2);
                Invoke(d, new object[] { output, ident });
                return;
            }

            Config cConfig = getConfig(ident);
            if (cConfig == null) return;
            saveJSONFileDialog.InitialDirectory = Properties.Settings.Default.s_saveLocation;
            if (saveJSONFileDialog.ShowDialog() == DialogResult.OK)
            {
                if (saveJSONFileDialog.FileName != "")
                {
                    Properties.Settings.Default.s_saveLocation = saveJSONFileDialog.InitialDirectory;
                    saveSettings();
                    System.IO.FileStream fs = (System.IO.FileStream)saveJSONFileDialog.OpenFile();
                    byte[] bytesToWrite = Encoding.ASCII.GetBytes(output);
                    fs.Write(bytesToWrite, 0, bytesToWrite.Length);
                    fs.Close();
                    SetOutputText(IDTechSDK.Constants.APP_LOG_PREFIX + "Profile saved to " + saveJSONFileDialog.FileName);
                    if (MessageBox.Show("Save Successful. Would you like to load this profile for writing?", "Load File?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {

                        bool success = cConfig.UpdateConfig(saveJSONFileDialog.FileName, IDT_Device._path);
                        if (success) configPath.Text = saveJSONFileDialog.FileName;
                    }
                }
            }
        }

        private void decryptionUtilityToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            USDKDemo.Decrypt decrypt = new USDKDemo.Decrypt();
            decrypt.Show();
        }

        private void parsomaticToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (Microsoft.VisualBasic.Interaction.MsgBox("Open ID Tech Parsomatic in Web Browser?",
                  MsgBoxStyle.OkCancel, "Parsomatic") == MsgBoxResult.Ok)
            {
                System.Diagnostics.Process.Start("https://www.idtechproducts.com/hosted-files/tools/parsomatic.html");
            }
        }

        private void VerifyProfileBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            string ident = (string)e.Argument;

            Config cConfig = getConfig(ident);
            if (cConfig == null) return;



            cConfig.pLoadConfigToDevice(ident, configPath.Text, true);
        }

        private void VerifyProfileBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            EnableButtons();
            IDTechComm comm = Profile.getComm(currentlySelected);
            if (comm != null)
            {
                if (comm.verifyWarning)
                {
                    MessageBox.Show("Verification process completed with warnings. Please evaluate the log.", "Verify with Errors", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    comm.verifyWarning = false;

                }
                else
                {
                    MessageBox.Show("Verification process completed successfully. No differences found.", "Verify Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    comm.verifyWarning = false;
                }
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Config cConfig = getConfig(currentlySelected);
            if (cConfig == null)
            {
                SetOutputText("ERROR: There is no device connected");
                return;
            }
            configPath.Text = cConfig.filepath;
            if (configPath.Text.Length == 0)
            {
                SetOutputText("ERROR: There is no configuration file loaded");
                return;
            }
            if (!BackgroudWorkersAreBusy())
            {
                if (MessageBox.Show("Verify device against configuration?", "Verify Configuration?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    DisableButtons();
                    VerifyProfileBackgroundWorker.RunWorkerAsync(argument: currentlySelected);
                }


            }
        }

        private void enableSharedMenu()
        {
            bool enabled = enabledToolStripMenuItem.Checked;
            setDefaultAppToolStripMenuItem.Enabled = enabled;
            getDefaultAppToolStripMenuItem.Enabled = enabled;
            sendMessageToAppToolStripMenuItem.Enabled = enabled;
            broadcastMessageToolStripMenuItem.Enabled = enabled;
            registerForAppMessagesToolStripMenuItem.Enabled = enabled;
            unregisterForAppMessagesToolStripMenuItem.Enabled = enabled;
            registerForUnsolicitedDataToolStripMenuItem.Enabled = enabled;
            unregisterForUnsolicitedDataToolStripMenuItem.Enabled = enabled;
            getApplicationsAndStateToolStripMenuItem.Enabled = enabled;
            getHostIDToolStripMenuItem.Enabled = enabled;
            requestConnectedDevicesToolStripMenuItem.Enabled = enabled;
            exclusiveLockONToolStripMenuItem.Enabled = enabled;
            exclusiveLockOFFToolStripMenuItem.Enabled = enabled;
        }

        private string appName = "SDK_DEMO";
        private void enterSharedDeviceMode_Click(object sender, EventArgs e)
        {


            lastconnectident = "";

            if (enabledToolStripMenuItem.Checked)
            {
                DialogResult result = MessageBox.Show("Exit Shared Device Mode? This will restore local app for exclusive access to connected devices.", "Exit Shared Device Mode?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (result == DialogResult.OK)
                {
                    IDT_Device.enableRemoteCommandExecution(false, "SDK_DEMO");
                    enabledToolStripMenuItem.Checked = false;
                    enableSharedMenu();
                }
            }
            else
            {
                DialogResult result = MessageBox.Show("Enter Shared Device Mode? This will join this app to other apps running on this machine and will manage shareed access to a device. Only applicable when multiple apps are required to access a single device, for example, running both a POS application and a TMS agent at the same time.", "Shared Device Mode?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (result == DialogResult.OK)
                {

                    appName =
                             Microsoft.VisualBasic.Interaction.InputBox("Please enter a unique name to use for this shared application", "App Name",
                                 appName, -1, -1);

                    if (appName.Length == 0)
                    {
                        SetOutputText("No app name specified.  \r\n", "app");
                        return;
                    }

                    bool enabled = IDT_Device.enableRemoteCommandExecution(true, appName);

                    if (!enabled)
                    {
                        MessageBox.Show("Could not register a client connection to the server. Please check that a unique client name was used and that there are no network connectivity issues.", "Failure to Connect", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }

                    enabledToolStripMenuItem.Checked = true;
                    enableSharedMenu();
                }
            }


        }

        private void setDefaultAppToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RETURN_CODE rt = RemoteAPI.SharedController.setDefaultApp(appName, "");
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Default app set to " + appName + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to set default app to " + appName + ". 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void getDefaultAppToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string response = "";
            RETURN_CODE rt = RemoteAPI.SharedController.getDefaultApp(ref response, "");
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Default app set to " + response + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to set default app. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void sendMessageToAppToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String sendApp =
                             Microsoft.VisualBasic.Interaction.InputBox("Please enter the name of the app you would like to send a message to.", "App Name",
                                 "", -1, -1);

            if (sendApp.Length == 0)
            {
                SetOutputText("No app name specified.  \r\n", "app");
                return;
            }

            String message =
                 Microsoft.VisualBasic.Interaction.InputBox("Please enter the message you woule like to send.", "Message",
                     "", -1, -1);

            if (message.Length == 0)
            {
                SetOutputText("No message specified.  \r\n", "app");
                return;
            }

            RETURN_CODE rt = RemoteAPI.SharedController.sendAppMesssage(sendApp, Common.EncodeStringToBytes(message));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Message sent to " + sendApp + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to send message. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }

        }

        private void broadcastMessageToolStripMenuItem_Click(object sender, EventArgs e)
        {


            String message =
                 Microsoft.VisualBasic.Interaction.InputBox("Please enter the message you woule like to broadcast.", "Message",
                     "", -1, -1);

            if (message.Length == 0)
            {
                SetOutputText("No message specified.  \r\n", "app");
                return;
            }

            RETURN_CODE rt = RemoteAPI.SharedController.broadcastAppMesssage(Common.EncodeStringToBytes(message));
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Message successfully broadcast\r\n", "app");
            }
            else
            {
                SetOutputText("Message unsuccessfully broadcast. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void registerForAppMessagesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RETURN_CODE rt = RemoteAPI.SharedController.registerAppMessages();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Registered for messages. app: " + appName + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to register for messages. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void unregisterForAppMessagesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RETURN_CODE rt = RemoteAPI.SharedController.unregisterAppMessages();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Unregistered for messages. app: " + appName + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to unregister for messages. 0x" +
               String.Format("{0:X}", (ushort)rt) + ": " +
               IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void registerForUnsolicitedDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RETURN_CODE rt = RemoteAPI.SharedController.registerUnsolicitedData();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Registered for unsolicited data. app: " + appName + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to register for unsolicited data. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void unregisterForUnsolicitedDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RETURN_CODE rt = RemoteAPI.SharedController.unregisterUnsolicitedData();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Unregistered for unsolicited data. app: " + appName + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to unregister for unsolicited data. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void getApplicationsAndStateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string[] listing = null;
            RETURN_CODE rt = RemoteAPI.SharedController.getConnectedApplications(ref listing);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS && listing != null && listing.Length > 0)
            {
                foreach (string kvp in listing)
                {
                    SetOutputText("Application ID: " + kvp, "app");
                }

            }
            else
            {
                SetOutputText("Unable to get Application IDs and state. 0x" +
                    String.Format("{0:X}", (ushort)rt) + ": " +
                    IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void getHostIDToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string hostid = null;
            RETURN_CODE rt = RemoteAPI.SharedController.getHostID(ref hostid);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Host ID = : " + hostid + ".  \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to get hostID. 0x" +
               String.Format("{0:X}", (ushort)rt) + ": " +
               IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void requestConnectedDevicesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RETURN_CODE rt = RemoteAPI.SharedController.requstConnectedDevices();
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Request Connected Devices Successful", "app");
            }
            else
            {
                SetOutputText("Unable to request connected devices. 0x" +
               String.Format("{0:X}", (ushort)rt) + ": " +
               IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }

        private void setWaitTimeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String waittime =
                 Microsoft.VisualBasic.Interaction.InputBox("Please enter the amount of milliseconds to wait for another application to release their lock.", "Wait Time",
                     "3000", -1, -1);

            if (waittime.Length == 0)
            {
                SetOutputText("No wait time specified.  \r\n", "app");
                return;
            }
            int wait = 0;
            try
            {
                wait = Convert.ToInt32(waittime);
            }
            catch
            {
                SetOutputText("Invalid wait time specified.  \r\n", "app");
                return;
            }

            RemoteAPI.SharedController.appStateWaitMS = wait;
            SetOutputText("App wait time successfully set to " + wait.ToString() + "ms", "app");

        }

        private void getWaitTimeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SetOutputText("App wait time = " + RemoteAPI.SharedController.appStateWaitMS.ToString() + "ms", "app");
        }

        private void exclusiveLockONToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string deviceID = (string)connectedDevicesList.SelectedItem;
            if (deviceID == null && deviceID.Length == 0)
            {
                SetOutputText("You must select a valid device before setting the exclusive lock for that device.", "app");
                return;
            }
            string busyApp = null;
            RETURN_CODE rt = RemoteAPI.SharedController.setExclusiveLock(true, deviceID, ref busyApp);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Set exclusive lock successful \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to set exclusive lock.  Device locked by " + busyApp + ". 0x" +
               String.Format("{0:X}", (ushort)rt) + ": " +
               IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }

        }

        private void exclusiveLockOFFToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string deviceID = (string)connectedDevicesList.SelectedItem;
            if (deviceID == null && deviceID.Length == 0)
            {
                SetOutputText("You must select a valid device before setting the exclusive lock for that device.", "app");
                return;
            }
            string busyApp = null;
            RETURN_CODE rt = RemoteAPI.SharedController.setExclusiveLock(false, deviceID, ref busyApp);
            if (rt == RETURN_CODE.RETURN_CODE_DO_SUCCESS)
            {
                SetOutputText("Remove exclusive lock successful \r\n", "app");
            }
            else
            {
                SetOutputText("Unable to remove exclusive lock.  Device locked by " + busyApp + ". 0x" +
               String.Format("{0:X}", (ushort)rt) + ": " +
               IDTechSDK.errorCode.getErrorString(rt) + "\r\n", "app");
            }
        }
    }
}
